# The non-linear form F(v) for the hyperelastic part
# Domain type: Media = 1, Adventitia = y
# Boundary type: Dirichlet = 0, Gamma_s = 1, Gamma_I = 3, Gamma_M = 2 

# Function spaces
cell = tetrahedron
DG = FiniteElement("DG", cell, 1)
V = VectorElement("Lagrange", cell, 1)
Q = FiniteElement("Lagrange", cell, 1)
Qs = FiniteElement("Lagrange", cell, 1) #LZ Qs
# Mixed = V*Q*Qs
Mixed =  MixedElement([V, Q, Qs])

# Trial and test functions
dv_p_p = TrialFunction(Mixed)     # Incremental displacement
phi_q_q  = TestFunction(Mixed)      # Test function

v_p_p = Coefficient(Mixed)
(v, p, ps) = split(v_p_p)
(phi, q, qs)  = split(phi_q_q) # Test function

v0 = Coefficient(V)
u0 = Coefficient(V)

dt = Constant(cell) 
rho_S = Constant(cell) #density for Stent
mu_s = Coefficient(DG) 
nu_s = Constant(cell) 
#lam_s = Constant(cell) 
lam_s =  2*mu_s*nu_s/(1-2*nu_s)


# Kinematics
d = phi.geometric_dimension()
I = Identity(d)                 # Identity tensor
u = u0 + (v0 + v) *dt *.5
F = I + grad(u)                 # Deformation gradient
Finv = inv(F)                   # Inverse of deformation gradient
J  = det(F)

# Invariants of deformation tensors
def epsilon(u):
    return 0.5*(grad(u) + grad(u).T)

# the 1st Piola-Kirchhoff stress tensor
P = J * lam_s * div(u) *I + 2*mu_s* epsilon(u) * Finv.T

dxx = dx(210)

F = rho_S*inner((v-v0)/dt, phi) * dxx \
   + inner(P, grad(phi))* dxx #\
   #+ 1e-12*inner(p,q) *dxx


J = derivative(F, v_p_p, dv_p_p)


