// This code conforms with the UFC specification version 2017.1.0
// and was automatically generated by FFC version 2017.1.0.post2.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   add_tabulate_tensor_timing:     False
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   generate_dummy_tabulate_tensor: False
//   max_signature_length:           0
//   optimize:                       True
//   precision:                      None
//   quadrature_degree:              None
//   quadrature_rule:                None
//   representation:                 'auto'
//   split:                          False

#ifndef __ELASTIC2DP1P1_H
#define __ELASTIC2DP1P1_H
#include <algorithm>
#include <cmath>
#include <stdexcept>
#include <ufc.h>

class elastic2dp1p1_finite_element_0: public ufc::finite_element
{
public:

  elastic2dp1p1_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~elastic2dp1p1_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[2][1];
    for (unsigned int row = 0; row < 2; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[2][2];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[2];
    for (unsigned int r = 0; r < 2; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new elastic2dp1p1_finite_element_0();
  }

};


class elastic2dp1p1_finite_element_1: public ufc::finite_element
{
public:

  elastic2dp1p1_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~elastic2dp1p1_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[2][1];
    for (unsigned int row = 0; row < 2; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[2][2];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[5] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[0];
    dof_coordinates[7] = coordinate_dofs[1];
    dof_coordinates[8] = coordinate_dofs[2];
    dof_coordinates[9] = coordinate_dofs[3];
    dof_coordinates[10] = coordinate_dofs[4];
    dof_coordinates[11] = coordinate_dofs[5];
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic2dp1p1_finite_element_0();
        break;
      }
    case 1:
      {
        return new elastic2dp1p1_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new elastic2dp1p1_finite_element_1();
  }

};


class elastic2dp1p1_finite_element_2: public ufc::finite_element
{
public:

  elastic2dp1p1_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~elastic2dp1p1_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2), FiniteElement('Lagrange', triangle, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 9;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 9; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[2][1];
    for (unsigned int row = 0; row < 2; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[2][2];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 9; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[6];
    for (unsigned int r = 0; r < 6; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 9; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[3] = vals[1];
    values[6] = vals[2];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[4] = vals[1];
    values[7] = vals[2];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[5] = vals[1];
    values[8] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[4] = dof_values[4];
    vertex_values[7] = dof_values[5];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[6];
    vertex_values[5] = dof_values[7];
    vertex_values[8] = dof_values[8];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[0];
    dof_coordinates[7] = coordinate_dofs[1];
    dof_coordinates[8] = coordinate_dofs[2];
    dof_coordinates[9] = coordinate_dofs[3];
    dof_coordinates[10] = coordinate_dofs[4];
    dof_coordinates[11] = coordinate_dofs[5];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic2dp1p1_finite_element_1();
        break;
      }
    case 1:
      {
        return new elastic2dp1p1_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new elastic2dp1p1_finite_element_2();
  }

};


class elastic2dp1p1_finite_element_3: public ufc::finite_element
{
public:

  elastic2dp1p1_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~elastic2dp1p1_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', triangle, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.3333333333333334*coordinate_dofs[0] + 0.3333333333333333*coordinate_dofs[2] + 0.3333333333333333*coordinate_dofs[4];
      y[1] = 0.3333333333333334*coordinate_dofs[1] + 0.3333333333333333*coordinate_dofs[3] + 0.3333333333333333*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.3333333333333334*coordinate_dofs[0] + 0.3333333333333333*coordinate_dofs[2] + 0.3333333333333333*coordinate_dofs[4];
    y[1] = 0.3333333333333334*coordinate_dofs[1] + 0.3333333333333333*coordinate_dofs[3] + 0.3333333333333333*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = 0.3333333333333334*coordinate_dofs[0] + 0.3333333333333333*coordinate_dofs[2] + 0.3333333333333333*coordinate_dofs[4];
    dof_coordinates[1] = 0.3333333333333334*coordinate_dofs[1] + 0.3333333333333333*coordinate_dofs[3] + 0.3333333333333333*coordinate_dofs[5];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new elastic2dp1p1_finite_element_3();
  }

};


class elastic2dp1p1_finite_element_4: public ufc::finite_element
{
public:

  elastic2dp1p1_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~elastic2dp1p1_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Discontinuous Lagrange', triangle, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Discontinuous Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[2][1];
    for (unsigned int row = 0; row < 2; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[2][2];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[2];
    for (unsigned int r = 0; r < 2; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new elastic2dp1p1_finite_element_4();
  }

};


class elastic2dp1p1_dofmap_0: public ufc::dofmap
{
public:

  elastic2dp1p1_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~elastic2dp1p1_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 2;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new elastic2dp1p1_dofmap_0();
  }

};


class elastic2dp1p1_dofmap_1: public ufc::dofmap
{
public:

  elastic2dp1p1_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~elastic2dp1p1_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2*num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 4;
        break;
      }
    case 2:
      {
        return 6;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 5;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 5;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 5;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic2dp1p1_dofmap_0();
        break;
      }
    case 1:
      {
        return new elastic2dp1p1_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new elastic2dp1p1_dofmap_1();
  }

};


class elastic2dp1p1_dofmap_2: public ufc::dofmap
{
public:

  elastic2dp1p1_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~elastic2dp1p1_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2), FiniteElement('Lagrange', triangle, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3*num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 9;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 6;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 6;
        break;
      }
    case 2:
      {
        return 9;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 5;
      dofs[4] = 7;
      dofs[5] = 8;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 8;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 4;
        dofs[2] = 7;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 5;
        dofs[2] = 8;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 4;
        dofs[2] = 7;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 5;
        dofs[2] = 8;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
        dofs[4] = 7;
        dofs[5] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 8;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic2dp1p1_dofmap_1();
        break;
      }
    case 1:
      {
        return new elastic2dp1p1_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new elastic2dp1p1_dofmap_2();
  }

};


class elastic2dp1p1_dofmap_3: public ufc::dofmap
{
public:

  elastic2dp1p1_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~elastic2dp1p1_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', triangle, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new elastic2dp1p1_dofmap_3();
  }

};


class elastic2dp1p1_dofmap_4: public ufc::dofmap
{
public:

  elastic2dp1p1_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~elastic2dp1p1_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', triangle, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3*num_global_entities[2];
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 3*entity_indices[2][0];
    dofs[1] = 3*entity_indices[2][0] + 1;
    dofs[2] = 3*entity_indices[2][0] + 2;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new elastic2dp1p1_dofmap_4();
  }

};


class elastic2dp1p1_cell_integral_0_1: public ufc::cell_integral
{
public:

  elastic2dp1p1_cell_integral_0_1() : ufc::cell_integral()
  {

  }

  ~elastic2dp1p1_cell_integral_0_1() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 3
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 3
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           3
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights6[6] = { 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE13_C0_D01_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE13_C0_Q6[1][6][3] =
        { { { 0.109039009072877, 0.659027622374092, 0.231933368553031 },
            { 0.231933368553031, 0.659027622374092, 0.109039009072877 },
            { 0.109039009072877, 0.231933368553031, 0.6590276223740918 },
            { 0.659027622374092, 0.231933368553031, 0.109039009072877 },
            { 0.231933368553031, 0.109039009072877, 0.6590276223740918 },
            { 0.659027622374092, 0.109039009072877, 0.231933368553031 } } };
    // Unstructured piecewise computations
    const double w2_d1_c0 = w[2][0] * FE13_C0_D01_Q6[0][0][0] + w[2][2] * FE13_C0_D01_Q6[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE13_C0_D01_Q6[0][0][0] + coordinate_dofs[2] * FE13_C0_D01_Q6[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE13_C0_D01_Q6[0][0][0] + coordinate_dofs[5] * FE13_C0_D01_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE13_C0_D01_Q6[0][0][0] + coordinate_dofs[4] * FE13_C0_D01_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE13_C0_D01_Q6[0][0][0] + coordinate_dofs[3] * FE13_C0_D01_Q6[0][0][1];
    double w2_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c0 += w[2][ic] * FE13_C0_D01_Q6[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE13_C0_D01_Q6[0][0][0] + w[0][2] * FE13_C0_D01_Q6[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE13_C0_D01_Q6[0][0][ic];
    const double w1_d1_c0 = w[1][0] * FE13_C0_D01_Q6[0][0][0] + w[1][2] * FE13_C0_D01_Q6[0][0][1];
    double w1_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c0 += w[1][ic] * FE13_C0_D01_Q6[0][0][ic];
    const double w2_d1_c1 = w[2][3] * FE13_C0_D01_Q6[0][0][0] + w[2][5] * FE13_C0_D01_Q6[0][0][1];
    double w2_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c1 += w[2][ic + 3] * FE13_C0_D01_Q6[0][0][ic];
    const double w0_d1_c1 = w[0][3] * FE13_C0_D01_Q6[0][0][0] + w[0][5] * FE13_C0_D01_Q6[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 3] * FE13_C0_D01_Q6[0][0][ic];
    const double w1_d1_c1 = w[1][3] * FE13_C0_D01_Q6[0][0][0] + w[1][5] * FE13_C0_D01_Q6[0][0][1];
    double w1_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c1 += w[1][ic + 3] * FE13_C0_D01_Q6[0][0][ic];
    alignas(32) double sp[66];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = w2_d1_c0 * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = w2_d0_c0 * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = w0_d1_c0 * sp[3];
    sp[9] = w0_d0_c0 * sp[5];
    sp[10] = sp[8] + sp[9];
    sp[11] = w1_d1_c0 * sp[3];
    sp[12] = w1_d0_c0 * sp[5];
    sp[13] = sp[11] + sp[12];
    sp[14] = sp[10] + sp[13];
    sp[15] = sp[14] * w[7][0];
    sp[16] = sp[7] + 0.5 * sp[15];
    sp[17] = J_c3 / sp[2];
    sp[18] = w2_d0_c0 * sp[17];
    sp[19] = -1 * J_c2 / sp[2];
    sp[20] = w2_d1_c0 * sp[19];
    sp[21] = sp[18] + sp[20];
    sp[22] = w0_d0_c0 * sp[17];
    sp[23] = w0_d1_c0 * sp[19];
    sp[24] = sp[22] + sp[23];
    sp[25] = w1_d0_c0 * sp[17];
    sp[26] = w1_d1_c0 * sp[19];
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[24] + sp[27];
    sp[29] = sp[28] * w[7][0];
    sp[30] = sp[21] + 0.5 * sp[29];
    sp[31] = (1 + sp[30]) * (1 + sp[30]);
    sp[32] = sp[16] * sp[16];
    sp[33] = sp[31] + sp[32];
    sp[34] = w2_d1_c1 * sp[3];
    sp[35] = w2_d0_c1 * sp[5];
    sp[36] = sp[34] + sp[35];
    sp[37] = w0_d1_c1 * sp[3];
    sp[38] = w0_d0_c1 * sp[5];
    sp[39] = sp[37] + sp[38];
    sp[40] = w1_d1_c1 * sp[3];
    sp[41] = w1_d0_c1 * sp[5];
    sp[42] = sp[40] + sp[41];
    sp[43] = sp[39] + sp[42];
    sp[44] = sp[43] * w[7][0];
    sp[45] = sp[36] + 0.5 * sp[44];
    sp[46] = (1 + sp[45]) * (1 + sp[45]);
    sp[47] = w2_d0_c1 * sp[17];
    sp[48] = w2_d1_c1 * sp[19];
    sp[49] = sp[47] + sp[48];
    sp[50] = w0_d0_c1 * sp[17];
    sp[51] = w0_d1_c1 * sp[19];
    sp[52] = sp[50] + sp[51];
    sp[53] = w1_d0_c1 * sp[17];
    sp[54] = w1_d1_c1 * sp[19];
    sp[55] = sp[53] + sp[54];
    sp[56] = sp[52] + sp[55];
    sp[57] = sp[56] * w[7][0];
    sp[58] = sp[49] + 0.5 * sp[57];
    sp[59] = sp[58] * sp[58];
    sp[60] = sp[46] + sp[59];
    sp[61] = sp[33] + sp[60];
    sp[62] = (1 + sp[45]) * (1 + sp[30]);
    sp[63] = sp[16] * sp[58];
    sp[64] = sp[62] + -1 * sp[63];
    sp[65] = std::abs(sp[2]);
    alignas(32) double BF0[2] = {};
    alignas(32) double BF1[3] = {};
    alignas(32) double BF2[2] = {};
    alignas(32) double BF3[2] = {};
    alignas(32) double BF4[3] = {};
    alignas(32) double BF5[2] = {};
    alignas(32) double BF6[3] = {};
    for (int iq = 0; iq < 6; ++iq)
    {
        // Quadrature loop body setup (num_points=6)
        // Unstructured varying computations for num_points=6
        double w6 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w6 += w[6][ic] * FE13_C0_Q6[0][iq][ic];
        double w5 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w5 += w[5][ic] * FE13_C0_Q6[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE13_C0_Q6[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w0_c2 += w[0][ic + 6] * FE13_C0_Q6[0][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w0_c0 += w[0][ic] * FE13_C0_Q6[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c0 += w[1][ic] * FE13_C0_Q6[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w0_c1 += w[0][ic + 3] * FE13_C0_Q6[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c1 += w[1][ic + 3] * FE13_C0_Q6[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE13_C0_Q6[0][iq][ic];
        alignas(32) double sv6[40];
        sv6[0] = (-2 + sp[61]) * (2 * w6);
        sv6[1] = sv6[0] + w5;
        sv6[2] = sv6[1] * (2 * sp[64]);
        sv6[3] = sp[16] * sv6[2];
        sv6[4] = -1 * sp[58] * (-1 * w4);
        sv6[5] = sv6[3] + sv6[4];
        sv6[6] = sv6[5] * sp[3];
        sv6[7] = sv6[5] * sp[5];
        sv6[8] = (1 + sp[45]) * sv6[2];
        sv6[9] = (1 + sp[30]) * (-1 * w4);
        sv6[10] = sv6[8] + sv6[9];
        sv6[11] = sv6[10] * sp[3];
        sv6[12] = sv6[10] * sp[5];
        sv6[13] = (1 + sp[30]) * sv6[2];
        sv6[14] = (1 + sp[45]) * (-1 * w4);
        sv6[15] = sv6[13] + sv6[14];
        sv6[16] = sv6[15] * sp[19];
        sv6[17] = sv6[15] * sp[17];
        sv6[18] = sp[58] * sv6[2];
        sv6[19] = -1 * sp[16] * (-1 * w4);
        sv6[20] = sv6[18] + sv6[19];
        sv6[21] = sv6[20] * sp[19];
        sv6[22] = sv6[20] * sp[17];
        sv6[23] = sv6[6] + sv6[16];
        sv6[24] = sv6[17] + sv6[7];
        sv6[25] = sv6[11] + sv6[21];
        sv6[26] = sv6[22] + sv6[12];
        sv6[27] = w0_c0 + -1 * w1_c0;
        sv6[28] = sv6[27] / w[7][0];
        sv6[29] = w0_c1 + -1 * w1_c1;
        sv6[30] = sv6[29] / w[7][0];
        sv6[31] = sv6[28] * w3;
        sv6[32] = sv6[30] * w3;
        sv6[33] = sv6[23] * sp[65];
        sv6[34] = sv6[24] * sp[65];
        sv6[35] = sv6[25] * sp[65];
        sv6[36] = sv6[26] * sp[65];
        sv6[37] = 1e-12 * w0_c2 * sp[65];
        sv6[38] = sv6[31] * sp[65];
        sv6[39] = sv6[32] * sp[65];
        const double fw0 = sv6[34] * weights6[iq];
        for (int i = 0; i < 2; ++i)
            BF0[i] += fw0 * FE13_C0_D01_Q6[0][0][i];
        const double fw1 = sv6[38] * weights6[iq];
        for (int i = 0; i < 3; ++i)
            BF1[i] += fw1 * FE13_C0_Q6[0][iq][i];
        const double fw2 = sv6[33] * weights6[iq];
        for (int i = 0; i < 2; ++i)
            BF2[i] += fw2 * FE13_C0_D01_Q6[0][0][i];
        const double fw3 = sv6[36] * weights6[iq];
        for (int i = 0; i < 2; ++i)
            BF3[i] += fw3 * FE13_C0_D01_Q6[0][0][i];
        const double fw4 = sv6[39] * weights6[iq];
        for (int i = 0; i < 3; ++i)
            BF4[i] += fw4 * FE13_C0_Q6[0][iq][i];
        const double fw5 = sv6[35] * weights6[iq];
        for (int i = 0; i < 2; ++i)
            BF5[i] += fw5 * FE13_C0_D01_Q6[0][0][i];
        const double fw6 = sv6[37] * weights6[iq];
        for (int i = 0; i < 3; ++i)
            BF6[i] += fw6 * FE13_C0_Q6[0][iq][i];
    }
    std::fill(&A[0], &A[9], 0.0);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 3, 5 };
    for (int i = 0; i < 2; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 3; ++i)
        A[i] += BF1[i];
    for (int i = 0; i < 2; ++i)
        A[DM0[i]] += BF2[i];
    for (int i = 0; i < 2; ++i)
        A[i + 3] += BF3[i];
    for (int i = 0; i < 3; ++i)
        A[i + 3] += BF4[i];
    for (int i = 0; i < 2; ++i)
        A[DM1[i]] += BF5[i];
    for (int i = 0; i < 3; ++i)
        A[i + 6] += BF6[i];
  }

};


class elastic2dp1p1_cell_integral_0_2: public ufc::cell_integral
{
public:

  elastic2dp1p1_cell_integral_0_2() : ufc::cell_integral()
  {

  }

  ~elastic2dp1p1_cell_integral_0_2() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 3
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 3
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           3
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights6[6] = { 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE13_C0_D01_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE13_C0_Q6[1][6][3] =
        { { { 0.109039009072877, 0.659027622374092, 0.231933368553031 },
            { 0.231933368553031, 0.659027622374092, 0.109039009072877 },
            { 0.109039009072877, 0.231933368553031, 0.6590276223740918 },
            { 0.659027622374092, 0.231933368553031, 0.109039009072877 },
            { 0.231933368553031, 0.109039009072877, 0.6590276223740918 },
            { 0.659027622374092, 0.109039009072877, 0.231933368553031 } } };
    // Unstructured piecewise computations
    const double w2_d1_c0 = w[2][0] * FE13_C0_D01_Q6[0][0][0] + w[2][2] * FE13_C0_D01_Q6[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE13_C0_D01_Q6[0][0][0] + coordinate_dofs[2] * FE13_C0_D01_Q6[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE13_C0_D01_Q6[0][0][0] + coordinate_dofs[5] * FE13_C0_D01_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE13_C0_D01_Q6[0][0][0] + coordinate_dofs[4] * FE13_C0_D01_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE13_C0_D01_Q6[0][0][0] + coordinate_dofs[3] * FE13_C0_D01_Q6[0][0][1];
    double w2_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c0 += w[2][ic] * FE13_C0_D01_Q6[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE13_C0_D01_Q6[0][0][0] + w[0][2] * FE13_C0_D01_Q6[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE13_C0_D01_Q6[0][0][ic];
    const double w1_d1_c0 = w[1][0] * FE13_C0_D01_Q6[0][0][0] + w[1][2] * FE13_C0_D01_Q6[0][0][1];
    double w1_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c0 += w[1][ic] * FE13_C0_D01_Q6[0][0][ic];
    const double w2_d1_c1 = w[2][3] * FE13_C0_D01_Q6[0][0][0] + w[2][5] * FE13_C0_D01_Q6[0][0][1];
    double w2_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c1 += w[2][ic + 3] * FE13_C0_D01_Q6[0][0][ic];
    const double w0_d1_c1 = w[0][3] * FE13_C0_D01_Q6[0][0][0] + w[0][5] * FE13_C0_D01_Q6[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 3] * FE13_C0_D01_Q6[0][0][ic];
    const double w1_d1_c1 = w[1][3] * FE13_C0_D01_Q6[0][0][0] + w[1][5] * FE13_C0_D01_Q6[0][0][1];
    double w1_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c1 += w[1][ic + 3] * FE13_C0_D01_Q6[0][0][ic];
    alignas(32) double sp[66];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = w2_d1_c0 * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = w2_d0_c0 * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = w0_d1_c0 * sp[3];
    sp[9] = w0_d0_c0 * sp[5];
    sp[10] = sp[8] + sp[9];
    sp[11] = w1_d1_c0 * sp[3];
    sp[12] = w1_d0_c0 * sp[5];
    sp[13] = sp[11] + sp[12];
    sp[14] = sp[10] + sp[13];
    sp[15] = sp[14] * w[7][0];
    sp[16] = sp[7] + 0.5 * sp[15];
    sp[17] = J_c3 / sp[2];
    sp[18] = w2_d0_c0 * sp[17];
    sp[19] = -1 * J_c2 / sp[2];
    sp[20] = w2_d1_c0 * sp[19];
    sp[21] = sp[18] + sp[20];
    sp[22] = w0_d0_c0 * sp[17];
    sp[23] = w0_d1_c0 * sp[19];
    sp[24] = sp[22] + sp[23];
    sp[25] = w1_d0_c0 * sp[17];
    sp[26] = w1_d1_c0 * sp[19];
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[24] + sp[27];
    sp[29] = sp[28] * w[7][0];
    sp[30] = sp[21] + 0.5 * sp[29];
    sp[31] = (1 + sp[30]) * (1 + sp[30]);
    sp[32] = sp[16] * sp[16];
    sp[33] = sp[31] + sp[32];
    sp[34] = w2_d1_c1 * sp[3];
    sp[35] = w2_d0_c1 * sp[5];
    sp[36] = sp[34] + sp[35];
    sp[37] = w0_d1_c1 * sp[3];
    sp[38] = w0_d0_c1 * sp[5];
    sp[39] = sp[37] + sp[38];
    sp[40] = w1_d1_c1 * sp[3];
    sp[41] = w1_d0_c1 * sp[5];
    sp[42] = sp[40] + sp[41];
    sp[43] = sp[39] + sp[42];
    sp[44] = sp[43] * w[7][0];
    sp[45] = sp[36] + 0.5 * sp[44];
    sp[46] = (1 + sp[45]) * (1 + sp[45]);
    sp[47] = w2_d0_c1 * sp[17];
    sp[48] = w2_d1_c1 * sp[19];
    sp[49] = sp[47] + sp[48];
    sp[50] = w0_d0_c1 * sp[17];
    sp[51] = w0_d1_c1 * sp[19];
    sp[52] = sp[50] + sp[51];
    sp[53] = w1_d0_c1 * sp[17];
    sp[54] = w1_d1_c1 * sp[19];
    sp[55] = sp[53] + sp[54];
    sp[56] = sp[52] + sp[55];
    sp[57] = sp[56] * w[7][0];
    sp[58] = sp[49] + 0.5 * sp[57];
    sp[59] = sp[58] * sp[58];
    sp[60] = sp[46] + sp[59];
    sp[61] = sp[33] + sp[60];
    sp[62] = (1 + sp[45]) * (1 + sp[30]);
    sp[63] = sp[16] * sp[58];
    sp[64] = sp[62] + -1 * sp[63];
    sp[65] = std::abs(sp[2]);
    alignas(32) double BF0[2] = {};
    alignas(32) double BF1[3] = {};
    alignas(32) double BF2[2] = {};
    alignas(32) double BF3[2] = {};
    alignas(32) double BF4[3] = {};
    alignas(32) double BF5[2] = {};
    alignas(32) double BF6[3] = {};
    for (int iq = 0; iq < 6; ++iq)
    {
        // Quadrature loop body setup (num_points=6)
        // Unstructured varying computations for num_points=6
        double w6 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w6 += w[6][ic] * FE13_C0_Q6[0][iq][ic];
        double w5 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w5 += w[5][ic] * FE13_C0_Q6[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE13_C0_Q6[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w0_c2 += w[0][ic + 6] * FE13_C0_Q6[0][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w0_c0 += w[0][ic] * FE13_C0_Q6[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c0 += w[1][ic] * FE13_C0_Q6[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w0_c1 += w[0][ic + 3] * FE13_C0_Q6[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c1 += w[1][ic + 3] * FE13_C0_Q6[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE13_C0_Q6[0][iq][ic];
        alignas(32) double sv6[40];
        sv6[0] = (-2 + sp[61]) * (2 * w6);
        sv6[1] = sv6[0] + w5;
        sv6[2] = sv6[1] * (2 * sp[64]);
        sv6[3] = sp[16] * sv6[2];
        sv6[4] = -1 * sp[58] * (-1 * w4);
        sv6[5] = sv6[3] + sv6[4];
        sv6[6] = sv6[5] * sp[3];
        sv6[7] = sv6[5] * sp[5];
        sv6[8] = (1 + sp[45]) * sv6[2];
        sv6[9] = (1 + sp[30]) * (-1 * w4);
        sv6[10] = sv6[8] + sv6[9];
        sv6[11] = sv6[10] * sp[3];
        sv6[12] = sv6[10] * sp[5];
        sv6[13] = (1 + sp[30]) * sv6[2];
        sv6[14] = (1 + sp[45]) * (-1 * w4);
        sv6[15] = sv6[13] + sv6[14];
        sv6[16] = sv6[15] * sp[19];
        sv6[17] = sv6[15] * sp[17];
        sv6[18] = sp[58] * sv6[2];
        sv6[19] = -1 * sp[16] * (-1 * w4);
        sv6[20] = sv6[18] + sv6[19];
        sv6[21] = sv6[20] * sp[19];
        sv6[22] = sv6[20] * sp[17];
        sv6[23] = sv6[6] + sv6[16];
        sv6[24] = sv6[17] + sv6[7];
        sv6[25] = sv6[11] + sv6[21];
        sv6[26] = sv6[22] + sv6[12];
        sv6[27] = w0_c0 + -1 * w1_c0;
        sv6[28] = sv6[27] / w[7][0];
        sv6[29] = w0_c1 + -1 * w1_c1;
        sv6[30] = sv6[29] / w[7][0];
        sv6[31] = sv6[28] * w3;
        sv6[32] = sv6[30] * w3;
        sv6[33] = sv6[23] * sp[65];
        sv6[34] = sv6[24] * sp[65];
        sv6[35] = sv6[25] * sp[65];
        sv6[36] = sv6[26] * sp[65];
        sv6[37] = 1e-12 * w0_c2 * sp[65];
        sv6[38] = sv6[31] * sp[65];
        sv6[39] = sv6[32] * sp[65];
        const double fw0 = sv6[34] * weights6[iq];
        for (int i = 0; i < 2; ++i)
            BF0[i] += fw0 * FE13_C0_D01_Q6[0][0][i];
        const double fw1 = sv6[38] * weights6[iq];
        for (int i = 0; i < 3; ++i)
            BF1[i] += fw1 * FE13_C0_Q6[0][iq][i];
        const double fw2 = sv6[33] * weights6[iq];
        for (int i = 0; i < 2; ++i)
            BF2[i] += fw2 * FE13_C0_D01_Q6[0][0][i];
        const double fw3 = sv6[36] * weights6[iq];
        for (int i = 0; i < 2; ++i)
            BF3[i] += fw3 * FE13_C0_D01_Q6[0][0][i];
        const double fw4 = sv6[39] * weights6[iq];
        for (int i = 0; i < 3; ++i)
            BF4[i] += fw4 * FE13_C0_Q6[0][iq][i];
        const double fw5 = sv6[35] * weights6[iq];
        for (int i = 0; i < 2; ++i)
            BF5[i] += fw5 * FE13_C0_D01_Q6[0][0][i];
        const double fw6 = sv6[37] * weights6[iq];
        for (int i = 0; i < 3; ++i)
            BF6[i] += fw6 * FE13_C0_Q6[0][iq][i];
    }
    std::fill(&A[0], &A[9], 0.0);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 3, 5 };
    for (int i = 0; i < 2; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 3; ++i)
        A[i] += BF1[i];
    for (int i = 0; i < 2; ++i)
        A[DM0[i]] += BF2[i];
    for (int i = 0; i < 2; ++i)
        A[i + 3] += BF3[i];
    for (int i = 0; i < 3; ++i)
        A[i + 3] += BF4[i];
    for (int i = 0; i < 2; ++i)
        A[DM1[i]] += BF5[i];
    for (int i = 0; i < 3; ++i)
        A[i + 6] += BF6[i];
  }

};


class elastic2dp1p1_cell_integral_1_1: public ufc::cell_integral
{
public:

  elastic2dp1p1_cell_integral_1_1() : ufc::cell_integral()
  {

  }

  ~elastic2dp1p1_cell_integral_1_1() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 3
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 3
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           3
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights6[6] = { 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE17_C0_D01_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE17_C0_Q6[1][6][3] =
        { { { 0.109039009072877, 0.659027622374092, 0.231933368553031 },
            { 0.231933368553031, 0.659027622374092, 0.109039009072877 },
            { 0.109039009072877, 0.231933368553031, 0.6590276223740918 },
            { 0.659027622374092, 0.231933368553031, 0.109039009072877 },
            { 0.231933368553031, 0.109039009072877, 0.6590276223740918 },
            { 0.659027622374092, 0.109039009072877, 0.231933368553031 } } };
    // Unstructured piecewise computations
    double w2_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c0 += w[2][ic] * FE17_C0_D01_Q6[0][0][ic];
    const double J_c3 = coordinate_dofs[1] * FE17_C0_D01_Q6[0][0][0] + coordinate_dofs[5] * FE17_C0_D01_Q6[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE17_C0_D01_Q6[0][0][0] + coordinate_dofs[2] * FE17_C0_D01_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE17_C0_D01_Q6[0][0][0] + coordinate_dofs[4] * FE17_C0_D01_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE17_C0_D01_Q6[0][0][0] + coordinate_dofs[3] * FE17_C0_D01_Q6[0][0][1];
    const double w2_d1_c0 = w[2][0] * FE17_C0_D01_Q6[0][0][0] + w[2][2] * FE17_C0_D01_Q6[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE17_C0_D01_Q6[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE17_C0_D01_Q6[0][0][0] + w[0][2] * FE17_C0_D01_Q6[0][0][1];
    double w1_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c0 += w[1][ic] * FE17_C0_D01_Q6[0][0][ic];
    const double w1_d1_c0 = w[1][0] * FE17_C0_D01_Q6[0][0][0] + w[1][2] * FE17_C0_D01_Q6[0][0][1];
    const double w2_d1_c1 = w[2][3] * FE17_C0_D01_Q6[0][0][0] + w[2][5] * FE17_C0_D01_Q6[0][0][1];
    double w2_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c1 += w[2][ic + 3] * FE17_C0_D01_Q6[0][0][ic];
    const double w0_d1_c1 = w[0][3] * FE17_C0_D01_Q6[0][0][0] + w[0][5] * FE17_C0_D01_Q6[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 3] * FE17_C0_D01_Q6[0][0][ic];
    const double w1_d1_c1 = w[1][3] * FE17_C0_D01_Q6[0][0][0] + w[1][5] * FE17_C0_D01_Q6[0][0][1];
    double w1_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c1 += w[1][ic + 3] * FE17_C0_D01_Q6[0][0][ic];
    alignas(32) double sp[102];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c3 / sp[2];
    sp[4] = w2_d0_c0 * sp[3];
    sp[5] = -1 * J_c2 / sp[2];
    sp[6] = w2_d1_c0 * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = w0_d0_c0 * sp[3];
    sp[9] = w0_d1_c0 * sp[5];
    sp[10] = sp[8] + sp[9];
    sp[11] = w1_d0_c0 * sp[3];
    sp[12] = w1_d1_c0 * sp[5];
    sp[13] = sp[11] + sp[12];
    sp[14] = sp[10] + sp[13];
    sp[15] = sp[14] * w[7][0];
    sp[16] = sp[7] + 0.5 * sp[15];
    sp[17] = (1 + sp[16]) * (1 + sp[16]);
    sp[18] = J_c0 / sp[2];
    sp[19] = w2_d1_c0 * sp[18];
    sp[20] = -1 * J_c1 / sp[2];
    sp[21] = w2_d0_c0 * sp[20];
    sp[22] = sp[19] + sp[21];
    sp[23] = w0_d1_c0 * sp[18];
    sp[24] = w0_d0_c0 * sp[20];
    sp[25] = sp[23] + sp[24];
    sp[26] = w1_d1_c0 * sp[18];
    sp[27] = w1_d0_c0 * sp[20];
    sp[28] = sp[26] + sp[27];
    sp[29] = sp[25] + sp[28];
    sp[30] = sp[29] * w[7][0];
    sp[31] = sp[22] + 0.5 * sp[30];
    sp[32] = sp[31] * sp[31];
    sp[33] = sp[17] + sp[32];
    sp[34] = w2_d1_c1 * sp[18];
    sp[35] = w2_d0_c1 * sp[20];
    sp[36] = sp[34] + sp[35];
    sp[37] = w0_d1_c1 * sp[18];
    sp[38] = w0_d0_c1 * sp[20];
    sp[39] = sp[37] + sp[38];
    sp[40] = w1_d1_c1 * sp[18];
    sp[41] = w1_d0_c1 * sp[20];
    sp[42] = sp[40] + sp[41];
    sp[43] = sp[39] + sp[42];
    sp[44] = sp[43] * w[7][0];
    sp[45] = sp[36] + 0.5 * sp[44];
    sp[46] = (1 + sp[45]) * (1 + sp[45]);
    sp[47] = w2_d0_c1 * sp[3];
    sp[48] = w2_d1_c1 * sp[5];
    sp[49] = sp[47] + sp[48];
    sp[50] = w0_d0_c1 * sp[3];
    sp[51] = w0_d1_c1 * sp[5];
    sp[52] = sp[50] + sp[51];
    sp[53] = w1_d0_c1 * sp[3];
    sp[54] = w1_d1_c1 * sp[5];
    sp[55] = sp[53] + sp[54];
    sp[56] = sp[52] + sp[55];
    sp[57] = sp[56] * w[7][0];
    sp[58] = sp[49] + 0.5 * sp[57];
    sp[59] = sp[58] * sp[58];
    sp[60] = sp[46] + sp[59];
    sp[61] = sp[33] + sp[60];
    sp[62] = sp[18] * w[7][0];
    sp[63] = sp[20] * w[7][0];
    sp[64] = (1 + sp[16]) * (0.5 * sp[62]);
    sp[65] = (1 + sp[16]) * (0.5 * sp[63]);
    sp[66] = sp[3] * w[7][0];
    sp[67] = sp[5] * w[7][0];
    sp[68] = (1 + sp[45]) * (0.5 * sp[66]);
    sp[69] = (1 + sp[45]) * (0.5 * sp[67]);
    sp[70] = sp[58] * (0.5 * sp[63]);
    sp[71] = sp[58] * (0.5 * sp[62]);
    sp[72] = sp[31] * (0.5 * sp[67]);
    sp[73] = sp[31] * (0.5 * sp[66]);
    sp[74] = -1 * sp[72] + sp[64];
    sp[75] = -1 * sp[73] + sp[65];
    sp[76] = -1 * sp[70] + sp[68];
    sp[77] = -1 * sp[71] + sp[69];
    sp[78] = (1 + sp[45]) * (1 + sp[16]);
    sp[79] = sp[31] * sp[58];
    sp[80] = sp[78] + -1 * sp[79];
    sp[81] = sp[31] * (0.5 * sp[63]);
    sp[82] = sp[31] * (0.5 * sp[62]);
    sp[83] = sp[81] + sp[81];
    sp[84] = sp[82] + sp[82];
    sp[85] = (1 + sp[16]) * (0.5 * sp[66]);
    sp[86] = (1 + sp[16]) * (0.5 * sp[67]);
    sp[87] = sp[85] + sp[85];
    sp[88] = sp[86] + sp[86];
    sp[89] = sp[87] + sp[83];
    sp[90] = sp[84] + sp[88];
    sp[91] = (1 + sp[45]) * (0.5 * sp[62]);
    sp[92] = (1 + sp[45]) * (0.5 * sp[63]);
    sp[93] = sp[91] + sp[91];
    sp[94] = sp[92] + sp[92];
    sp[95] = sp[58] * (0.5 * sp[67]);
    sp[96] = sp[58] * (0.5 * sp[66]);
    sp[97] = sp[95] + sp[95];
    sp[98] = sp[96] + sp[96];
    sp[99] = sp[93] + sp[97];
    sp[100] = sp[98] + sp[94];
    sp[101] = std::abs(sp[2]);
    alignas(32) double TP0[2] = {};
    alignas(32) double TP1[2] = {};
    alignas(32) double TP2[2] = {};
    alignas(32) double TP3[2] = {};
    alignas(32) double BF0[3][3] = {};
    alignas(32) double TP4[2] = {};
    alignas(32) double TP5[2] = {};
    alignas(32) double TP6[2] = {};
    alignas(32) double TP7[2] = {};
    alignas(32) double TP8[2] = {};
    alignas(32) double TP9[2] = {};
    alignas(32) double TP10[2] = {};
    alignas(32) double TP11[2] = {};
    alignas(32) double TP12[2] = {};
    alignas(32) double TP13[2] = {};
    alignas(32) double TP14[2] = {};
    alignas(32) double TP15[2] = {};
    for (int iq = 0; iq < 6; ++iq)
    {
        // Quadrature loop body setup (num_points=6)
        // Unstructured varying computations for num_points=6
        double w6 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w6 += w[6][ic] * FE17_C0_Q6[0][iq][ic];
        double w5 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w5 += w[5][ic] * FE17_C0_Q6[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE17_C0_Q6[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE17_C0_Q6[0][iq][ic];
        alignas(32) double sv6[129];
        sv6[0] = (-2 + sp[61]) * (2 * w6);
        sv6[1] = sv6[0] + w5;
        sv6[2] = sv6[1] * (2 * sp[74]);
        sv6[3] = sv6[1] * (2 * sp[75]);
        sv6[4] = sv6[1] * (2 * sp[76]);
        sv6[5] = sv6[1] * (2 * sp[77]);
        sv6[6] = sp[99] * (2 * w6);
        sv6[7] = sp[100] * (2 * w6);
        sv6[8] = sp[89] * (2 * w6);
        sv6[9] = sp[90] * (2 * w6);
        sv6[10] = 2 * sp[80] * sv6[6];
        sv6[11] = 2 * sp[80] * sv6[7];
        sv6[12] = 2 * sp[80] * sv6[8];
        sv6[13] = 2 * sp[80] * sv6[9];
        sv6[14] = sv6[2] + sv6[10];
        sv6[15] = sv6[3] + sv6[11];
        sv6[16] = sv6[4] + sv6[12];
        sv6[17] = sv6[5] + sv6[13];
        sv6[18] = sv6[14] * sp[31];
        sv6[19] = sv6[15] * sp[31];
        sv6[20] = sv6[16] * sp[31];
        sv6[21] = sv6[17] * sp[31];
        sv6[22] = sv6[1] * (2 * sp[80]);
        sv6[23] = sv6[22] * (0.5 * sp[63]);
        sv6[24] = sv6[22] * (0.5 * sp[62]);
        sv6[25] = sv6[20] + sv6[23];
        sv6[26] = sv6[21] + sv6[24];
        sv6[27] = -1 * (0.5 * sp[67]) * (-1 * w4);
        sv6[28] = -1 * (0.5 * sp[66]) * (-1 * w4);
        sv6[29] = sv6[18] + sv6[27];
        sv6[30] = sv6[19] + sv6[28];
        sv6[31] = sv6[29] * sp[18];
        sv6[32] = sv6[29] * sp[20];
        sv6[33] = sv6[30] * sp[18];
        sv6[34] = sv6[30] * sp[20];
        sv6[35] = sv6[25] * sp[18];
        sv6[36] = sv6[25] * sp[20];
        sv6[37] = sv6[26] * sp[18];
        sv6[38] = sv6[26] * sp[20];
        sv6[39] = (1 + sp[45]) * sv6[14];
        sv6[40] = (1 + sp[45]) * sv6[15];
        sv6[41] = (1 + sp[45]) * sv6[16];
        sv6[42] = (1 + sp[45]) * sv6[17];
        sv6[43] = sv6[39] + sv6[24];
        sv6[44] = sv6[40] + sv6[23];
        sv6[45] = 0.5 * sp[66] * (-1 * w4);
        sv6[46] = 0.5 * sp[67] * (-1 * w4);
        sv6[47] = sv6[41] + sv6[45];
        sv6[48] = sv6[42] + sv6[46];
        sv6[49] = sv6[43] * sp[18];
        sv6[50] = sv6[43] * sp[20];
        sv6[51] = sv6[44] * sp[18];
        sv6[52] = sv6[44] * sp[20];
        sv6[53] = sv6[47] * sp[18];
        sv6[54] = sv6[47] * sp[20];
        sv6[55] = sv6[48] * sp[18];
        sv6[56] = sv6[48] * sp[20];
        sv6[57] = (1 + sp[16]) * sv6[14];
        sv6[58] = (1 + sp[16]) * sv6[15];
        sv6[59] = (1 + sp[16]) * sv6[16];
        sv6[60] = (1 + sp[16]) * sv6[17];
        sv6[61] = sv6[22] * (0.5 * sp[66]);
        sv6[62] = sv6[22] * (0.5 * sp[67]);
        sv6[63] = sv6[59] + sv6[61];
        sv6[64] = sv6[60] + sv6[62];
        sv6[65] = 0.5 * sp[62] * (-1 * w4);
        sv6[66] = 0.5 * sp[63] * (-1 * w4);
        sv6[67] = sv6[57] + sv6[65];
        sv6[68] = sv6[58] + sv6[66];
        sv6[69] = sv6[67] * sp[5];
        sv6[70] = sv6[67] * sp[3];
        sv6[71] = sv6[68] * sp[5];
        sv6[72] = sv6[68] * sp[3];
        sv6[73] = sv6[63] * sp[5];
        sv6[74] = sv6[63] * sp[3];
        sv6[75] = sv6[64] * sp[5];
        sv6[76] = sv6[64] * sp[3];
        sv6[77] = sv6[14] * sp[58];
        sv6[78] = sv6[15] * sp[58];
        sv6[79] = sv6[16] * sp[58];
        sv6[80] = sv6[17] * sp[58];
        sv6[81] = sv6[77] + sv6[62];
        sv6[82] = sv6[78] + sv6[61];
        sv6[83] = -1 * (0.5 * sp[63]) * (-1 * w4);
        sv6[84] = -1 * (0.5 * sp[62]) * (-1 * w4);
        sv6[85] = sv6[79] + sv6[83];
        sv6[86] = sv6[80] + sv6[84];
        sv6[87] = sv6[81] * sp[5];
        sv6[88] = sv6[81] * sp[3];
        sv6[89] = sv6[82] * sp[5];
        sv6[90] = sv6[82] * sp[3];
        sv6[91] = sv6[85] * sp[5];
        sv6[92] = sv6[85] * sp[3];
        sv6[93] = sv6[86] * sp[5];
        sv6[94] = sv6[86] * sp[3];
        sv6[95] = sv6[31] + sv6[69];
        sv6[96] = sv6[70] + sv6[32];
        sv6[97] = sv6[49] + sv6[87];
        sv6[98] = sv6[88] + sv6[50];
        sv6[99] = sv6[33] + sv6[71];
        sv6[100] = sv6[72] + sv6[34];
        sv6[101] = sv6[51] + sv6[89];
        sv6[102] = sv6[90] + sv6[52];
        sv6[103] = sv6[35] + sv6[73];
        sv6[104] = sv6[74] + sv6[36];
        sv6[105] = sv6[53] + sv6[91];
        sv6[106] = sv6[92] + sv6[54];
        sv6[107] = sv6[37] + sv6[75];
        sv6[108] = sv6[76] + sv6[38];
        sv6[109] = sv6[55] + sv6[93];
        sv6[110] = sv6[94] + sv6[56];
        sv6[111] = 1.0 / w[7][0] * w3;
        sv6[112] = sv6[95] * sp[101];
        sv6[113] = sv6[96] * sp[101];
        sv6[114] = sv6[97] * sp[101];
        sv6[115] = sv6[98] * sp[101];
        sv6[116] = sv6[99] * sp[101];
        sv6[117] = sv6[100] * sp[101];
        sv6[118] = sv6[101] * sp[101];
        sv6[119] = sv6[102] * sp[101];
        sv6[120] = sv6[103] * sp[101];
        sv6[121] = sv6[104] * sp[101];
        sv6[122] = sv6[105] * sp[101];
        sv6[123] = sv6[106] * sp[101];
        sv6[124] = sv6[107] * sp[101];
        sv6[125] = sv6[108] * sp[101];
        sv6[126] = sv6[109] * sp[101];
        sv6[127] = sv6[110] * sp[101];
        sv6[128] = sv6[111] * sp[101];
        const double fw0 = sv6[121] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP0[j] += fw0 * FE17_C0_D01_Q6[0][0][j];
        const double fw1 = sv6[125] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP1[j] += fw1 * FE17_C0_D01_Q6[0][0][j];
        const double fw2 = sv6[117] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP2[j] += fw2 * FE17_C0_D01_Q6[0][0][j];
        const double fw3 = sv6[113] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP3[j] += fw3 * FE17_C0_D01_Q6[0][0][j];
        const double fw4 = sv6[128] * weights6[iq];
        alignas(32) double TF0[3];
        for (int i = 0; i < 3; ++i)
            TF0[i] = fw4 * FE17_C0_Q6[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF0[i][j] += TF0[i] * FE17_C0_Q6[0][iq][j];
        const double fw5 = sv6[120] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP4[j] += fw5 * FE17_C0_D01_Q6[0][0][j];
        const double fw6 = sv6[124] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP5[j] += fw6 * FE17_C0_D01_Q6[0][0][j];
        const double fw7 = sv6[116] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP6[j] += fw7 * FE17_C0_D01_Q6[0][0][j];
        const double fw8 = sv6[112] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP7[j] += fw8 * FE17_C0_D01_Q6[0][0][j];
        const double fw9 = sv6[123] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP8[j] += fw9 * FE17_C0_D01_Q6[0][0][j];
        const double fw10 = sv6[127] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP9[j] += fw10 * FE17_C0_D01_Q6[0][0][j];
        const double fw11 = sv6[119] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP10[j] += fw11 * FE17_C0_D01_Q6[0][0][j];
        const double fw12 = sv6[115] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP11[j] += fw12 * FE17_C0_D01_Q6[0][0][j];
        const double fw13 = sv6[122] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP12[j] += fw13 * FE17_C0_D01_Q6[0][0][j];
        const double fw14 = sv6[126] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP13[j] += fw14 * FE17_C0_D01_Q6[0][0][j];
        const double fw15 = sv6[118] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP14[j] += fw15 * FE17_C0_D01_Q6[0][0][j];
        const double fw16 = sv6[114] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP15[j] += fw16 * FE17_C0_D01_Q6[0][0][j];
    }
    std::fill(&A[0], &A[60], 0.0);
    A[60] = 0.0833333333333333 * (1e-12 * sp[101]);
    A[61] = 0.04166666666666667 * (1e-12 * sp[101]);
    A[62] = 0.04166666666666666 * (1e-12 * sp[101]);
    std::fill(&A[63], &A[69], 0.0);
    A[69] = 0.04166666666666667 * (1e-12 * sp[101]);
    A[70] = 0.08333333333333331 * (1e-12 * sp[101]);
    A[71] = 0.04166666666666667 * (1e-12 * sp[101]);
    std::fill(&A[72], &A[78], 0.0);
    A[78] = 0.04166666666666666 * (1e-12 * sp[101]);
    A[79] = 0.04166666666666667 * (1e-12 * sp[101]);
    A[80] = 0.08333333333333327 * (1e-12 * sp[101]);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 3, 5 };
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * i + j] += FE17_C0_D01_Q6[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * i + DM0[j]] += FE17_C0_D01_Q6[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * i + (j + 3)] += FE17_C0_D01_Q6[0][0][i] * TP2[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * i + DM1[j]] += FE17_C0_D01_Q6[0][0][i] * TP3[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[9 * i + j] += BF0[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM0[i] + j] += FE17_C0_D01_Q6[0][0][i] * TP4[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM0[i] + DM0[j]] += FE17_C0_D01_Q6[0][0][i] * TP5[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM0[i] + (j + 3)] += FE17_C0_D01_Q6[0][0][i] * TP6[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM0[i] + DM1[j]] += FE17_C0_D01_Q6[0][0][i] * TP7[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * (i + 3) + j] += FE17_C0_D01_Q6[0][0][i] * TP8[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * (i + 3) + DM0[j]] += FE17_C0_D01_Q6[0][0][i] * TP9[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * (i + 3) + (j + 3)] += FE17_C0_D01_Q6[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * (i + 3) + DM1[j]] += FE17_C0_D01_Q6[0][0][i] * TP11[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[9 * (i + 3) + (j + 3)] += BF0[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM1[i] + j] += FE17_C0_D01_Q6[0][0][i] * TP12[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM1[i] + DM0[j]] += FE17_C0_D01_Q6[0][0][i] * TP13[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM1[i] + (j + 3)] += FE17_C0_D01_Q6[0][0][i] * TP14[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM1[i] + DM1[j]] += FE17_C0_D01_Q6[0][0][i] * TP15[j];
  }

};


class elastic2dp1p1_cell_integral_1_2: public ufc::cell_integral
{
public:

  elastic2dp1p1_cell_integral_1_2() : ufc::cell_integral()
  {

  }

  ~elastic2dp1p1_cell_integral_1_2() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 3
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 3
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           3
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights6[6] = { 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE17_C0_D01_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE17_C0_Q6[1][6][3] =
        { { { 0.109039009072877, 0.659027622374092, 0.231933368553031 },
            { 0.231933368553031, 0.659027622374092, 0.109039009072877 },
            { 0.109039009072877, 0.231933368553031, 0.6590276223740918 },
            { 0.659027622374092, 0.231933368553031, 0.109039009072877 },
            { 0.231933368553031, 0.109039009072877, 0.6590276223740918 },
            { 0.659027622374092, 0.109039009072877, 0.231933368553031 } } };
    // Unstructured piecewise computations
    double w2_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c0 += w[2][ic] * FE17_C0_D01_Q6[0][0][ic];
    const double J_c3 = coordinate_dofs[1] * FE17_C0_D01_Q6[0][0][0] + coordinate_dofs[5] * FE17_C0_D01_Q6[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE17_C0_D01_Q6[0][0][0] + coordinate_dofs[2] * FE17_C0_D01_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE17_C0_D01_Q6[0][0][0] + coordinate_dofs[4] * FE17_C0_D01_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE17_C0_D01_Q6[0][0][0] + coordinate_dofs[3] * FE17_C0_D01_Q6[0][0][1];
    const double w2_d1_c0 = w[2][0] * FE17_C0_D01_Q6[0][0][0] + w[2][2] * FE17_C0_D01_Q6[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE17_C0_D01_Q6[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE17_C0_D01_Q6[0][0][0] + w[0][2] * FE17_C0_D01_Q6[0][0][1];
    double w1_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c0 += w[1][ic] * FE17_C0_D01_Q6[0][0][ic];
    const double w1_d1_c0 = w[1][0] * FE17_C0_D01_Q6[0][0][0] + w[1][2] * FE17_C0_D01_Q6[0][0][1];
    const double w2_d1_c1 = w[2][3] * FE17_C0_D01_Q6[0][0][0] + w[2][5] * FE17_C0_D01_Q6[0][0][1];
    double w2_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c1 += w[2][ic + 3] * FE17_C0_D01_Q6[0][0][ic];
    const double w0_d1_c1 = w[0][3] * FE17_C0_D01_Q6[0][0][0] + w[0][5] * FE17_C0_D01_Q6[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 3] * FE17_C0_D01_Q6[0][0][ic];
    const double w1_d1_c1 = w[1][3] * FE17_C0_D01_Q6[0][0][0] + w[1][5] * FE17_C0_D01_Q6[0][0][1];
    double w1_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c1 += w[1][ic + 3] * FE17_C0_D01_Q6[0][0][ic];
    alignas(32) double sp[102];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c3 / sp[2];
    sp[4] = w2_d0_c0 * sp[3];
    sp[5] = -1 * J_c2 / sp[2];
    sp[6] = w2_d1_c0 * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = w0_d0_c0 * sp[3];
    sp[9] = w0_d1_c0 * sp[5];
    sp[10] = sp[8] + sp[9];
    sp[11] = w1_d0_c0 * sp[3];
    sp[12] = w1_d1_c0 * sp[5];
    sp[13] = sp[11] + sp[12];
    sp[14] = sp[10] + sp[13];
    sp[15] = sp[14] * w[7][0];
    sp[16] = sp[7] + 0.5 * sp[15];
    sp[17] = (1 + sp[16]) * (1 + sp[16]);
    sp[18] = J_c0 / sp[2];
    sp[19] = w2_d1_c0 * sp[18];
    sp[20] = -1 * J_c1 / sp[2];
    sp[21] = w2_d0_c0 * sp[20];
    sp[22] = sp[19] + sp[21];
    sp[23] = w0_d1_c0 * sp[18];
    sp[24] = w0_d0_c0 * sp[20];
    sp[25] = sp[23] + sp[24];
    sp[26] = w1_d1_c0 * sp[18];
    sp[27] = w1_d0_c0 * sp[20];
    sp[28] = sp[26] + sp[27];
    sp[29] = sp[25] + sp[28];
    sp[30] = sp[29] * w[7][0];
    sp[31] = sp[22] + 0.5 * sp[30];
    sp[32] = sp[31] * sp[31];
    sp[33] = sp[17] + sp[32];
    sp[34] = w2_d1_c1 * sp[18];
    sp[35] = w2_d0_c1 * sp[20];
    sp[36] = sp[34] + sp[35];
    sp[37] = w0_d1_c1 * sp[18];
    sp[38] = w0_d0_c1 * sp[20];
    sp[39] = sp[37] + sp[38];
    sp[40] = w1_d1_c1 * sp[18];
    sp[41] = w1_d0_c1 * sp[20];
    sp[42] = sp[40] + sp[41];
    sp[43] = sp[39] + sp[42];
    sp[44] = sp[43] * w[7][0];
    sp[45] = sp[36] + 0.5 * sp[44];
    sp[46] = (1 + sp[45]) * (1 + sp[45]);
    sp[47] = w2_d0_c1 * sp[3];
    sp[48] = w2_d1_c1 * sp[5];
    sp[49] = sp[47] + sp[48];
    sp[50] = w0_d0_c1 * sp[3];
    sp[51] = w0_d1_c1 * sp[5];
    sp[52] = sp[50] + sp[51];
    sp[53] = w1_d0_c1 * sp[3];
    sp[54] = w1_d1_c1 * sp[5];
    sp[55] = sp[53] + sp[54];
    sp[56] = sp[52] + sp[55];
    sp[57] = sp[56] * w[7][0];
    sp[58] = sp[49] + 0.5 * sp[57];
    sp[59] = sp[58] * sp[58];
    sp[60] = sp[46] + sp[59];
    sp[61] = sp[33] + sp[60];
    sp[62] = sp[18] * w[7][0];
    sp[63] = sp[20] * w[7][0];
    sp[64] = (1 + sp[16]) * (0.5 * sp[62]);
    sp[65] = (1 + sp[16]) * (0.5 * sp[63]);
    sp[66] = sp[3] * w[7][0];
    sp[67] = sp[5] * w[7][0];
    sp[68] = (1 + sp[45]) * (0.5 * sp[66]);
    sp[69] = (1 + sp[45]) * (0.5 * sp[67]);
    sp[70] = sp[58] * (0.5 * sp[63]);
    sp[71] = sp[58] * (0.5 * sp[62]);
    sp[72] = sp[31] * (0.5 * sp[67]);
    sp[73] = sp[31] * (0.5 * sp[66]);
    sp[74] = -1 * sp[72] + sp[64];
    sp[75] = -1 * sp[73] + sp[65];
    sp[76] = -1 * sp[70] + sp[68];
    sp[77] = -1 * sp[71] + sp[69];
    sp[78] = (1 + sp[45]) * (1 + sp[16]);
    sp[79] = sp[31] * sp[58];
    sp[80] = sp[78] + -1 * sp[79];
    sp[81] = sp[31] * (0.5 * sp[63]);
    sp[82] = sp[31] * (0.5 * sp[62]);
    sp[83] = sp[81] + sp[81];
    sp[84] = sp[82] + sp[82];
    sp[85] = (1 + sp[16]) * (0.5 * sp[66]);
    sp[86] = (1 + sp[16]) * (0.5 * sp[67]);
    sp[87] = sp[85] + sp[85];
    sp[88] = sp[86] + sp[86];
    sp[89] = sp[87] + sp[83];
    sp[90] = sp[84] + sp[88];
    sp[91] = (1 + sp[45]) * (0.5 * sp[62]);
    sp[92] = (1 + sp[45]) * (0.5 * sp[63]);
    sp[93] = sp[91] + sp[91];
    sp[94] = sp[92] + sp[92];
    sp[95] = sp[58] * (0.5 * sp[67]);
    sp[96] = sp[58] * (0.5 * sp[66]);
    sp[97] = sp[95] + sp[95];
    sp[98] = sp[96] + sp[96];
    sp[99] = sp[93] + sp[97];
    sp[100] = sp[98] + sp[94];
    sp[101] = std::abs(sp[2]);
    alignas(32) double TP0[2] = {};
    alignas(32) double TP1[2] = {};
    alignas(32) double TP2[2] = {};
    alignas(32) double TP3[2] = {};
    alignas(32) double BF0[3][3] = {};
    alignas(32) double TP4[2] = {};
    alignas(32) double TP5[2] = {};
    alignas(32) double TP6[2] = {};
    alignas(32) double TP7[2] = {};
    alignas(32) double TP8[2] = {};
    alignas(32) double TP9[2] = {};
    alignas(32) double TP10[2] = {};
    alignas(32) double TP11[2] = {};
    alignas(32) double TP12[2] = {};
    alignas(32) double TP13[2] = {};
    alignas(32) double TP14[2] = {};
    alignas(32) double TP15[2] = {};
    for (int iq = 0; iq < 6; ++iq)
    {
        // Quadrature loop body setup (num_points=6)
        // Unstructured varying computations for num_points=6
        double w6 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w6 += w[6][ic] * FE17_C0_Q6[0][iq][ic];
        double w5 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w5 += w[5][ic] * FE17_C0_Q6[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE17_C0_Q6[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE17_C0_Q6[0][iq][ic];
        alignas(32) double sv6[129];
        sv6[0] = (-2 + sp[61]) * (2 * w6);
        sv6[1] = sv6[0] + w5;
        sv6[2] = sv6[1] * (2 * sp[74]);
        sv6[3] = sv6[1] * (2 * sp[75]);
        sv6[4] = sv6[1] * (2 * sp[76]);
        sv6[5] = sv6[1] * (2 * sp[77]);
        sv6[6] = sp[99] * (2 * w6);
        sv6[7] = sp[100] * (2 * w6);
        sv6[8] = sp[89] * (2 * w6);
        sv6[9] = sp[90] * (2 * w6);
        sv6[10] = 2 * sp[80] * sv6[6];
        sv6[11] = 2 * sp[80] * sv6[7];
        sv6[12] = 2 * sp[80] * sv6[8];
        sv6[13] = 2 * sp[80] * sv6[9];
        sv6[14] = sv6[2] + sv6[10];
        sv6[15] = sv6[3] + sv6[11];
        sv6[16] = sv6[4] + sv6[12];
        sv6[17] = sv6[5] + sv6[13];
        sv6[18] = sv6[14] * sp[31];
        sv6[19] = sv6[15] * sp[31];
        sv6[20] = sv6[16] * sp[31];
        sv6[21] = sv6[17] * sp[31];
        sv6[22] = sv6[1] * (2 * sp[80]);
        sv6[23] = sv6[22] * (0.5 * sp[63]);
        sv6[24] = sv6[22] * (0.5 * sp[62]);
        sv6[25] = sv6[20] + sv6[23];
        sv6[26] = sv6[21] + sv6[24];
        sv6[27] = -1 * (0.5 * sp[67]) * (-1 * w4);
        sv6[28] = -1 * (0.5 * sp[66]) * (-1 * w4);
        sv6[29] = sv6[18] + sv6[27];
        sv6[30] = sv6[19] + sv6[28];
        sv6[31] = sv6[29] * sp[18];
        sv6[32] = sv6[29] * sp[20];
        sv6[33] = sv6[30] * sp[18];
        sv6[34] = sv6[30] * sp[20];
        sv6[35] = sv6[25] * sp[18];
        sv6[36] = sv6[25] * sp[20];
        sv6[37] = sv6[26] * sp[18];
        sv6[38] = sv6[26] * sp[20];
        sv6[39] = (1 + sp[45]) * sv6[14];
        sv6[40] = (1 + sp[45]) * sv6[15];
        sv6[41] = (1 + sp[45]) * sv6[16];
        sv6[42] = (1 + sp[45]) * sv6[17];
        sv6[43] = sv6[39] + sv6[24];
        sv6[44] = sv6[40] + sv6[23];
        sv6[45] = 0.5 * sp[66] * (-1 * w4);
        sv6[46] = 0.5 * sp[67] * (-1 * w4);
        sv6[47] = sv6[41] + sv6[45];
        sv6[48] = sv6[42] + sv6[46];
        sv6[49] = sv6[43] * sp[18];
        sv6[50] = sv6[43] * sp[20];
        sv6[51] = sv6[44] * sp[18];
        sv6[52] = sv6[44] * sp[20];
        sv6[53] = sv6[47] * sp[18];
        sv6[54] = sv6[47] * sp[20];
        sv6[55] = sv6[48] * sp[18];
        sv6[56] = sv6[48] * sp[20];
        sv6[57] = (1 + sp[16]) * sv6[14];
        sv6[58] = (1 + sp[16]) * sv6[15];
        sv6[59] = (1 + sp[16]) * sv6[16];
        sv6[60] = (1 + sp[16]) * sv6[17];
        sv6[61] = sv6[22] * (0.5 * sp[66]);
        sv6[62] = sv6[22] * (0.5 * sp[67]);
        sv6[63] = sv6[59] + sv6[61];
        sv6[64] = sv6[60] + sv6[62];
        sv6[65] = 0.5 * sp[62] * (-1 * w4);
        sv6[66] = 0.5 * sp[63] * (-1 * w4);
        sv6[67] = sv6[57] + sv6[65];
        sv6[68] = sv6[58] + sv6[66];
        sv6[69] = sv6[67] * sp[5];
        sv6[70] = sv6[67] * sp[3];
        sv6[71] = sv6[68] * sp[5];
        sv6[72] = sv6[68] * sp[3];
        sv6[73] = sv6[63] * sp[5];
        sv6[74] = sv6[63] * sp[3];
        sv6[75] = sv6[64] * sp[5];
        sv6[76] = sv6[64] * sp[3];
        sv6[77] = sv6[14] * sp[58];
        sv6[78] = sv6[15] * sp[58];
        sv6[79] = sv6[16] * sp[58];
        sv6[80] = sv6[17] * sp[58];
        sv6[81] = sv6[77] + sv6[62];
        sv6[82] = sv6[78] + sv6[61];
        sv6[83] = -1 * (0.5 * sp[63]) * (-1 * w4);
        sv6[84] = -1 * (0.5 * sp[62]) * (-1 * w4);
        sv6[85] = sv6[79] + sv6[83];
        sv6[86] = sv6[80] + sv6[84];
        sv6[87] = sv6[81] * sp[5];
        sv6[88] = sv6[81] * sp[3];
        sv6[89] = sv6[82] * sp[5];
        sv6[90] = sv6[82] * sp[3];
        sv6[91] = sv6[85] * sp[5];
        sv6[92] = sv6[85] * sp[3];
        sv6[93] = sv6[86] * sp[5];
        sv6[94] = sv6[86] * sp[3];
        sv6[95] = sv6[31] + sv6[69];
        sv6[96] = sv6[70] + sv6[32];
        sv6[97] = sv6[49] + sv6[87];
        sv6[98] = sv6[88] + sv6[50];
        sv6[99] = sv6[33] + sv6[71];
        sv6[100] = sv6[72] + sv6[34];
        sv6[101] = sv6[51] + sv6[89];
        sv6[102] = sv6[90] + sv6[52];
        sv6[103] = sv6[35] + sv6[73];
        sv6[104] = sv6[74] + sv6[36];
        sv6[105] = sv6[53] + sv6[91];
        sv6[106] = sv6[92] + sv6[54];
        sv6[107] = sv6[37] + sv6[75];
        sv6[108] = sv6[76] + sv6[38];
        sv6[109] = sv6[55] + sv6[93];
        sv6[110] = sv6[94] + sv6[56];
        sv6[111] = 1.0 / w[7][0] * w3;
        sv6[112] = sv6[95] * sp[101];
        sv6[113] = sv6[96] * sp[101];
        sv6[114] = sv6[97] * sp[101];
        sv6[115] = sv6[98] * sp[101];
        sv6[116] = sv6[99] * sp[101];
        sv6[117] = sv6[100] * sp[101];
        sv6[118] = sv6[101] * sp[101];
        sv6[119] = sv6[102] * sp[101];
        sv6[120] = sv6[103] * sp[101];
        sv6[121] = sv6[104] * sp[101];
        sv6[122] = sv6[105] * sp[101];
        sv6[123] = sv6[106] * sp[101];
        sv6[124] = sv6[107] * sp[101];
        sv6[125] = sv6[108] * sp[101];
        sv6[126] = sv6[109] * sp[101];
        sv6[127] = sv6[110] * sp[101];
        sv6[128] = sv6[111] * sp[101];
        const double fw0 = sv6[121] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP0[j] += fw0 * FE17_C0_D01_Q6[0][0][j];
        const double fw1 = sv6[125] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP1[j] += fw1 * FE17_C0_D01_Q6[0][0][j];
        const double fw2 = sv6[117] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP2[j] += fw2 * FE17_C0_D01_Q6[0][0][j];
        const double fw3 = sv6[113] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP3[j] += fw3 * FE17_C0_D01_Q6[0][0][j];
        const double fw4 = sv6[128] * weights6[iq];
        alignas(32) double TF0[3];
        for (int i = 0; i < 3; ++i)
            TF0[i] = fw4 * FE17_C0_Q6[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF0[i][j] += TF0[i] * FE17_C0_Q6[0][iq][j];
        const double fw5 = sv6[120] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP4[j] += fw5 * FE17_C0_D01_Q6[0][0][j];
        const double fw6 = sv6[124] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP5[j] += fw6 * FE17_C0_D01_Q6[0][0][j];
        const double fw7 = sv6[116] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP6[j] += fw7 * FE17_C0_D01_Q6[0][0][j];
        const double fw8 = sv6[112] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP7[j] += fw8 * FE17_C0_D01_Q6[0][0][j];
        const double fw9 = sv6[123] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP8[j] += fw9 * FE17_C0_D01_Q6[0][0][j];
        const double fw10 = sv6[127] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP9[j] += fw10 * FE17_C0_D01_Q6[0][0][j];
        const double fw11 = sv6[119] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP10[j] += fw11 * FE17_C0_D01_Q6[0][0][j];
        const double fw12 = sv6[115] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP11[j] += fw12 * FE17_C0_D01_Q6[0][0][j];
        const double fw13 = sv6[122] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP12[j] += fw13 * FE17_C0_D01_Q6[0][0][j];
        const double fw14 = sv6[126] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP13[j] += fw14 * FE17_C0_D01_Q6[0][0][j];
        const double fw15 = sv6[118] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP14[j] += fw15 * FE17_C0_D01_Q6[0][0][j];
        const double fw16 = sv6[114] * weights6[iq];
        for (int j = 0; j < 2; ++j)
            TP15[j] += fw16 * FE17_C0_D01_Q6[0][0][j];
    }
    std::fill(&A[0], &A[60], 0.0);
    A[60] = 0.0833333333333333 * (1e-12 * sp[101]);
    A[61] = 0.04166666666666667 * (1e-12 * sp[101]);
    A[62] = 0.04166666666666666 * (1e-12 * sp[101]);
    std::fill(&A[63], &A[69], 0.0);
    A[69] = 0.04166666666666667 * (1e-12 * sp[101]);
    A[70] = 0.08333333333333331 * (1e-12 * sp[101]);
    A[71] = 0.04166666666666667 * (1e-12 * sp[101]);
    std::fill(&A[72], &A[78], 0.0);
    A[78] = 0.04166666666666666 * (1e-12 * sp[101]);
    A[79] = 0.04166666666666667 * (1e-12 * sp[101]);
    A[80] = 0.08333333333333327 * (1e-12 * sp[101]);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 3, 5 };
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * i + j] += FE17_C0_D01_Q6[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * i + DM0[j]] += FE17_C0_D01_Q6[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * i + (j + 3)] += FE17_C0_D01_Q6[0][0][i] * TP2[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * i + DM1[j]] += FE17_C0_D01_Q6[0][0][i] * TP3[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[9 * i + j] += BF0[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM0[i] + j] += FE17_C0_D01_Q6[0][0][i] * TP4[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM0[i] + DM0[j]] += FE17_C0_D01_Q6[0][0][i] * TP5[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM0[i] + (j + 3)] += FE17_C0_D01_Q6[0][0][i] * TP6[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM0[i] + DM1[j]] += FE17_C0_D01_Q6[0][0][i] * TP7[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * (i + 3) + j] += FE17_C0_D01_Q6[0][0][i] * TP8[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * (i + 3) + DM0[j]] += FE17_C0_D01_Q6[0][0][i] * TP9[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * (i + 3) + (j + 3)] += FE17_C0_D01_Q6[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * (i + 3) + DM1[j]] += FE17_C0_D01_Q6[0][0][i] * TP11[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[9 * (i + 3) + (j + 3)] += BF0[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM1[i] + j] += FE17_C0_D01_Q6[0][0][i] * TP12[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM1[i] + DM0[j]] += FE17_C0_D01_Q6[0][0][i] * TP13[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM1[i] + (j + 3)] += FE17_C0_D01_Q6[0][0][i] * TP14[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[9 * DM1[i] + DM1[j]] += FE17_C0_D01_Q6[0][0][i] * TP15[j];
  }

};


class elastic2dp1p1_form_0: public ufc::form
{
public:

  elastic2dp1p1_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~elastic2dp1p1_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "770e11c2d3007532764d3067101aab322797b781855db3a560a5e538bd55a94bc0b20c07a6a99aee74647b8482b0fd4d3b7e99f98526f808f557d02eecbf664f";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 8;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7});
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new elastic2dp1p1_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new elastic2dp1p1_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return nullptr;
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic2dp1p1_finite_element_2();
        break;
      }
    case 1:
      {
        return new elastic2dp1p1_finite_element_2();
        break;
      }
    case 2:
      {
        return new elastic2dp1p1_finite_element_1();
        break;
      }
    case 3:
      {
        return new elastic2dp1p1_finite_element_1();
        break;
      }
    case 4:
      {
        return new elastic2dp1p1_finite_element_4();
        break;
      }
    case 5:
      {
        return new elastic2dp1p1_finite_element_4();
        break;
      }
    case 6:
      {
        return new elastic2dp1p1_finite_element_4();
        break;
      }
    case 7:
      {
        return new elastic2dp1p1_finite_element_4();
        break;
      }
    case 8:
      {
        return new elastic2dp1p1_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic2dp1p1_dofmap_2();
        break;
      }
    case 1:
      {
        return new elastic2dp1p1_dofmap_2();
        break;
      }
    case 2:
      {
        return new elastic2dp1p1_dofmap_1();
        break;
      }
    case 3:
      {
        return new elastic2dp1p1_dofmap_1();
        break;
      }
    case 4:
      {
        return new elastic2dp1p1_dofmap_4();
        break;
      }
    case 5:
      {
        return new elastic2dp1p1_dofmap_4();
        break;
      }
    case 6:
      {
        return new elastic2dp1p1_dofmap_4();
        break;
      }
    case 7:
      {
        return new elastic2dp1p1_dofmap_4();
        break;
      }
    case 8:
      {
        return new elastic2dp1p1_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 3;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 1:
      {
        return new elastic2dp1p1_cell_integral_0_1();
        break;
      }
    case 2:
      {
        return new elastic2dp1p1_cell_integral_0_2();
        break;
      }
    }
    
    return 0;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return 0;
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return 0;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return 0;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return 0;
  }

};


class elastic2dp1p1_form_1: public ufc::form
{
public:

  elastic2dp1p1_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~elastic2dp1p1_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "a034fa6751a49a656a7962fa44efce99f90723bf3e5bd42ebf2341ebe330b4b18cf9239daa81145878cc893008c5ae1197c593fd2f9f706103400c7bbdf565c5";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 8;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7});
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new elastic2dp1p1_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new elastic2dp1p1_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return nullptr;
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic2dp1p1_finite_element_2();
        break;
      }
    case 1:
      {
        return new elastic2dp1p1_finite_element_2();
        break;
      }
    case 2:
      {
        return new elastic2dp1p1_finite_element_2();
        break;
      }
    case 3:
      {
        return new elastic2dp1p1_finite_element_1();
        break;
      }
    case 4:
      {
        return new elastic2dp1p1_finite_element_1();
        break;
      }
    case 5:
      {
        return new elastic2dp1p1_finite_element_4();
        break;
      }
    case 6:
      {
        return new elastic2dp1p1_finite_element_4();
        break;
      }
    case 7:
      {
        return new elastic2dp1p1_finite_element_4();
        break;
      }
    case 8:
      {
        return new elastic2dp1p1_finite_element_4();
        break;
      }
    case 9:
      {
        return new elastic2dp1p1_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic2dp1p1_dofmap_2();
        break;
      }
    case 1:
      {
        return new elastic2dp1p1_dofmap_2();
        break;
      }
    case 2:
      {
        return new elastic2dp1p1_dofmap_2();
        break;
      }
    case 3:
      {
        return new elastic2dp1p1_dofmap_1();
        break;
      }
    case 4:
      {
        return new elastic2dp1p1_dofmap_1();
        break;
      }
    case 5:
      {
        return new elastic2dp1p1_dofmap_4();
        break;
      }
    case 6:
      {
        return new elastic2dp1p1_dofmap_4();
        break;
      }
    case 7:
      {
        return new elastic2dp1p1_dofmap_4();
        break;
      }
    case 8:
      {
        return new elastic2dp1p1_dofmap_4();
        break;
      }
    case 9:
      {
        return new elastic2dp1p1_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 3;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 1:
      {
        return new elastic2dp1p1_cell_integral_1_1();
        break;
      }
    case 2:
      {
        return new elastic2dp1p1_cell_integral_1_2();
        break;
      }
    }
    
    return 0;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return 0;
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return 0;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return 0;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace Elastic2DP1P1
{

class CoefficientSpace_beta1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_beta1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_beta1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_beta2: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_beta2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_beta2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_dt: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_dt(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_dt(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_p_s: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_p_s(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_p_s(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_rho_s: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_rho_s(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_rho_s(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_v0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_v0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_v0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_v_p: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_v_p(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_v_p(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_F_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_F_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_v_p Form_F_FunctionSpace_1;

typedef CoefficientSpace_v0 Form_F_FunctionSpace_2;

typedef CoefficientSpace_u0 Form_F_FunctionSpace_3;

typedef CoefficientSpace_rho_s Form_F_FunctionSpace_4;

typedef CoefficientSpace_p_s Form_F_FunctionSpace_5;

typedef CoefficientSpace_beta1 Form_F_FunctionSpace_6;

typedef CoefficientSpace_beta2 Form_F_FunctionSpace_7;

typedef CoefficientSpace_dt Form_F_FunctionSpace_8;

class Form_F: public dolfin::Form
{
public:

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 8), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const elastic2dp1p1_form_0>();
  }

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> rho_s, std::shared_ptr<const dolfin::GenericFunction> p_s, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> beta2, std::shared_ptr<const dolfin::GenericFunction> dt):
    dolfin::Form(1, 8), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    _function_spaces[0] = V0;

    this->v_p = v_p;
    this->v0 = v0;
    this->u0 = u0;
    this->rho_s = rho_s;
    this->p_s = p_s;
    this->beta1 = beta1;
    this->beta2 = beta2;
    this->dt = dt;

    _ufc_form = std::make_shared<const elastic2dp1p1_form_0>();
  }

  // Destructor
  ~Form_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "u0")
      return 2;
    else if (name == "rho_s")
      return 3;
    else if (name == "p_s")
      return 4;
    else if (name == "beta1")
      return 5;
    else if (name == "beta2")
      return 6;
    else if (name == "dt")
      return 7;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p";
    case 1:
      return "v0";
    case 2:
      return "u0";
    case 3:
      return "rho_s";
    case 4:
      return "p_s";
    case 5:
      return "beta1";
    case 6:
      return "beta2";
    case 7:
      return "dt";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_v_p;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_v0;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_u0;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_rho_s;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_p_s;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_beta1;
  typedef Form_F_FunctionSpace_7 CoefficientSpace_beta2;
  typedef Form_F_FunctionSpace_8 CoefficientSpace_dt;

  // Coefficients
  dolfin::CoefficientAssigner v_p;
  dolfin::CoefficientAssigner v0;
  dolfin::CoefficientAssigner u0;
  dolfin::CoefficientAssigner rho_s;
  dolfin::CoefficientAssigner p_s;
  dolfin::CoefficientAssigner beta1;
  dolfin::CoefficientAssigner beta2;
  dolfin::CoefficientAssigner dt;
};

class MultiMeshForm_F: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> rho_s, std::shared_ptr<const dolfin::GenericFunction> p_s, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> beta2, std::shared_ptr<const dolfin::GenericFunction> dt):
    dolfin::MultiMeshForm(V0), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->v_p = v_p;
    this->v0 = v0;
    this->u0 = u0;
    this->rho_s = rho_s;
    this->p_s = p_s;
    this->beta1 = beta1;
    this->beta2 = beta2;
    this->dt = dt;

  }

  // Destructor
  ~MultiMeshForm_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "u0")
      return 2;
    else if (name == "rho_s")
      return 3;
    else if (name == "p_s")
      return 4;
    else if (name == "beta1")
      return 5;
    else if (name == "beta2")
      return 6;
    else if (name == "dt")
      return 7;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p";
    case 1:
      return "v0";
    case 2:
      return "u0";
    case 3:
      return "rho_s";
    case 4:
      return "p_s";
    case 5:
      return "beta1";
    case 6:
      return "beta2";
    case 7:
      return "dt";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_v_p;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_v0;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_u0;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_rho_s;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_p_s;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_beta1;
  typedef Form_F_FunctionSpace_7 CoefficientSpace_beta2;
  typedef Form_F_FunctionSpace_8 CoefficientSpace_dt;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner v_p;
  dolfin::MultiMeshCoefficientAssigner v0;
  dolfin::MultiMeshCoefficientAssigner u0;
  dolfin::MultiMeshCoefficientAssigner rho_s;
  dolfin::MultiMeshCoefficientAssigner p_s;
  dolfin::MultiMeshCoefficientAssigner beta1;
  dolfin::MultiMeshCoefficientAssigner beta2;
  dolfin::MultiMeshCoefficientAssigner dt;
};

class Form_J_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic2dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic2dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_J_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_v_p Form_J_FunctionSpace_2;

typedef CoefficientSpace_v0 Form_J_FunctionSpace_3;

typedef CoefficientSpace_u0 Form_J_FunctionSpace_4;

typedef CoefficientSpace_rho_s Form_J_FunctionSpace_5;

typedef CoefficientSpace_p_s Form_J_FunctionSpace_6;

typedef CoefficientSpace_beta1 Form_J_FunctionSpace_7;

typedef CoefficientSpace_beta2 Form_J_FunctionSpace_8;

typedef CoefficientSpace_dt Form_J_FunctionSpace_9;

class Form_J: public dolfin::Form
{
public:

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 8), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const elastic2dp1p1_form_1>();
  }

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> rho_s, std::shared_ptr<const dolfin::GenericFunction> p_s, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> beta2, std::shared_ptr<const dolfin::GenericFunction> dt):
    dolfin::Form(2, 8), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->v_p = v_p;
    this->v0 = v0;
    this->u0 = u0;
    this->rho_s = rho_s;
    this->p_s = p_s;
    this->beta1 = beta1;
    this->beta2 = beta2;
    this->dt = dt;

    _ufc_form = std::make_shared<const elastic2dp1p1_form_1>();
  }

  // Destructor
  ~Form_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "u0")
      return 2;
    else if (name == "rho_s")
      return 3;
    else if (name == "p_s")
      return 4;
    else if (name == "beta1")
      return 5;
    else if (name == "beta2")
      return 6;
    else if (name == "dt")
      return 7;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p";
    case 1:
      return "v0";
    case 2:
      return "u0";
    case 3:
      return "rho_s";
    case 4:
      return "p_s";
    case 5:
      return "beta1";
    case 6:
      return "beta2";
    case 7:
      return "dt";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_v_p;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_v0;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_u0;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_rho_s;
  typedef Form_J_FunctionSpace_6 CoefficientSpace_p_s;
  typedef Form_J_FunctionSpace_7 CoefficientSpace_beta1;
  typedef Form_J_FunctionSpace_8 CoefficientSpace_beta2;
  typedef Form_J_FunctionSpace_9 CoefficientSpace_dt;

  // Coefficients
  dolfin::CoefficientAssigner v_p;
  dolfin::CoefficientAssigner v0;
  dolfin::CoefficientAssigner u0;
  dolfin::CoefficientAssigner rho_s;
  dolfin::CoefficientAssigner p_s;
  dolfin::CoefficientAssigner beta1;
  dolfin::CoefficientAssigner beta2;
  dolfin::CoefficientAssigner dt;
};

class MultiMeshForm_J: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> rho_s, std::shared_ptr<const dolfin::GenericFunction> p_s, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> beta2, std::shared_ptr<const dolfin::GenericFunction> dt):
    dolfin::MultiMeshForm(V1, V0), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->v_p = v_p;
    this->v0 = v0;
    this->u0 = u0;
    this->rho_s = rho_s;
    this->p_s = p_s;
    this->beta1 = beta1;
    this->beta2 = beta2;
    this->dt = dt;

  }

  // Destructor
  ~MultiMeshForm_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "u0")
      return 2;
    else if (name == "rho_s")
      return 3;
    else if (name == "p_s")
      return 4;
    else if (name == "beta1")
      return 5;
    else if (name == "beta2")
      return 6;
    else if (name == "dt")
      return 7;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p";
    case 1:
      return "v0";
    case 2:
      return "u0";
    case 3:
      return "rho_s";
    case 4:
      return "p_s";
    case 5:
      return "beta1";
    case 6:
      return "beta2";
    case 7:
      return "dt";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_v_p;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_v0;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_u0;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_rho_s;
  typedef Form_J_FunctionSpace_6 CoefficientSpace_p_s;
  typedef Form_J_FunctionSpace_7 CoefficientSpace_beta1;
  typedef Form_J_FunctionSpace_8 CoefficientSpace_beta2;
  typedef Form_J_FunctionSpace_9 CoefficientSpace_dt;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner v_p;
  dolfin::MultiMeshCoefficientAssigner v0;
  dolfin::MultiMeshCoefficientAssigner u0;
  dolfin::MultiMeshCoefficientAssigner rho_s;
  dolfin::MultiMeshCoefficientAssigner p_s;
  dolfin::MultiMeshCoefficientAssigner beta1;
  dolfin::MultiMeshCoefficientAssigner beta2;
  dolfin::MultiMeshCoefficientAssigner dt;
};

// Class typedefs
typedef Form_J BilinearForm;
typedef MultiMeshForm_J MultiMeshBilinearForm;
typedef Form_J JacobianForm;
typedef MultiMeshForm_J MultiMeshJacobianForm;
typedef Form_F LinearForm;
typedef MultiMeshForm_F MultiMeshLinearForm;
typedef Form_F ResidualForm;
typedef MultiMeshForm_F MultiMeshResidualForm;
typedef Form_F::TestSpace FunctionSpace;
typedef Form_F::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
