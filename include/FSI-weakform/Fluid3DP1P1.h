// This code conforms with the UFC specification version 2017.1.0
// and was automatically generated by FFC version 2017.1.0.post2.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   add_tabulate_tensor_timing:     False
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   generate_dummy_tabulate_tensor: False
//   max_signature_length:           0
//   optimize:                       True
//   precision:                      None
//   quadrature_degree:              None
//   quadrature_rule:                None
//   representation:                 'auto'
//   split:                          False

#ifndef __FLUID3DP1P1_H
#define __FLUID3DP1P1_H
#include <algorithm>
#include <cmath>
#include <stdexcept>
#include <ufc.h>

class fluid3dp1p1_finite_element_0: public ufc::finite_element
{
public:

  fluid3dp1p1_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~fluid3dp1p1_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new fluid3dp1p1_finite_element_0();
  }

};


class fluid3dp1p1_finite_element_1: public ufc::finite_element
{
public:

  fluid3dp1p1_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~fluid3dp1p1_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[4] = vals[1];
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[5] = vals[1];
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[6] = vals[1];
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[7] = vals[1];
    values[11] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = coordinate_dofs[6];
    dof_coordinates[19] = coordinate_dofs[7];
    dof_coordinates[20] = coordinate_dofs[8];
    dof_coordinates[21] = coordinate_dofs[9];
    dof_coordinates[22] = coordinate_dofs[10];
    dof_coordinates[23] = coordinate_dofs[11];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[6];
    dof_coordinates[31] = coordinate_dofs[7];
    dof_coordinates[32] = coordinate_dofs[8];
    dof_coordinates[33] = coordinate_dofs[9];
    dof_coordinates[34] = coordinate_dofs[10];
    dof_coordinates[35] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new fluid3dp1p1_finite_element_0();
        break;
      }
    case 1:
      {
        return new fluid3dp1p1_finite_element_0();
        break;
      }
    case 2:
      {
        return new fluid3dp1p1_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new fluid3dp1p1_finite_element_1();
  }

};


class fluid3dp1p1_finite_element_2: public ufc::finite_element
{
public:

  fluid3dp1p1_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~fluid3dp1p1_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3), FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 20;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 5;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 5;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 5;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 5;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    values[4] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 20; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 5; s++)
      {
        values[r*5 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 5*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[4*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[4*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[4*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[4*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 20; r++)
    {
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[15];
    for (unsigned int r = 0; r < 15; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 20; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 12:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 13:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 14:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 15:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 16:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 17:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 18:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 19:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[4] = vals[1];
    values[8] = vals[2];
    values[12] = vals[3];
    values[16] = vals[4];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[5] = vals[1];
    values[9] = vals[2];
    values[13] = vals[3];
    values[17] = vals[4];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[6] = vals[1];
    values[10] = vals[2];
    values[14] = vals[3];
    values[18] = vals[4];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[7] = vals[1];
    values[11] = vals[2];
    values[15] = vals[3];
    values[19] = vals[4];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[5] = dof_values[1];
    vertex_values[10] = dof_values[2];
    vertex_values[15] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[6] = dof_values[5];
    vertex_values[11] = dof_values[6];
    vertex_values[16] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[7] = dof_values[9];
    vertex_values[12] = dof_values[10];
    vertex_values[17] = dof_values[11];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[12];
    vertex_values[8] = dof_values[13];
    vertex_values[13] = dof_values[14];
    vertex_values[18] = dof_values[15];
    // Evaluate function and change variables
    vertex_values[4] = dof_values[16];
    vertex_values[9] = dof_values[17];
    vertex_values[14] = dof_values[18];
    vertex_values[19] = dof_values[19];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = coordinate_dofs[6];
    dof_coordinates[19] = coordinate_dofs[7];
    dof_coordinates[20] = coordinate_dofs[8];
    dof_coordinates[21] = coordinate_dofs[9];
    dof_coordinates[22] = coordinate_dofs[10];
    dof_coordinates[23] = coordinate_dofs[11];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[6];
    dof_coordinates[31] = coordinate_dofs[7];
    dof_coordinates[32] = coordinate_dofs[8];
    dof_coordinates[33] = coordinate_dofs[9];
    dof_coordinates[34] = coordinate_dofs[10];
    dof_coordinates[35] = coordinate_dofs[11];
    dof_coordinates[36] = coordinate_dofs[0];
    dof_coordinates[37] = coordinate_dofs[1];
    dof_coordinates[38] = coordinate_dofs[2];
    dof_coordinates[39] = coordinate_dofs[3];
    dof_coordinates[40] = coordinate_dofs[4];
    dof_coordinates[41] = coordinate_dofs[5];
    dof_coordinates[42] = coordinate_dofs[6];
    dof_coordinates[43] = coordinate_dofs[7];
    dof_coordinates[44] = coordinate_dofs[8];
    dof_coordinates[45] = coordinate_dofs[9];
    dof_coordinates[46] = coordinate_dofs[10];
    dof_coordinates[47] = coordinate_dofs[11];
    dof_coordinates[48] = coordinate_dofs[0];
    dof_coordinates[49] = coordinate_dofs[1];
    dof_coordinates[50] = coordinate_dofs[2];
    dof_coordinates[51] = coordinate_dofs[3];
    dof_coordinates[52] = coordinate_dofs[4];
    dof_coordinates[53] = coordinate_dofs[5];
    dof_coordinates[54] = coordinate_dofs[6];
    dof_coordinates[55] = coordinate_dofs[7];
    dof_coordinates[56] = coordinate_dofs[8];
    dof_coordinates[57] = coordinate_dofs[9];
    dof_coordinates[58] = coordinate_dofs[10];
    dof_coordinates[59] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new fluid3dp1p1_finite_element_1();
        break;
      }
    case 1:
      {
        return new fluid3dp1p1_finite_element_0();
        break;
      }
    case 2:
      {
        return new fluid3dp1p1_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new fluid3dp1p1_finite_element_2();
  }

};


class fluid3dp1p1_finite_element_3: public ufc::finite_element
{
public:

  fluid3dp1p1_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~fluid3dp1p1_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', tetrahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    dof_coordinates[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    dof_coordinates[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new fluid3dp1p1_finite_element_3();
  }

};


class fluid3dp1p1_finite_element_4: public ufc::finite_element
{
public:

  fluid3dp1p1_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~fluid3dp1p1_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Discontinuous Lagrange', tetrahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Discontinuous Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    dof_coordinates[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    dof_coordinates[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new fluid3dp1p1_finite_element_4();
  }

};


class fluid3dp1p1_dofmap_0: public ufc::dofmap
{
public:

  fluid3dp1p1_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~fluid3dp1p1_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 3;
        break;
      }
    case 3:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new fluid3dp1p1_dofmap_0();
  }

};


class fluid3dp1p1_dofmap_1: public ufc::dofmap
{
public:

  fluid3dp1p1_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~fluid3dp1p1_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3*num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 6;
        break;
      }
    case 2:
      {
        return 9;
        break;
      }
    case 3:
      {
        return 12;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        dofs[4] = 10;
        dofs[5] = 11;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        dofs[4] = 9;
        dofs[5] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 9;
        dofs[5] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 4;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 11;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        dofs[4] = 8;
        dofs[5] = 9;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new fluid3dp1p1_dofmap_0();
        break;
      }
    case 1:
      {
        return new fluid3dp1p1_dofmap_0();
        break;
      }
    case 2:
      {
        return new fluid3dp1p1_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new fluid3dp1p1_dofmap_1();
  }

};


class fluid3dp1p1_dofmap_2: public ufc::dofmap
{
public:

  fluid3dp1p1_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~fluid3dp1p1_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3), FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 5*num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 20;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 15;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 5;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 5;
        break;
      }
    case 1:
      {
        return 10;
        break;
      }
    case 2:
      {
        return 15;
        break;
      }
    case 3:
      {
        return 20;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[12] = offset + entity_indices[0][0];
    dofs[13] = offset + entity_indices[0][1];
    dofs[14] = offset + entity_indices[0][2];
    dofs[15] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[16] = offset + entity_indices[0][0];
    dofs[17] = offset + entity_indices[0][1];
    dofs[18] = offset + entity_indices[0][2];
    dofs[19] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 13;
      dofs[10] = 14;
      dofs[11] = 15;
      dofs[12] = 17;
      dofs[13] = 18;
      dofs[14] = 19;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 14;
      dofs[11] = 15;
      dofs[12] = 16;
      dofs[13] = 18;
      dofs[14] = 19;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 15;
      dofs[12] = 16;
      dofs[13] = 17;
      dofs[14] = 19;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 14;
      dofs[12] = 16;
      dofs[13] = 17;
      dofs[14] = 18;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
        dofs[3] = 12;
        dofs[4] = 16;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
        dofs[3] = 13;
        dofs[4] = 17;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
        dofs[3] = 14;
        dofs[4] = 18;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
        dofs[3] = 15;
        dofs[4] = 19;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
        dofs[3] = 12;
        dofs[4] = 16;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
        dofs[3] = 13;
        dofs[4] = 17;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
        dofs[3] = 14;
        dofs[4] = 18;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
        dofs[3] = 15;
        dofs[4] = 19;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        dofs[4] = 10;
        dofs[5] = 11;
        dofs[6] = 14;
        dofs[7] = 15;
        dofs[8] = 18;
        dofs[9] = 19;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        dofs[4] = 9;
        dofs[5] = 11;
        dofs[6] = 13;
        dofs[7] = 15;
        dofs[8] = 17;
        dofs[9] = 19;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 9;
        dofs[5] = 10;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 17;
        dofs[9] = 18;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 4;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 11;
        dofs[6] = 12;
        dofs[7] = 15;
        dofs[8] = 16;
        dofs[9] = 19;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        dofs[6] = 12;
        dofs[7] = 14;
        dofs[8] = 16;
        dofs[9] = 18;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 12;
        dofs[7] = 13;
        dofs[8] = 16;
        dofs[9] = 17;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        dofs[9] = 13;
        dofs[10] = 14;
        dofs[11] = 15;
        dofs[12] = 17;
        dofs[13] = 18;
        dofs[14] = 19;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        dofs[9] = 12;
        dofs[10] = 14;
        dofs[11] = 15;
        dofs[12] = 16;
        dofs[13] = 18;
        dofs[14] = 19;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        dofs[9] = 12;
        dofs[10] = 13;
        dofs[11] = 15;
        dofs[12] = 16;
        dofs[13] = 17;
        dofs[14] = 19;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        dofs[9] = 12;
        dofs[10] = 13;
        dofs[11] = 14;
        dofs[12] = 16;
        dofs[13] = 17;
        dofs[14] = 18;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
      dofs[12] = 12;
      dofs[13] = 13;
      dofs[14] = 14;
      dofs[15] = 15;
      dofs[16] = 16;
      dofs[17] = 17;
      dofs[18] = 18;
      dofs[19] = 19;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new fluid3dp1p1_dofmap_1();
        break;
      }
    case 1:
      {
        return new fluid3dp1p1_dofmap_0();
        break;
      }
    case 2:
      {
        return new fluid3dp1p1_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new fluid3dp1p1_dofmap_2();
  }

};


class fluid3dp1p1_dofmap_3: public ufc::dofmap
{
public:

  fluid3dp1p1_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~fluid3dp1p1_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', tetrahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      case 4:
        {
          
          break;
        }
      case 5:
        {
          
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new fluid3dp1p1_dofmap_3();
  }

};


class fluid3dp1p1_dofmap_4: public ufc::dofmap
{
public:

  fluid3dp1p1_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~fluid3dp1p1_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', tetrahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[3];
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[3][0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      case 4:
        {
          
          break;
        }
      case 5:
        {
          
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new fluid3dp1p1_dofmap_4();
  }

};


class fluid3dp1p1_cell_integral_0_204: public ufc::cell_integral
{
public:

  fluid3dp1p1_cell_integral_0_204() : ufc::cell_integral()
  {

  }

  ~fluid3dp1p1_cell_integral_0_204() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 2
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           2
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.04166666666666666, 0.04166666666666666, 0.04166666666666666, 0.04166666666666666 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE31_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE31_C0_Q4[1][4][4] =
        { { { 0.1381966011250091, 0.585410196624969, 0.138196601125011, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.585410196624969, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.138196601125011, 0.585410196624969 },
            { 0.5854101966249672, 0.1381966011250109, 0.138196601125011, 0.138196601125011 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE31_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE31_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE31_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE31_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE31_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE31_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE31_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE31_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE31_C0_D001_Q4[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE31_C0_D001_Q4[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE31_C0_D001_Q4[0][0][0] + w[0][2] * FE31_C0_D001_Q4[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE31_C0_D001_Q4[0][0][0] + w[0][3] * FE31_C0_D001_Q4[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE31_C0_D001_Q4[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE31_C0_D001_Q4[0][0][0] + w[0][6] * FE31_C0_D001_Q4[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE31_C0_D001_Q4[0][0][0] + w[0][7] * FE31_C0_D001_Q4[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE31_C0_D001_Q4[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE31_C0_D001_Q4[0][0][0] + w[0][10] * FE31_C0_D001_Q4[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE31_C0_D001_Q4[0][0][0] + w[0][11] * FE31_C0_D001_Q4[0][0][1];
    double w0_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c3 += w[0][ic + 12] * FE31_C0_D001_Q4[0][0][ic];
    const double w0_d1_c3 = w[0][12] * FE31_C0_D001_Q4[0][0][0] + w[0][14] * FE31_C0_D001_Q4[0][0][1];
    const double w0_d2_c3 = w[0][12] * FE31_C0_D001_Q4[0][0][0] + w[0][15] * FE31_C0_D001_Q4[0][0][1];
    alignas(32) double sp[365];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = w0_d0_c0 * sp[14];
    sp[44] = w0_d1_c0 * sp[17];
    sp[45] = sp[43] + sp[44];
    sp[46] = w0_d2_c0 * sp[18];
    sp[47] = sp[45] + sp[46];
    sp[48] = w0_d0_c1 * sp[22];
    sp[49] = w0_d1_c1 * sp[26];
    sp[50] = sp[48] + sp[49];
    sp[51] = w0_d2_c1 * sp[30];
    sp[52] = sp[50] + sp[51];
    sp[53] = sp[47] + sp[52];
    sp[54] = w0_d0_c2 * sp[34];
    sp[55] = w0_d1_c2 * sp[38];
    sp[56] = sp[54] + sp[55];
    sp[57] = w0_d2_c2 * sp[42];
    sp[58] = sp[56] + sp[57];
    sp[59] = sp[53] + sp[58];
    sp[60] = w0_d0_c3 * sp[14];
    sp[61] = w0_d1_c3 * sp[17];
    sp[62] = sp[60] + sp[61];
    sp[63] = w0_d2_c3 * sp[18];
    sp[64] = sp[62] + sp[63];
    sp[65] = sp[64] * sp[14];
    sp[66] = sp[64] * sp[17];
    sp[67] = sp[64] * sp[18];
    sp[68] = w0_d0_c3 * sp[22];
    sp[69] = w0_d1_c3 * sp[26];
    sp[70] = sp[68] + sp[69];
    sp[71] = w0_d2_c3 * sp[30];
    sp[72] = sp[70] + sp[71];
    sp[73] = sp[72] * sp[22];
    sp[74] = sp[72] * sp[26];
    sp[75] = sp[72] * sp[30];
    sp[76] = sp[73] + sp[65];
    sp[77] = sp[74] + sp[66];
    sp[78] = sp[67] + sp[75];
    sp[79] = w0_d0_c3 * sp[34];
    sp[80] = w0_d1_c3 * sp[38];
    sp[81] = sp[79] + sp[80];
    sp[82] = w0_d2_c3 * sp[42];
    sp[83] = sp[81] + sp[82];
    sp[84] = sp[83] * sp[34];
    sp[85] = sp[83] * sp[38];
    sp[86] = sp[83] * sp[42];
    sp[87] = sp[76] + sp[84];
    sp[88] = sp[77] + sp[85];
    sp[89] = sp[78] + sp[86];
    sp[90] = J_c0 * tetrahedron_reference_edge_vectors[0][0];
    sp[91] = J_c1 * tetrahedron_reference_edge_vectors[0][1];
    sp[92] = sp[90] + sp[91];
    sp[93] = J_c2 * tetrahedron_reference_edge_vectors[0][2];
    sp[94] = sp[92] + sp[93];
    sp[95] = sp[94] * sp[94];
    sp[96] = tetrahedron_reference_edge_vectors[0][0] * J_c3;
    sp[97] = tetrahedron_reference_edge_vectors[0][1] * J_c4;
    sp[98] = sp[96] + sp[97];
    sp[99] = tetrahedron_reference_edge_vectors[0][2] * J_c5;
    sp[100] = sp[98] + sp[99];
    sp[101] = sp[100] * sp[100];
    sp[102] = sp[95] + sp[101];
    sp[103] = tetrahedron_reference_edge_vectors[0][0] * J_c6;
    sp[104] = tetrahedron_reference_edge_vectors[0][1] * J_c7;
    sp[105] = sp[103] + sp[104];
    sp[106] = tetrahedron_reference_edge_vectors[0][2] * J_c8;
    sp[107] = sp[105] + sp[106];
    sp[108] = sp[107] * sp[107];
    sp[109] = sp[102] + sp[108];
    sp[110] = std::sqrt(sp[109]);
    sp[111] = J_c0 * tetrahedron_reference_edge_vectors[5][0];
    sp[112] = J_c1 * tetrahedron_reference_edge_vectors[5][1];
    sp[113] = sp[111] + sp[112];
    sp[114] = J_c2 * tetrahedron_reference_edge_vectors[5][2];
    sp[115] = sp[113] + sp[114];
    sp[116] = sp[115] * sp[115];
    sp[117] = J_c3 * tetrahedron_reference_edge_vectors[5][0];
    sp[118] = J_c4 * tetrahedron_reference_edge_vectors[5][1];
    sp[119] = sp[117] + sp[118];
    sp[120] = J_c5 * tetrahedron_reference_edge_vectors[5][2];
    sp[121] = sp[119] + sp[120];
    sp[122] = sp[121] * sp[121];
    sp[123] = sp[116] + sp[122];
    sp[124] = J_c6 * tetrahedron_reference_edge_vectors[5][0];
    sp[125] = J_c7 * tetrahedron_reference_edge_vectors[5][1];
    sp[126] = sp[124] + sp[125];
    sp[127] = J_c8 * tetrahedron_reference_edge_vectors[5][2];
    sp[128] = sp[126] + sp[127];
    sp[129] = sp[128] * sp[128];
    sp[130] = sp[123] + sp[129];
    sp[131] = std::sqrt(sp[130]);
    sp[132] = sp[110] * sp[131];
    sp[133] = J_c0 * tetrahedron_reference_edge_vectors[2][0];
    sp[134] = J_c1 * tetrahedron_reference_edge_vectors[2][1];
    sp[135] = sp[133] + sp[134];
    sp[136] = J_c2 * tetrahedron_reference_edge_vectors[2][2];
    sp[137] = sp[135] + sp[136];
    sp[138] = sp[137] * sp[137];
    sp[139] = J_c3 * tetrahedron_reference_edge_vectors[2][0];
    sp[140] = J_c4 * tetrahedron_reference_edge_vectors[2][1];
    sp[141] = sp[139] + sp[140];
    sp[142] = J_c5 * tetrahedron_reference_edge_vectors[2][2];
    sp[143] = sp[141] + sp[142];
    sp[144] = sp[143] * sp[143];
    sp[145] = sp[138] + sp[144];
    sp[146] = J_c6 * tetrahedron_reference_edge_vectors[2][0];
    sp[147] = J_c7 * tetrahedron_reference_edge_vectors[2][1];
    sp[148] = sp[146] + sp[147];
    sp[149] = J_c8 * tetrahedron_reference_edge_vectors[2][2];
    sp[150] = sp[148] + sp[149];
    sp[151] = sp[150] * sp[150];
    sp[152] = sp[145] + sp[151];
    sp[153] = std::sqrt(sp[152]);
    sp[154] = J_c0 * tetrahedron_reference_edge_vectors[3][0];
    sp[155] = J_c1 * tetrahedron_reference_edge_vectors[3][1];
    sp[156] = sp[154] + sp[155];
    sp[157] = J_c2 * tetrahedron_reference_edge_vectors[3][2];
    sp[158] = sp[156] + sp[157];
    sp[159] = sp[158] * sp[158];
    sp[160] = J_c3 * tetrahedron_reference_edge_vectors[3][0];
    sp[161] = J_c4 * tetrahedron_reference_edge_vectors[3][1];
    sp[162] = sp[160] + sp[161];
    sp[163] = J_c5 * tetrahedron_reference_edge_vectors[3][2];
    sp[164] = sp[162] + sp[163];
    sp[165] = sp[164] * sp[164];
    sp[166] = sp[159] + sp[165];
    sp[167] = J_c6 * tetrahedron_reference_edge_vectors[3][0];
    sp[168] = J_c7 * tetrahedron_reference_edge_vectors[3][1];
    sp[169] = sp[167] + sp[168];
    sp[170] = J_c8 * tetrahedron_reference_edge_vectors[3][2];
    sp[171] = sp[169] + sp[170];
    sp[172] = sp[171] * sp[171];
    sp[173] = sp[166] + sp[172];
    sp[174] = std::sqrt(sp[173]);
    sp[175] = sp[153] * sp[174];
    sp[176] = J_c0 * tetrahedron_reference_edge_vectors[1][0];
    sp[177] = J_c1 * tetrahedron_reference_edge_vectors[1][1];
    sp[178] = sp[176] + sp[177];
    sp[179] = J_c2 * tetrahedron_reference_edge_vectors[1][2];
    sp[180] = sp[178] + sp[179];
    sp[181] = sp[180] * sp[180];
    sp[182] = J_c3 * tetrahedron_reference_edge_vectors[1][0];
    sp[183] = J_c4 * tetrahedron_reference_edge_vectors[1][1];
    sp[184] = sp[182] + sp[183];
    sp[185] = J_c5 * tetrahedron_reference_edge_vectors[1][2];
    sp[186] = sp[184] + sp[185];
    sp[187] = sp[186] * sp[186];
    sp[188] = sp[181] + sp[187];
    sp[189] = tetrahedron_reference_edge_vectors[1][0] * J_c6;
    sp[190] = tetrahedron_reference_edge_vectors[1][1] * J_c7;
    sp[191] = sp[189] + sp[190];
    sp[192] = tetrahedron_reference_edge_vectors[1][2] * J_c8;
    sp[193] = sp[191] + sp[192];
    sp[194] = sp[193] * sp[193];
    sp[195] = sp[188] + sp[194];
    sp[196] = std::sqrt(sp[195]);
    sp[197] = J_c0 * tetrahedron_reference_edge_vectors[4][0];
    sp[198] = J_c1 * tetrahedron_reference_edge_vectors[4][1];
    sp[199] = sp[197] + sp[198];
    sp[200] = J_c2 * tetrahedron_reference_edge_vectors[4][2];
    sp[201] = sp[199] + sp[200];
    sp[202] = sp[201] * sp[201];
    sp[203] = J_c3 * tetrahedron_reference_edge_vectors[4][0];
    sp[204] = J_c4 * tetrahedron_reference_edge_vectors[4][1];
    sp[205] = sp[203] + sp[204];
    sp[206] = J_c5 * tetrahedron_reference_edge_vectors[4][2];
    sp[207] = sp[205] + sp[206];
    sp[208] = sp[207] * sp[207];
    sp[209] = sp[202] + sp[208];
    sp[210] = J_c6 * tetrahedron_reference_edge_vectors[4][0];
    sp[211] = J_c7 * tetrahedron_reference_edge_vectors[4][1];
    sp[212] = sp[210] + sp[211];
    sp[213] = J_c8 * tetrahedron_reference_edge_vectors[4][2];
    sp[214] = sp[212] + sp[213];
    sp[215] = sp[214] * sp[214];
    sp[216] = sp[209] + sp[215];
    sp[217] = std::sqrt(sp[216]);
    sp[218] = sp[196] * sp[217];
    sp[219] = sp[175] + sp[218];
    sp[220] = sp[219] + sp[132];
    sp[221] = -1 * sp[132] + sp[220] / 2;
    sp[222] = -1 * sp[218] + sp[220] / 2;
    sp[223] = -1 * sp[175] + sp[220] / 2;
    sp[224] = sp[223] * (sp[220] / 2);
    sp[225] = sp[222] * sp[224];
    sp[226] = sp[221] * sp[225];
    sp[227] = std::sqrt(sp[226]);
    sp[228] = tetrahedron_reference_cell_volume * sp[13];
    sp[229] = std::abs(sp[228]);
    sp[230] = sp[227] / (6.0 * sp[229]);
    sp[231] = 2.0 * sp[230] * (2.0 * sp[230]);
    sp[232] = sp[231] / w[6][0];
    sp[233] = sp[232] * w[8][0];
    sp[234] = sp[87] * sp[233];
    sp[235] = sp[88] * sp[233];
    sp[236] = sp[89] * sp[233];
    sp[237] = w0_d0_c0 * sp[22];
    sp[238] = w0_d1_c0 * sp[26];
    sp[239] = sp[237] + sp[238];
    sp[240] = w0_d2_c0 * sp[30];
    sp[241] = sp[239] + sp[240];
    sp[242] = w0_d0_c0 * sp[34];
    sp[243] = w0_d1_c0 * sp[38];
    sp[244] = sp[242] + sp[243];
    sp[245] = w0_d2_c0 * sp[42];
    sp[246] = sp[244] + sp[245];
    sp[247] = w0_d0_c1 * sp[14];
    sp[248] = w0_d1_c1 * sp[17];
    sp[249] = sp[247] + sp[248];
    sp[250] = w0_d2_c1 * sp[18];
    sp[251] = sp[249] + sp[250];
    sp[252] = w0_d0_c1 * sp[34];
    sp[253] = w0_d1_c1 * sp[38];
    sp[254] = sp[252] + sp[253];
    sp[255] = w0_d2_c1 * sp[42];
    sp[256] = sp[254] + sp[255];
    sp[257] = w0_d0_c2 * sp[14];
    sp[258] = w0_d1_c2 * sp[17];
    sp[259] = sp[257] + sp[258];
    sp[260] = w0_d2_c2 * sp[18];
    sp[261] = sp[259] + sp[260];
    sp[262] = w0_d0_c2 * sp[22];
    sp[263] = w0_d1_c2 * sp[26];
    sp[264] = sp[262] + sp[263];
    sp[265] = w0_d2_c2 * sp[30];
    sp[266] = sp[264] + sp[265];
    sp[267] = sp[47] * w[5][0];
    sp[268] = sp[241] * w[5][0];
    sp[269] = sp[246] * w[5][0];
    sp[270] = sp[251] * w[5][0];
    sp[271] = sp[52] * w[5][0];
    sp[272] = sp[256] * w[5][0];
    sp[273] = sp[261] * w[5][0];
    sp[274] = sp[266] * w[5][0];
    sp[275] = sp[58] * w[5][0];
    sp[276] = sp[14] + sp[14];
    sp[277] = sp[17] + sp[17];
    sp[278] = sp[18] + sp[18];
    sp[279] = sp[47] + sp[47];
    sp[280] = 0.5 * sp[279] * (0.5 * sp[276]);
    sp[281] = 0.5 * sp[279] * (0.5 * sp[277]);
    sp[282] = 0.5 * sp[279] * (0.5 * sp[278]);
    sp[283] = sp[251] + sp[241];
    sp[284] = 0.5 * sp[283] * (0.5 * sp[22]);
    sp[285] = 0.5 * sp[283] * (0.5 * sp[26]);
    sp[286] = 0.5 * sp[283] * (0.5 * sp[30]);
    sp[287] = 0.5 * sp[283] * (0.5 * sp[14]);
    sp[288] = 0.5 * sp[283] * (0.5 * sp[17]);
    sp[289] = 0.5 * sp[283] * (0.5 * sp[18]);
    sp[290] = sp[280] + sp[284];
    sp[291] = sp[281] + sp[285];
    sp[292] = sp[282] + sp[286];
    sp[293] = sp[246] + sp[261];
    sp[294] = 0.5 * sp[293] * (0.5 * sp[34]);
    sp[295] = 0.5 * sp[293] * (0.5 * sp[38]);
    sp[296] = 0.5 * sp[293] * (0.5 * sp[42]);
    sp[297] = 0.5 * sp[293] * (0.5 * sp[14]);
    sp[298] = 0.5 * sp[293] * (0.5 * sp[17]);
    sp[299] = 0.5 * sp[293] * (0.5 * sp[18]);
    sp[300] = sp[290] + sp[294];
    sp[301] = sp[291] + sp[295];
    sp[302] = sp[292] + sp[296];
    sp[303] = sp[22] + sp[22];
    sp[304] = sp[26] + sp[26];
    sp[305] = sp[30] + sp[30];
    sp[306] = sp[52] + sp[52];
    sp[307] = 0.5 * sp[306] * (0.5 * sp[303]);
    sp[308] = 0.5 * sp[306] * (0.5 * sp[304]);
    sp[309] = 0.5 * sp[306] * (0.5 * sp[305]);
    sp[310] = sp[307] + sp[287];
    sp[311] = sp[308] + sp[288];
    sp[312] = sp[309] + sp[289];
    sp[313] = sp[256] + sp[266];
    sp[314] = 0.5 * sp[313] * (0.5 * sp[34]);
    sp[315] = 0.5 * sp[313] * (0.5 * sp[38]);
    sp[316] = 0.5 * sp[313] * (0.5 * sp[42]);
    sp[317] = 0.5 * sp[313] * (0.5 * sp[22]);
    sp[318] = 0.5 * sp[313] * (0.5 * sp[26]);
    sp[319] = 0.5 * sp[313] * (0.5 * sp[30]);
    sp[320] = sp[310] + sp[314];
    sp[321] = sp[311] + sp[315];
    sp[322] = sp[312] + sp[316];
    sp[323] = sp[300] + sp[284];
    sp[324] = sp[301] + sp[285];
    sp[325] = sp[302] + sp[286];
    sp[326] = sp[320] + sp[287];
    sp[327] = sp[321] + sp[288];
    sp[328] = sp[322] + sp[289];
    sp[329] = sp[317] + sp[297];
    sp[330] = sp[318] + sp[298];
    sp[331] = sp[299] + sp[319];
    sp[332] = sp[34] + sp[34];
    sp[333] = sp[38] + sp[38];
    sp[334] = sp[42] + sp[42];
    sp[335] = sp[58] + sp[58];
    sp[336] = 0.5 * sp[335] * (0.5 * sp[332]);
    sp[337] = 0.5 * sp[335] * (0.5 * sp[333]);
    sp[338] = 0.5 * sp[335] * (0.5 * sp[334]);
    sp[339] = sp[329] + sp[336];
    sp[340] = sp[330] + sp[337];
    sp[341] = sp[331] + sp[338];
    sp[342] = sp[323] + sp[294];
    sp[343] = sp[324] + sp[295];
    sp[344] = sp[325] + sp[296];
    sp[345] = sp[326] + sp[314];
    sp[346] = sp[327] + sp[315];
    sp[347] = sp[328] + sp[316];
    sp[348] = sp[339] + sp[329];
    sp[349] = sp[340] + sp[330];
    sp[350] = sp[341] + sp[331];
    sp[351] = sp[342] * (2.0 * w[6][0]);
    sp[352] = sp[343] * (2.0 * w[6][0]);
    sp[353] = sp[344] * (2.0 * w[6][0]);
    sp[354] = sp[345] * (2.0 * w[6][0]);
    sp[355] = sp[346] * (2.0 * w[6][0]);
    sp[356] = sp[347] * (2.0 * w[6][0]);
    sp[357] = sp[348] * (2.0 * w[6][0]);
    sp[358] = sp[349] * (2.0 * w[6][0]);
    sp[359] = sp[350] * (2.0 * w[6][0]);
    sp[360] = std::abs(sp[13]);
    sp[361] = -1 * sp[59] * sp[360];
    sp[362] = sp[234] * sp[360];
    sp[363] = sp[235] * sp[360];
    sp[364] = sp[236] * sp[360];
    alignas(32) double BF0[2] = {};
    alignas(32) double BF1[4] = {};
    alignas(32) double BF2[2] = {};
    alignas(32) double BF3[2] = {};
    alignas(32) double BF4[2] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[2] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[4] = {};
    alignas(32) double BF10[2] = {};
    alignas(32) double BF11[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w0_c3 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c3 += w[0][ic + 12] * FE31_C0_Q4[0][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c0 += w[2][ic] * FE31_C0_Q4[0][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c0 += w[0][ic] * FE31_C0_Q4[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c0 += w[1][ic] * FE31_C0_Q4[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c1 += w[2][ic + 4] * FE31_C0_Q4[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c1 += w[0][ic + 4] * FE31_C0_Q4[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c1 += w[1][ic + 4] * FE31_C0_Q4[0][iq][ic];
        double w2_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c2 += w[2][ic + 8] * FE31_C0_Q4[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c2 += w[0][ic + 8] * FE31_C0_Q4[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c2 += w[1][ic + 8] * FE31_C0_Q4[0][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w3_c0 += w[3][ic] * FE31_C0_Q4[0][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w3_c1 += w[3][ic + 4] * FE31_C0_Q4[0][iq][ic];
        double w3_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w3_c2 += w[3][ic + 8] * FE31_C0_Q4[0][iq][ic];
        alignas(32) double sv4[123];
        sv4[0] = w0_c3 * sp[14];
        sv4[1] = w0_c3 * sp[17];
        sv4[2] = w0_c3 * sp[18];
        sv4[3] = w0_c3 * sp[22];
        sv4[4] = w0_c3 * sp[26];
        sv4[5] = w0_c3 * sp[30];
        sv4[6] = w0_c3 * sp[34];
        sv4[7] = w0_c3 * sp[38];
        sv4[8] = w0_c3 * sp[42];
        sv4[9] = 3 * w0_c0 + -1 * (4 * w1_c0);
        sv4[10] = w2_c0 + sv4[9];
        sv4[11] = sv4[10] / (2 * w[7][0]);
        sv4[12] = 3 * w0_c1 + -1 * (4 * w1_c1);
        sv4[13] = w2_c1 + sv4[12];
        sv4[14] = sv4[13] / (2 * w[7][0]);
        sv4[15] = 3 * w0_c2 + -1 * (4 * w1_c2);
        sv4[16] = w2_c2 + sv4[15];
        sv4[17] = sv4[16] / (2 * w[7][0]);
        sv4[18] = sv4[11] * w[5][0];
        sv4[19] = sv4[14] * w[5][0];
        sv4[20] = sv4[17] * w[5][0];
        sv4[21] = w0_c0 + -1 * w3_c0;
        sv4[22] = sv4[21] * sp[47];
        sv4[23] = w0_c1 + -1 * w3_c1;
        sv4[24] = sv4[23] * sp[241];
        sv4[25] = sv4[22] + sv4[24];
        sv4[26] = w0_c2 + -1 * w3_c2;
        sv4[27] = sv4[26] * sp[246];
        sv4[28] = sv4[25] + sv4[27];
        sv4[29] = sv4[21] * sp[251];
        sv4[30] = sv4[23] * sp[52];
        sv4[31] = sv4[29] + sv4[30];
        sv4[32] = sv4[26] * sp[256];
        sv4[33] = sv4[31] + sv4[32];
        sv4[34] = sv4[21] * sp[261];
        sv4[35] = sv4[23] * sp[266];
        sv4[36] = sv4[34] + sv4[35];
        sv4[37] = sv4[26] * sp[58];
        sv4[38] = sv4[36] + sv4[37];
        sv4[39] = sv4[28] * w[5][0];
        sv4[40] = sv4[33] * w[5][0];
        sv4[41] = sv4[38] * w[5][0];
        sv4[42] = sv4[39] + sv4[18];
        sv4[43] = sv4[40] + sv4[19];
        sv4[44] = sv4[41] + sv4[20];
        sv4[45] = sv4[21] * sp[14];
        sv4[46] = sv4[21] * sp[17];
        sv4[47] = sv4[21] * sp[18];
        sv4[48] = sv4[23] * sp[22];
        sv4[49] = sv4[23] * sp[26];
        sv4[50] = sv4[23] * sp[30];
        sv4[51] = sv4[48] + sv4[45];
        sv4[52] = sv4[49] + sv4[46];
        sv4[53] = sv4[47] + sv4[50];
        sv4[54] = sv4[26] * sp[34];
        sv4[55] = sv4[26] * sp[38];
        sv4[56] = sv4[26] * sp[42];
        sv4[57] = sv4[51] + sv4[54];
        sv4[58] = sv4[52] + sv4[55];
        sv4[59] = sv4[53] + sv4[56];
        sv4[60] = sv4[21] * sp[267];
        sv4[61] = sv4[23] * sp[268];
        sv4[62] = sv4[60] + sv4[61];
        sv4[63] = sv4[26] * sp[269];
        sv4[64] = sv4[62] + sv4[63];
        sv4[65] = sv4[64] * sv4[57];
        sv4[66] = sv4[64] * sv4[58];
        sv4[67] = sv4[64] * sv4[59];
        sv4[68] = sv4[21] * sp[270];
        sv4[69] = sv4[23] * sp[271];
        sv4[70] = sv4[68] + sv4[69];
        sv4[71] = sv4[26] * sp[272];
        sv4[72] = sv4[70] + sv4[71];
        sv4[73] = sv4[72] * sv4[57];
        sv4[74] = sv4[72] * sv4[58];
        sv4[75] = sv4[72] * sv4[59];
        sv4[76] = sv4[21] * sp[273];
        sv4[77] = sv4[23] * sp[274];
        sv4[78] = sv4[76] + sv4[77];
        sv4[79] = sv4[26] * sp[275];
        sv4[80] = sv4[78] + sv4[79];
        sv4[81] = sv4[80] * sv4[57];
        sv4[82] = sv4[80] * sv4[58];
        sv4[83] = sv4[80] * sv4[59];
        sv4[84] = sv4[65] * w[4][0];
        sv4[85] = sv4[66] * w[4][0];
        sv4[86] = sv4[67] * w[4][0];
        sv4[87] = sv4[73] * w[4][0];
        sv4[88] = sv4[74] * w[4][0];
        sv4[89] = sv4[75] * w[4][0];
        sv4[90] = sv4[81] * w[4][0];
        sv4[91] = sv4[82] * w[4][0];
        sv4[92] = sv4[83] * w[4][0];
        sv4[93] = -1 * sv4[0] + sv4[84];
        sv4[94] = -1 * sv4[1] + sv4[85];
        sv4[95] = -1 * sv4[2] + sv4[86];
        sv4[96] = -1 * sv4[3] + sv4[87];
        sv4[97] = -1 * sv4[4] + sv4[88];
        sv4[98] = -1 * sv4[5] + sv4[89];
        sv4[99] = -1 * sv4[6] + sv4[90];
        sv4[100] = -1 * sv4[7] + sv4[91];
        sv4[101] = -1 * sv4[8] + sv4[92];
        sv4[102] = sv4[93] + sp[351];
        sv4[103] = sv4[94] + sp[352];
        sv4[104] = sv4[95] + sp[353];
        sv4[105] = sv4[96] + sp[354];
        sv4[106] = sv4[97] + sp[355];
        sv4[107] = sv4[98] + sp[356];
        sv4[108] = sv4[99] + sp[357];
        sv4[109] = sv4[100] + sp[358];
        sv4[110] = sv4[101] + sp[359];
        sv4[111] = sv4[102] * sp[360];
        sv4[112] = sv4[103] * sp[360];
        sv4[113] = sv4[104] * sp[360];
        sv4[114] = sv4[105] * sp[360];
        sv4[115] = sv4[106] * sp[360];
        sv4[116] = sv4[107] * sp[360];
        sv4[117] = sv4[108] * sp[360];
        sv4[118] = sv4[109] * sp[360];
        sv4[119] = sv4[110] * sp[360];
        sv4[120] = sv4[42] * sp[360];
        sv4[121] = sv4[43] * sp[360];
        sv4[122] = sv4[44] * sp[360];
        const double fw0 = sv4[111] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF0[i] += fw0 * FE31_C0_D001_Q4[0][0][i];
        const double fw1 = sv4[120] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF1[i] += fw1 * FE31_C0_Q4[0][iq][i];
        const double fw2 = sv4[112] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF2[i] += fw2 * FE31_C0_D001_Q4[0][0][i];
        const double fw3 = sv4[113] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF3[i] += fw3 * FE31_C0_D001_Q4[0][0][i];
        const double fw4 = sv4[114] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF4[i] += fw4 * FE31_C0_D001_Q4[0][0][i];
        const double fw5 = sv4[121] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE31_C0_Q4[0][iq][i];
        const double fw6 = sv4[115] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE31_C0_D001_Q4[0][0][i];
        const double fw7 = sv4[116] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF7[i] += fw7 * FE31_C0_D001_Q4[0][0][i];
        const double fw8 = sv4[117] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE31_C0_D001_Q4[0][0][i];
        const double fw9 = sv4[122] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF9[i] += fw9 * FE31_C0_Q4[0][iq][i];
        const double fw10 = sv4[118] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF10[i] += fw10 * FE31_C0_D001_Q4[0][0][i];
        const double fw11 = sv4[119] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF11[i] += fw11 * FE31_C0_D001_Q4[0][0][i];
    }
    std::fill(&A[0], &A[12], 0.0);
    A[12] = -0.1666666666666667 * sp[362] + 0.04166666666666644 * sp[361] + -0.1666666666666667 * sp[363] + -0.1666666666666667 * sp[364];
    A[13] = 0.1666666666666667 * sp[362] + 0.04166666666666674 * sp[361];
    A[14] = 0.04166666666666675 * sp[361] + 0.1666666666666667 * sp[363];
    A[15] = 0.04166666666666674 * sp[361] + 0.1666666666666667 * sp[364];
    std::fill(&A[16], &A[20], 0.0);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 4; ++i)
        A[i] += BF1[i];
    for (int i = 0; i < 2; ++i)
        A[DM0[i]] += BF2[i];
    for (int i = 0; i < 2; ++i)
        A[DM1[i]] += BF3[i];
    for (int i = 0; i < 2; ++i)
        A[i + 4] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[i + 4] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[DM2[i]] += BF6[i];
    for (int i = 0; i < 2; ++i)
        A[DM3[i]] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[i + 8] += BF8[i];
    for (int i = 0; i < 4; ++i)
        A[i + 8] += BF9[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF10[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF11[i];
  }

};


class fluid3dp1p1_cell_integral_0_210: public ufc::cell_integral
{
public:

  fluid3dp1p1_cell_integral_0_210() : ufc::cell_integral()
  {

  }

  ~fluid3dp1p1_cell_integral_0_210() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 2
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           2
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.04166666666666666, 0.04166666666666666, 0.04166666666666666, 0.04166666666666666 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE31_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE31_C0_Q4[1][4][4] =
        { { { 0.1381966011250091, 0.585410196624969, 0.138196601125011, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.585410196624969, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.138196601125011, 0.585410196624969 },
            { 0.5854101966249672, 0.1381966011250109, 0.138196601125011, 0.138196601125011 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE31_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE31_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE31_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE31_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE31_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE31_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE31_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE31_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE31_C0_D001_Q4[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE31_C0_D001_Q4[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE31_C0_D001_Q4[0][0][0] + w[0][2] * FE31_C0_D001_Q4[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE31_C0_D001_Q4[0][0][0] + w[0][3] * FE31_C0_D001_Q4[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE31_C0_D001_Q4[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE31_C0_D001_Q4[0][0][0] + w[0][6] * FE31_C0_D001_Q4[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE31_C0_D001_Q4[0][0][0] + w[0][7] * FE31_C0_D001_Q4[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE31_C0_D001_Q4[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE31_C0_D001_Q4[0][0][0] + w[0][10] * FE31_C0_D001_Q4[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE31_C0_D001_Q4[0][0][0] + w[0][11] * FE31_C0_D001_Q4[0][0][1];
    double w0_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c3 += w[0][ic + 12] * FE31_C0_D001_Q4[0][0][ic];
    const double w0_d1_c3 = w[0][12] * FE31_C0_D001_Q4[0][0][0] + w[0][14] * FE31_C0_D001_Q4[0][0][1];
    const double w0_d2_c3 = w[0][12] * FE31_C0_D001_Q4[0][0][0] + w[0][15] * FE31_C0_D001_Q4[0][0][1];
    alignas(32) double sp[365];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = w0_d0_c0 * sp[14];
    sp[44] = w0_d1_c0 * sp[17];
    sp[45] = sp[43] + sp[44];
    sp[46] = w0_d2_c0 * sp[18];
    sp[47] = sp[45] + sp[46];
    sp[48] = w0_d0_c1 * sp[22];
    sp[49] = w0_d1_c1 * sp[26];
    sp[50] = sp[48] + sp[49];
    sp[51] = w0_d2_c1 * sp[30];
    sp[52] = sp[50] + sp[51];
    sp[53] = sp[47] + sp[52];
    sp[54] = w0_d0_c2 * sp[34];
    sp[55] = w0_d1_c2 * sp[38];
    sp[56] = sp[54] + sp[55];
    sp[57] = w0_d2_c2 * sp[42];
    sp[58] = sp[56] + sp[57];
    sp[59] = sp[53] + sp[58];
    sp[60] = w0_d0_c3 * sp[14];
    sp[61] = w0_d1_c3 * sp[17];
    sp[62] = sp[60] + sp[61];
    sp[63] = w0_d2_c3 * sp[18];
    sp[64] = sp[62] + sp[63];
    sp[65] = sp[64] * sp[14];
    sp[66] = sp[64] * sp[17];
    sp[67] = sp[64] * sp[18];
    sp[68] = w0_d0_c3 * sp[22];
    sp[69] = w0_d1_c3 * sp[26];
    sp[70] = sp[68] + sp[69];
    sp[71] = w0_d2_c3 * sp[30];
    sp[72] = sp[70] + sp[71];
    sp[73] = sp[72] * sp[22];
    sp[74] = sp[72] * sp[26];
    sp[75] = sp[72] * sp[30];
    sp[76] = sp[73] + sp[65];
    sp[77] = sp[74] + sp[66];
    sp[78] = sp[67] + sp[75];
    sp[79] = w0_d0_c3 * sp[34];
    sp[80] = w0_d1_c3 * sp[38];
    sp[81] = sp[79] + sp[80];
    sp[82] = w0_d2_c3 * sp[42];
    sp[83] = sp[81] + sp[82];
    sp[84] = sp[83] * sp[34];
    sp[85] = sp[83] * sp[38];
    sp[86] = sp[83] * sp[42];
    sp[87] = sp[76] + sp[84];
    sp[88] = sp[77] + sp[85];
    sp[89] = sp[78] + sp[86];
    sp[90] = J_c0 * tetrahedron_reference_edge_vectors[0][0];
    sp[91] = J_c1 * tetrahedron_reference_edge_vectors[0][1];
    sp[92] = sp[90] + sp[91];
    sp[93] = J_c2 * tetrahedron_reference_edge_vectors[0][2];
    sp[94] = sp[92] + sp[93];
    sp[95] = sp[94] * sp[94];
    sp[96] = tetrahedron_reference_edge_vectors[0][0] * J_c3;
    sp[97] = tetrahedron_reference_edge_vectors[0][1] * J_c4;
    sp[98] = sp[96] + sp[97];
    sp[99] = tetrahedron_reference_edge_vectors[0][2] * J_c5;
    sp[100] = sp[98] + sp[99];
    sp[101] = sp[100] * sp[100];
    sp[102] = sp[95] + sp[101];
    sp[103] = tetrahedron_reference_edge_vectors[0][0] * J_c6;
    sp[104] = tetrahedron_reference_edge_vectors[0][1] * J_c7;
    sp[105] = sp[103] + sp[104];
    sp[106] = tetrahedron_reference_edge_vectors[0][2] * J_c8;
    sp[107] = sp[105] + sp[106];
    sp[108] = sp[107] * sp[107];
    sp[109] = sp[102] + sp[108];
    sp[110] = std::sqrt(sp[109]);
    sp[111] = J_c0 * tetrahedron_reference_edge_vectors[5][0];
    sp[112] = J_c1 * tetrahedron_reference_edge_vectors[5][1];
    sp[113] = sp[111] + sp[112];
    sp[114] = J_c2 * tetrahedron_reference_edge_vectors[5][2];
    sp[115] = sp[113] + sp[114];
    sp[116] = sp[115] * sp[115];
    sp[117] = J_c3 * tetrahedron_reference_edge_vectors[5][0];
    sp[118] = J_c4 * tetrahedron_reference_edge_vectors[5][1];
    sp[119] = sp[117] + sp[118];
    sp[120] = J_c5 * tetrahedron_reference_edge_vectors[5][2];
    sp[121] = sp[119] + sp[120];
    sp[122] = sp[121] * sp[121];
    sp[123] = sp[116] + sp[122];
    sp[124] = J_c6 * tetrahedron_reference_edge_vectors[5][0];
    sp[125] = J_c7 * tetrahedron_reference_edge_vectors[5][1];
    sp[126] = sp[124] + sp[125];
    sp[127] = J_c8 * tetrahedron_reference_edge_vectors[5][2];
    sp[128] = sp[126] + sp[127];
    sp[129] = sp[128] * sp[128];
    sp[130] = sp[123] + sp[129];
    sp[131] = std::sqrt(sp[130]);
    sp[132] = sp[110] * sp[131];
    sp[133] = J_c0 * tetrahedron_reference_edge_vectors[2][0];
    sp[134] = J_c1 * tetrahedron_reference_edge_vectors[2][1];
    sp[135] = sp[133] + sp[134];
    sp[136] = J_c2 * tetrahedron_reference_edge_vectors[2][2];
    sp[137] = sp[135] + sp[136];
    sp[138] = sp[137] * sp[137];
    sp[139] = J_c3 * tetrahedron_reference_edge_vectors[2][0];
    sp[140] = J_c4 * tetrahedron_reference_edge_vectors[2][1];
    sp[141] = sp[139] + sp[140];
    sp[142] = J_c5 * tetrahedron_reference_edge_vectors[2][2];
    sp[143] = sp[141] + sp[142];
    sp[144] = sp[143] * sp[143];
    sp[145] = sp[138] + sp[144];
    sp[146] = J_c6 * tetrahedron_reference_edge_vectors[2][0];
    sp[147] = J_c7 * tetrahedron_reference_edge_vectors[2][1];
    sp[148] = sp[146] + sp[147];
    sp[149] = J_c8 * tetrahedron_reference_edge_vectors[2][2];
    sp[150] = sp[148] + sp[149];
    sp[151] = sp[150] * sp[150];
    sp[152] = sp[145] + sp[151];
    sp[153] = std::sqrt(sp[152]);
    sp[154] = J_c0 * tetrahedron_reference_edge_vectors[3][0];
    sp[155] = J_c1 * tetrahedron_reference_edge_vectors[3][1];
    sp[156] = sp[154] + sp[155];
    sp[157] = J_c2 * tetrahedron_reference_edge_vectors[3][2];
    sp[158] = sp[156] + sp[157];
    sp[159] = sp[158] * sp[158];
    sp[160] = J_c3 * tetrahedron_reference_edge_vectors[3][0];
    sp[161] = J_c4 * tetrahedron_reference_edge_vectors[3][1];
    sp[162] = sp[160] + sp[161];
    sp[163] = J_c5 * tetrahedron_reference_edge_vectors[3][2];
    sp[164] = sp[162] + sp[163];
    sp[165] = sp[164] * sp[164];
    sp[166] = sp[159] + sp[165];
    sp[167] = J_c6 * tetrahedron_reference_edge_vectors[3][0];
    sp[168] = J_c7 * tetrahedron_reference_edge_vectors[3][1];
    sp[169] = sp[167] + sp[168];
    sp[170] = J_c8 * tetrahedron_reference_edge_vectors[3][2];
    sp[171] = sp[169] + sp[170];
    sp[172] = sp[171] * sp[171];
    sp[173] = sp[166] + sp[172];
    sp[174] = std::sqrt(sp[173]);
    sp[175] = sp[153] * sp[174];
    sp[176] = J_c0 * tetrahedron_reference_edge_vectors[1][0];
    sp[177] = J_c1 * tetrahedron_reference_edge_vectors[1][1];
    sp[178] = sp[176] + sp[177];
    sp[179] = J_c2 * tetrahedron_reference_edge_vectors[1][2];
    sp[180] = sp[178] + sp[179];
    sp[181] = sp[180] * sp[180];
    sp[182] = J_c3 * tetrahedron_reference_edge_vectors[1][0];
    sp[183] = J_c4 * tetrahedron_reference_edge_vectors[1][1];
    sp[184] = sp[182] + sp[183];
    sp[185] = J_c5 * tetrahedron_reference_edge_vectors[1][2];
    sp[186] = sp[184] + sp[185];
    sp[187] = sp[186] * sp[186];
    sp[188] = sp[181] + sp[187];
    sp[189] = tetrahedron_reference_edge_vectors[1][0] * J_c6;
    sp[190] = tetrahedron_reference_edge_vectors[1][1] * J_c7;
    sp[191] = sp[189] + sp[190];
    sp[192] = tetrahedron_reference_edge_vectors[1][2] * J_c8;
    sp[193] = sp[191] + sp[192];
    sp[194] = sp[193] * sp[193];
    sp[195] = sp[188] + sp[194];
    sp[196] = std::sqrt(sp[195]);
    sp[197] = J_c0 * tetrahedron_reference_edge_vectors[4][0];
    sp[198] = J_c1 * tetrahedron_reference_edge_vectors[4][1];
    sp[199] = sp[197] + sp[198];
    sp[200] = J_c2 * tetrahedron_reference_edge_vectors[4][2];
    sp[201] = sp[199] + sp[200];
    sp[202] = sp[201] * sp[201];
    sp[203] = J_c3 * tetrahedron_reference_edge_vectors[4][0];
    sp[204] = J_c4 * tetrahedron_reference_edge_vectors[4][1];
    sp[205] = sp[203] + sp[204];
    sp[206] = J_c5 * tetrahedron_reference_edge_vectors[4][2];
    sp[207] = sp[205] + sp[206];
    sp[208] = sp[207] * sp[207];
    sp[209] = sp[202] + sp[208];
    sp[210] = J_c6 * tetrahedron_reference_edge_vectors[4][0];
    sp[211] = J_c7 * tetrahedron_reference_edge_vectors[4][1];
    sp[212] = sp[210] + sp[211];
    sp[213] = J_c8 * tetrahedron_reference_edge_vectors[4][2];
    sp[214] = sp[212] + sp[213];
    sp[215] = sp[214] * sp[214];
    sp[216] = sp[209] + sp[215];
    sp[217] = std::sqrt(sp[216]);
    sp[218] = sp[196] * sp[217];
    sp[219] = sp[175] + sp[218];
    sp[220] = sp[219] + sp[132];
    sp[221] = -1 * sp[132] + sp[220] / 2;
    sp[222] = -1 * sp[218] + sp[220] / 2;
    sp[223] = -1 * sp[175] + sp[220] / 2;
    sp[224] = sp[223] * (sp[220] / 2);
    sp[225] = sp[222] * sp[224];
    sp[226] = sp[221] * sp[225];
    sp[227] = std::sqrt(sp[226]);
    sp[228] = tetrahedron_reference_cell_volume * sp[13];
    sp[229] = std::abs(sp[228]);
    sp[230] = sp[227] / (6.0 * sp[229]);
    sp[231] = 2.0 * sp[230] * (2.0 * sp[230]);
    sp[232] = sp[231] / w[6][0];
    sp[233] = sp[232] * w[8][0];
    sp[234] = sp[87] * sp[233];
    sp[235] = sp[88] * sp[233];
    sp[236] = sp[89] * sp[233];
    sp[237] = w0_d0_c0 * sp[22];
    sp[238] = w0_d1_c0 * sp[26];
    sp[239] = sp[237] + sp[238];
    sp[240] = w0_d2_c0 * sp[30];
    sp[241] = sp[239] + sp[240];
    sp[242] = w0_d0_c0 * sp[34];
    sp[243] = w0_d1_c0 * sp[38];
    sp[244] = sp[242] + sp[243];
    sp[245] = w0_d2_c0 * sp[42];
    sp[246] = sp[244] + sp[245];
    sp[247] = w0_d0_c1 * sp[14];
    sp[248] = w0_d1_c1 * sp[17];
    sp[249] = sp[247] + sp[248];
    sp[250] = w0_d2_c1 * sp[18];
    sp[251] = sp[249] + sp[250];
    sp[252] = w0_d0_c1 * sp[34];
    sp[253] = w0_d1_c1 * sp[38];
    sp[254] = sp[252] + sp[253];
    sp[255] = w0_d2_c1 * sp[42];
    sp[256] = sp[254] + sp[255];
    sp[257] = w0_d0_c2 * sp[14];
    sp[258] = w0_d1_c2 * sp[17];
    sp[259] = sp[257] + sp[258];
    sp[260] = w0_d2_c2 * sp[18];
    sp[261] = sp[259] + sp[260];
    sp[262] = w0_d0_c2 * sp[22];
    sp[263] = w0_d1_c2 * sp[26];
    sp[264] = sp[262] + sp[263];
    sp[265] = w0_d2_c2 * sp[30];
    sp[266] = sp[264] + sp[265];
    sp[267] = sp[47] * w[5][0];
    sp[268] = sp[241] * w[5][0];
    sp[269] = sp[246] * w[5][0];
    sp[270] = sp[251] * w[5][0];
    sp[271] = sp[52] * w[5][0];
    sp[272] = sp[256] * w[5][0];
    sp[273] = sp[261] * w[5][0];
    sp[274] = sp[266] * w[5][0];
    sp[275] = sp[58] * w[5][0];
    sp[276] = sp[14] + sp[14];
    sp[277] = sp[17] + sp[17];
    sp[278] = sp[18] + sp[18];
    sp[279] = sp[47] + sp[47];
    sp[280] = 0.5 * sp[279] * (0.5 * sp[276]);
    sp[281] = 0.5 * sp[279] * (0.5 * sp[277]);
    sp[282] = 0.5 * sp[279] * (0.5 * sp[278]);
    sp[283] = sp[251] + sp[241];
    sp[284] = 0.5 * sp[283] * (0.5 * sp[22]);
    sp[285] = 0.5 * sp[283] * (0.5 * sp[26]);
    sp[286] = 0.5 * sp[283] * (0.5 * sp[30]);
    sp[287] = 0.5 * sp[283] * (0.5 * sp[14]);
    sp[288] = 0.5 * sp[283] * (0.5 * sp[17]);
    sp[289] = 0.5 * sp[283] * (0.5 * sp[18]);
    sp[290] = sp[280] + sp[284];
    sp[291] = sp[281] + sp[285];
    sp[292] = sp[282] + sp[286];
    sp[293] = sp[246] + sp[261];
    sp[294] = 0.5 * sp[293] * (0.5 * sp[34]);
    sp[295] = 0.5 * sp[293] * (0.5 * sp[38]);
    sp[296] = 0.5 * sp[293] * (0.5 * sp[42]);
    sp[297] = 0.5 * sp[293] * (0.5 * sp[14]);
    sp[298] = 0.5 * sp[293] * (0.5 * sp[17]);
    sp[299] = 0.5 * sp[293] * (0.5 * sp[18]);
    sp[300] = sp[290] + sp[294];
    sp[301] = sp[291] + sp[295];
    sp[302] = sp[292] + sp[296];
    sp[303] = sp[22] + sp[22];
    sp[304] = sp[26] + sp[26];
    sp[305] = sp[30] + sp[30];
    sp[306] = sp[52] + sp[52];
    sp[307] = 0.5 * sp[306] * (0.5 * sp[303]);
    sp[308] = 0.5 * sp[306] * (0.5 * sp[304]);
    sp[309] = 0.5 * sp[306] * (0.5 * sp[305]);
    sp[310] = sp[307] + sp[287];
    sp[311] = sp[308] + sp[288];
    sp[312] = sp[309] + sp[289];
    sp[313] = sp[256] + sp[266];
    sp[314] = 0.5 * sp[313] * (0.5 * sp[34]);
    sp[315] = 0.5 * sp[313] * (0.5 * sp[38]);
    sp[316] = 0.5 * sp[313] * (0.5 * sp[42]);
    sp[317] = 0.5 * sp[313] * (0.5 * sp[22]);
    sp[318] = 0.5 * sp[313] * (0.5 * sp[26]);
    sp[319] = 0.5 * sp[313] * (0.5 * sp[30]);
    sp[320] = sp[310] + sp[314];
    sp[321] = sp[311] + sp[315];
    sp[322] = sp[312] + sp[316];
    sp[323] = sp[300] + sp[284];
    sp[324] = sp[301] + sp[285];
    sp[325] = sp[302] + sp[286];
    sp[326] = sp[320] + sp[287];
    sp[327] = sp[321] + sp[288];
    sp[328] = sp[322] + sp[289];
    sp[329] = sp[317] + sp[297];
    sp[330] = sp[318] + sp[298];
    sp[331] = sp[299] + sp[319];
    sp[332] = sp[34] + sp[34];
    sp[333] = sp[38] + sp[38];
    sp[334] = sp[42] + sp[42];
    sp[335] = sp[58] + sp[58];
    sp[336] = 0.5 * sp[335] * (0.5 * sp[332]);
    sp[337] = 0.5 * sp[335] * (0.5 * sp[333]);
    sp[338] = 0.5 * sp[335] * (0.5 * sp[334]);
    sp[339] = sp[329] + sp[336];
    sp[340] = sp[330] + sp[337];
    sp[341] = sp[331] + sp[338];
    sp[342] = sp[323] + sp[294];
    sp[343] = sp[324] + sp[295];
    sp[344] = sp[325] + sp[296];
    sp[345] = sp[326] + sp[314];
    sp[346] = sp[327] + sp[315];
    sp[347] = sp[328] + sp[316];
    sp[348] = sp[339] + sp[329];
    sp[349] = sp[340] + sp[330];
    sp[350] = sp[341] + sp[331];
    sp[351] = sp[342] * (2.0 * w[6][0]);
    sp[352] = sp[343] * (2.0 * w[6][0]);
    sp[353] = sp[344] * (2.0 * w[6][0]);
    sp[354] = sp[345] * (2.0 * w[6][0]);
    sp[355] = sp[346] * (2.0 * w[6][0]);
    sp[356] = sp[347] * (2.0 * w[6][0]);
    sp[357] = sp[348] * (2.0 * w[6][0]);
    sp[358] = sp[349] * (2.0 * w[6][0]);
    sp[359] = sp[350] * (2.0 * w[6][0]);
    sp[360] = std::abs(sp[13]);
    sp[361] = -1 * sp[59] * sp[360];
    sp[362] = sp[234] * sp[360];
    sp[363] = sp[235] * sp[360];
    sp[364] = sp[236] * sp[360];
    alignas(32) double BF0[2] = {};
    alignas(32) double BF1[4] = {};
    alignas(32) double BF2[2] = {};
    alignas(32) double BF3[2] = {};
    alignas(32) double BF4[2] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[2] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[4] = {};
    alignas(32) double BF10[2] = {};
    alignas(32) double BF11[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w0_c3 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c3 += w[0][ic + 12] * FE31_C0_Q4[0][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c0 += w[2][ic] * FE31_C0_Q4[0][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c0 += w[0][ic] * FE31_C0_Q4[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c0 += w[1][ic] * FE31_C0_Q4[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c1 += w[2][ic + 4] * FE31_C0_Q4[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c1 += w[0][ic + 4] * FE31_C0_Q4[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c1 += w[1][ic + 4] * FE31_C0_Q4[0][iq][ic];
        double w2_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c2 += w[2][ic + 8] * FE31_C0_Q4[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c2 += w[0][ic + 8] * FE31_C0_Q4[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c2 += w[1][ic + 8] * FE31_C0_Q4[0][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w3_c0 += w[3][ic] * FE31_C0_Q4[0][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w3_c1 += w[3][ic + 4] * FE31_C0_Q4[0][iq][ic];
        double w3_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w3_c2 += w[3][ic + 8] * FE31_C0_Q4[0][iq][ic];
        alignas(32) double sv4[123];
        sv4[0] = w0_c3 * sp[14];
        sv4[1] = w0_c3 * sp[17];
        sv4[2] = w0_c3 * sp[18];
        sv4[3] = w0_c3 * sp[22];
        sv4[4] = w0_c3 * sp[26];
        sv4[5] = w0_c3 * sp[30];
        sv4[6] = w0_c3 * sp[34];
        sv4[7] = w0_c3 * sp[38];
        sv4[8] = w0_c3 * sp[42];
        sv4[9] = 3 * w0_c0 + -1 * (4 * w1_c0);
        sv4[10] = w2_c0 + sv4[9];
        sv4[11] = sv4[10] / (2 * w[7][0]);
        sv4[12] = 3 * w0_c1 + -1 * (4 * w1_c1);
        sv4[13] = w2_c1 + sv4[12];
        sv4[14] = sv4[13] / (2 * w[7][0]);
        sv4[15] = 3 * w0_c2 + -1 * (4 * w1_c2);
        sv4[16] = w2_c2 + sv4[15];
        sv4[17] = sv4[16] / (2 * w[7][0]);
        sv4[18] = sv4[11] * w[5][0];
        sv4[19] = sv4[14] * w[5][0];
        sv4[20] = sv4[17] * w[5][0];
        sv4[21] = w0_c0 + -1 * w3_c0;
        sv4[22] = sv4[21] * sp[47];
        sv4[23] = w0_c1 + -1 * w3_c1;
        sv4[24] = sv4[23] * sp[241];
        sv4[25] = sv4[22] + sv4[24];
        sv4[26] = w0_c2 + -1 * w3_c2;
        sv4[27] = sv4[26] * sp[246];
        sv4[28] = sv4[25] + sv4[27];
        sv4[29] = sv4[21] * sp[251];
        sv4[30] = sv4[23] * sp[52];
        sv4[31] = sv4[29] + sv4[30];
        sv4[32] = sv4[26] * sp[256];
        sv4[33] = sv4[31] + sv4[32];
        sv4[34] = sv4[21] * sp[261];
        sv4[35] = sv4[23] * sp[266];
        sv4[36] = sv4[34] + sv4[35];
        sv4[37] = sv4[26] * sp[58];
        sv4[38] = sv4[36] + sv4[37];
        sv4[39] = sv4[28] * w[5][0];
        sv4[40] = sv4[33] * w[5][0];
        sv4[41] = sv4[38] * w[5][0];
        sv4[42] = sv4[39] + sv4[18];
        sv4[43] = sv4[40] + sv4[19];
        sv4[44] = sv4[41] + sv4[20];
        sv4[45] = sv4[21] * sp[14];
        sv4[46] = sv4[21] * sp[17];
        sv4[47] = sv4[21] * sp[18];
        sv4[48] = sv4[23] * sp[22];
        sv4[49] = sv4[23] * sp[26];
        sv4[50] = sv4[23] * sp[30];
        sv4[51] = sv4[48] + sv4[45];
        sv4[52] = sv4[49] + sv4[46];
        sv4[53] = sv4[47] + sv4[50];
        sv4[54] = sv4[26] * sp[34];
        sv4[55] = sv4[26] * sp[38];
        sv4[56] = sv4[26] * sp[42];
        sv4[57] = sv4[51] + sv4[54];
        sv4[58] = sv4[52] + sv4[55];
        sv4[59] = sv4[53] + sv4[56];
        sv4[60] = sv4[21] * sp[267];
        sv4[61] = sv4[23] * sp[268];
        sv4[62] = sv4[60] + sv4[61];
        sv4[63] = sv4[26] * sp[269];
        sv4[64] = sv4[62] + sv4[63];
        sv4[65] = sv4[64] * sv4[57];
        sv4[66] = sv4[64] * sv4[58];
        sv4[67] = sv4[64] * sv4[59];
        sv4[68] = sv4[21] * sp[270];
        sv4[69] = sv4[23] * sp[271];
        sv4[70] = sv4[68] + sv4[69];
        sv4[71] = sv4[26] * sp[272];
        sv4[72] = sv4[70] + sv4[71];
        sv4[73] = sv4[72] * sv4[57];
        sv4[74] = sv4[72] * sv4[58];
        sv4[75] = sv4[72] * sv4[59];
        sv4[76] = sv4[21] * sp[273];
        sv4[77] = sv4[23] * sp[274];
        sv4[78] = sv4[76] + sv4[77];
        sv4[79] = sv4[26] * sp[275];
        sv4[80] = sv4[78] + sv4[79];
        sv4[81] = sv4[80] * sv4[57];
        sv4[82] = sv4[80] * sv4[58];
        sv4[83] = sv4[80] * sv4[59];
        sv4[84] = sv4[65] * w[4][0];
        sv4[85] = sv4[66] * w[4][0];
        sv4[86] = sv4[67] * w[4][0];
        sv4[87] = sv4[73] * w[4][0];
        sv4[88] = sv4[74] * w[4][0];
        sv4[89] = sv4[75] * w[4][0];
        sv4[90] = sv4[81] * w[4][0];
        sv4[91] = sv4[82] * w[4][0];
        sv4[92] = sv4[83] * w[4][0];
        sv4[93] = -1 * sv4[0] + sv4[84];
        sv4[94] = -1 * sv4[1] + sv4[85];
        sv4[95] = -1 * sv4[2] + sv4[86];
        sv4[96] = -1 * sv4[3] + sv4[87];
        sv4[97] = -1 * sv4[4] + sv4[88];
        sv4[98] = -1 * sv4[5] + sv4[89];
        sv4[99] = -1 * sv4[6] + sv4[90];
        sv4[100] = -1 * sv4[7] + sv4[91];
        sv4[101] = -1 * sv4[8] + sv4[92];
        sv4[102] = sv4[93] + sp[351];
        sv4[103] = sv4[94] + sp[352];
        sv4[104] = sv4[95] + sp[353];
        sv4[105] = sv4[96] + sp[354];
        sv4[106] = sv4[97] + sp[355];
        sv4[107] = sv4[98] + sp[356];
        sv4[108] = sv4[99] + sp[357];
        sv4[109] = sv4[100] + sp[358];
        sv4[110] = sv4[101] + sp[359];
        sv4[111] = sv4[102] * sp[360];
        sv4[112] = sv4[103] * sp[360];
        sv4[113] = sv4[104] * sp[360];
        sv4[114] = sv4[105] * sp[360];
        sv4[115] = sv4[106] * sp[360];
        sv4[116] = sv4[107] * sp[360];
        sv4[117] = sv4[108] * sp[360];
        sv4[118] = sv4[109] * sp[360];
        sv4[119] = sv4[110] * sp[360];
        sv4[120] = sv4[42] * sp[360];
        sv4[121] = sv4[43] * sp[360];
        sv4[122] = sv4[44] * sp[360];
        const double fw0 = sv4[111] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF0[i] += fw0 * FE31_C0_D001_Q4[0][0][i];
        const double fw1 = sv4[120] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF1[i] += fw1 * FE31_C0_Q4[0][iq][i];
        const double fw2 = sv4[112] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF2[i] += fw2 * FE31_C0_D001_Q4[0][0][i];
        const double fw3 = sv4[113] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF3[i] += fw3 * FE31_C0_D001_Q4[0][0][i];
        const double fw4 = sv4[114] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF4[i] += fw4 * FE31_C0_D001_Q4[0][0][i];
        const double fw5 = sv4[121] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE31_C0_Q4[0][iq][i];
        const double fw6 = sv4[115] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE31_C0_D001_Q4[0][0][i];
        const double fw7 = sv4[116] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF7[i] += fw7 * FE31_C0_D001_Q4[0][0][i];
        const double fw8 = sv4[117] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE31_C0_D001_Q4[0][0][i];
        const double fw9 = sv4[122] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF9[i] += fw9 * FE31_C0_Q4[0][iq][i];
        const double fw10 = sv4[118] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF10[i] += fw10 * FE31_C0_D001_Q4[0][0][i];
        const double fw11 = sv4[119] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF11[i] += fw11 * FE31_C0_D001_Q4[0][0][i];
    }
    std::fill(&A[0], &A[12], 0.0);
    A[12] = -0.1666666666666667 * sp[362] + 0.04166666666666644 * sp[361] + -0.1666666666666667 * sp[363] + -0.1666666666666667 * sp[364];
    A[13] = 0.1666666666666667 * sp[362] + 0.04166666666666674 * sp[361];
    A[14] = 0.04166666666666675 * sp[361] + 0.1666666666666667 * sp[363];
    A[15] = 0.04166666666666674 * sp[361] + 0.1666666666666667 * sp[364];
    std::fill(&A[16], &A[20], 0.0);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 4; ++i)
        A[i] += BF1[i];
    for (int i = 0; i < 2; ++i)
        A[DM0[i]] += BF2[i];
    for (int i = 0; i < 2; ++i)
        A[DM1[i]] += BF3[i];
    for (int i = 0; i < 2; ++i)
        A[i + 4] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[i + 4] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[DM2[i]] += BF6[i];
    for (int i = 0; i < 2; ++i)
        A[DM3[i]] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[i + 8] += BF8[i];
    for (int i = 0; i < 4; ++i)
        A[i + 8] += BF9[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF10[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF11[i];
  }

};


class fluid3dp1p1_cell_integral_0_214: public ufc::cell_integral
{
public:

  fluid3dp1p1_cell_integral_0_214() : ufc::cell_integral()
  {

  }

  ~fluid3dp1p1_cell_integral_0_214() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 2
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           2
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.04166666666666666, 0.04166666666666666, 0.04166666666666666, 0.04166666666666666 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE31_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE31_C0_Q4[1][4][4] =
        { { { 0.1381966011250091, 0.585410196624969, 0.138196601125011, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.585410196624969, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.138196601125011, 0.585410196624969 },
            { 0.5854101966249672, 0.1381966011250109, 0.138196601125011, 0.138196601125011 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE31_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE31_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE31_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE31_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE31_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE31_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE31_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE31_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE31_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE31_C0_D001_Q4[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE31_C0_D001_Q4[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE31_C0_D001_Q4[0][0][0] + w[0][2] * FE31_C0_D001_Q4[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE31_C0_D001_Q4[0][0][0] + w[0][3] * FE31_C0_D001_Q4[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE31_C0_D001_Q4[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE31_C0_D001_Q4[0][0][0] + w[0][6] * FE31_C0_D001_Q4[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE31_C0_D001_Q4[0][0][0] + w[0][7] * FE31_C0_D001_Q4[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE31_C0_D001_Q4[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE31_C0_D001_Q4[0][0][0] + w[0][10] * FE31_C0_D001_Q4[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE31_C0_D001_Q4[0][0][0] + w[0][11] * FE31_C0_D001_Q4[0][0][1];
    double w0_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c3 += w[0][ic + 12] * FE31_C0_D001_Q4[0][0][ic];
    const double w0_d1_c3 = w[0][12] * FE31_C0_D001_Q4[0][0][0] + w[0][14] * FE31_C0_D001_Q4[0][0][1];
    const double w0_d2_c3 = w[0][12] * FE31_C0_D001_Q4[0][0][0] + w[0][15] * FE31_C0_D001_Q4[0][0][1];
    alignas(32) double sp[365];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = w0_d0_c0 * sp[14];
    sp[44] = w0_d1_c0 * sp[17];
    sp[45] = sp[43] + sp[44];
    sp[46] = w0_d2_c0 * sp[18];
    sp[47] = sp[45] + sp[46];
    sp[48] = w0_d0_c1 * sp[22];
    sp[49] = w0_d1_c1 * sp[26];
    sp[50] = sp[48] + sp[49];
    sp[51] = w0_d2_c1 * sp[30];
    sp[52] = sp[50] + sp[51];
    sp[53] = sp[47] + sp[52];
    sp[54] = w0_d0_c2 * sp[34];
    sp[55] = w0_d1_c2 * sp[38];
    sp[56] = sp[54] + sp[55];
    sp[57] = w0_d2_c2 * sp[42];
    sp[58] = sp[56] + sp[57];
    sp[59] = sp[53] + sp[58];
    sp[60] = w0_d0_c3 * sp[14];
    sp[61] = w0_d1_c3 * sp[17];
    sp[62] = sp[60] + sp[61];
    sp[63] = w0_d2_c3 * sp[18];
    sp[64] = sp[62] + sp[63];
    sp[65] = sp[64] * sp[14];
    sp[66] = sp[64] * sp[17];
    sp[67] = sp[64] * sp[18];
    sp[68] = w0_d0_c3 * sp[22];
    sp[69] = w0_d1_c3 * sp[26];
    sp[70] = sp[68] + sp[69];
    sp[71] = w0_d2_c3 * sp[30];
    sp[72] = sp[70] + sp[71];
    sp[73] = sp[72] * sp[22];
    sp[74] = sp[72] * sp[26];
    sp[75] = sp[72] * sp[30];
    sp[76] = sp[73] + sp[65];
    sp[77] = sp[74] + sp[66];
    sp[78] = sp[67] + sp[75];
    sp[79] = w0_d0_c3 * sp[34];
    sp[80] = w0_d1_c3 * sp[38];
    sp[81] = sp[79] + sp[80];
    sp[82] = w0_d2_c3 * sp[42];
    sp[83] = sp[81] + sp[82];
    sp[84] = sp[83] * sp[34];
    sp[85] = sp[83] * sp[38];
    sp[86] = sp[83] * sp[42];
    sp[87] = sp[76] + sp[84];
    sp[88] = sp[77] + sp[85];
    sp[89] = sp[78] + sp[86];
    sp[90] = J_c0 * tetrahedron_reference_edge_vectors[0][0];
    sp[91] = J_c1 * tetrahedron_reference_edge_vectors[0][1];
    sp[92] = sp[90] + sp[91];
    sp[93] = J_c2 * tetrahedron_reference_edge_vectors[0][2];
    sp[94] = sp[92] + sp[93];
    sp[95] = sp[94] * sp[94];
    sp[96] = tetrahedron_reference_edge_vectors[0][0] * J_c3;
    sp[97] = tetrahedron_reference_edge_vectors[0][1] * J_c4;
    sp[98] = sp[96] + sp[97];
    sp[99] = tetrahedron_reference_edge_vectors[0][2] * J_c5;
    sp[100] = sp[98] + sp[99];
    sp[101] = sp[100] * sp[100];
    sp[102] = sp[95] + sp[101];
    sp[103] = tetrahedron_reference_edge_vectors[0][0] * J_c6;
    sp[104] = tetrahedron_reference_edge_vectors[0][1] * J_c7;
    sp[105] = sp[103] + sp[104];
    sp[106] = tetrahedron_reference_edge_vectors[0][2] * J_c8;
    sp[107] = sp[105] + sp[106];
    sp[108] = sp[107] * sp[107];
    sp[109] = sp[102] + sp[108];
    sp[110] = std::sqrt(sp[109]);
    sp[111] = J_c0 * tetrahedron_reference_edge_vectors[5][0];
    sp[112] = J_c1 * tetrahedron_reference_edge_vectors[5][1];
    sp[113] = sp[111] + sp[112];
    sp[114] = J_c2 * tetrahedron_reference_edge_vectors[5][2];
    sp[115] = sp[113] + sp[114];
    sp[116] = sp[115] * sp[115];
    sp[117] = J_c3 * tetrahedron_reference_edge_vectors[5][0];
    sp[118] = J_c4 * tetrahedron_reference_edge_vectors[5][1];
    sp[119] = sp[117] + sp[118];
    sp[120] = J_c5 * tetrahedron_reference_edge_vectors[5][2];
    sp[121] = sp[119] + sp[120];
    sp[122] = sp[121] * sp[121];
    sp[123] = sp[116] + sp[122];
    sp[124] = J_c6 * tetrahedron_reference_edge_vectors[5][0];
    sp[125] = J_c7 * tetrahedron_reference_edge_vectors[5][1];
    sp[126] = sp[124] + sp[125];
    sp[127] = J_c8 * tetrahedron_reference_edge_vectors[5][2];
    sp[128] = sp[126] + sp[127];
    sp[129] = sp[128] * sp[128];
    sp[130] = sp[123] + sp[129];
    sp[131] = std::sqrt(sp[130]);
    sp[132] = sp[110] * sp[131];
    sp[133] = J_c0 * tetrahedron_reference_edge_vectors[2][0];
    sp[134] = J_c1 * tetrahedron_reference_edge_vectors[2][1];
    sp[135] = sp[133] + sp[134];
    sp[136] = J_c2 * tetrahedron_reference_edge_vectors[2][2];
    sp[137] = sp[135] + sp[136];
    sp[138] = sp[137] * sp[137];
    sp[139] = J_c3 * tetrahedron_reference_edge_vectors[2][0];
    sp[140] = J_c4 * tetrahedron_reference_edge_vectors[2][1];
    sp[141] = sp[139] + sp[140];
    sp[142] = J_c5 * tetrahedron_reference_edge_vectors[2][2];
    sp[143] = sp[141] + sp[142];
    sp[144] = sp[143] * sp[143];
    sp[145] = sp[138] + sp[144];
    sp[146] = J_c6 * tetrahedron_reference_edge_vectors[2][0];
    sp[147] = J_c7 * tetrahedron_reference_edge_vectors[2][1];
    sp[148] = sp[146] + sp[147];
    sp[149] = J_c8 * tetrahedron_reference_edge_vectors[2][2];
    sp[150] = sp[148] + sp[149];
    sp[151] = sp[150] * sp[150];
    sp[152] = sp[145] + sp[151];
    sp[153] = std::sqrt(sp[152]);
    sp[154] = J_c0 * tetrahedron_reference_edge_vectors[3][0];
    sp[155] = J_c1 * tetrahedron_reference_edge_vectors[3][1];
    sp[156] = sp[154] + sp[155];
    sp[157] = J_c2 * tetrahedron_reference_edge_vectors[3][2];
    sp[158] = sp[156] + sp[157];
    sp[159] = sp[158] * sp[158];
    sp[160] = J_c3 * tetrahedron_reference_edge_vectors[3][0];
    sp[161] = J_c4 * tetrahedron_reference_edge_vectors[3][1];
    sp[162] = sp[160] + sp[161];
    sp[163] = J_c5 * tetrahedron_reference_edge_vectors[3][2];
    sp[164] = sp[162] + sp[163];
    sp[165] = sp[164] * sp[164];
    sp[166] = sp[159] + sp[165];
    sp[167] = J_c6 * tetrahedron_reference_edge_vectors[3][0];
    sp[168] = J_c7 * tetrahedron_reference_edge_vectors[3][1];
    sp[169] = sp[167] + sp[168];
    sp[170] = J_c8 * tetrahedron_reference_edge_vectors[3][2];
    sp[171] = sp[169] + sp[170];
    sp[172] = sp[171] * sp[171];
    sp[173] = sp[166] + sp[172];
    sp[174] = std::sqrt(sp[173]);
    sp[175] = sp[153] * sp[174];
    sp[176] = J_c0 * tetrahedron_reference_edge_vectors[1][0];
    sp[177] = J_c1 * tetrahedron_reference_edge_vectors[1][1];
    sp[178] = sp[176] + sp[177];
    sp[179] = J_c2 * tetrahedron_reference_edge_vectors[1][2];
    sp[180] = sp[178] + sp[179];
    sp[181] = sp[180] * sp[180];
    sp[182] = J_c3 * tetrahedron_reference_edge_vectors[1][0];
    sp[183] = J_c4 * tetrahedron_reference_edge_vectors[1][1];
    sp[184] = sp[182] + sp[183];
    sp[185] = J_c5 * tetrahedron_reference_edge_vectors[1][2];
    sp[186] = sp[184] + sp[185];
    sp[187] = sp[186] * sp[186];
    sp[188] = sp[181] + sp[187];
    sp[189] = tetrahedron_reference_edge_vectors[1][0] * J_c6;
    sp[190] = tetrahedron_reference_edge_vectors[1][1] * J_c7;
    sp[191] = sp[189] + sp[190];
    sp[192] = tetrahedron_reference_edge_vectors[1][2] * J_c8;
    sp[193] = sp[191] + sp[192];
    sp[194] = sp[193] * sp[193];
    sp[195] = sp[188] + sp[194];
    sp[196] = std::sqrt(sp[195]);
    sp[197] = J_c0 * tetrahedron_reference_edge_vectors[4][0];
    sp[198] = J_c1 * tetrahedron_reference_edge_vectors[4][1];
    sp[199] = sp[197] + sp[198];
    sp[200] = J_c2 * tetrahedron_reference_edge_vectors[4][2];
    sp[201] = sp[199] + sp[200];
    sp[202] = sp[201] * sp[201];
    sp[203] = J_c3 * tetrahedron_reference_edge_vectors[4][0];
    sp[204] = J_c4 * tetrahedron_reference_edge_vectors[4][1];
    sp[205] = sp[203] + sp[204];
    sp[206] = J_c5 * tetrahedron_reference_edge_vectors[4][2];
    sp[207] = sp[205] + sp[206];
    sp[208] = sp[207] * sp[207];
    sp[209] = sp[202] + sp[208];
    sp[210] = J_c6 * tetrahedron_reference_edge_vectors[4][0];
    sp[211] = J_c7 * tetrahedron_reference_edge_vectors[4][1];
    sp[212] = sp[210] + sp[211];
    sp[213] = J_c8 * tetrahedron_reference_edge_vectors[4][2];
    sp[214] = sp[212] + sp[213];
    sp[215] = sp[214] * sp[214];
    sp[216] = sp[209] + sp[215];
    sp[217] = std::sqrt(sp[216]);
    sp[218] = sp[196] * sp[217];
    sp[219] = sp[175] + sp[218];
    sp[220] = sp[219] + sp[132];
    sp[221] = -1 * sp[132] + sp[220] / 2;
    sp[222] = -1 * sp[218] + sp[220] / 2;
    sp[223] = -1 * sp[175] + sp[220] / 2;
    sp[224] = sp[223] * (sp[220] / 2);
    sp[225] = sp[222] * sp[224];
    sp[226] = sp[221] * sp[225];
    sp[227] = std::sqrt(sp[226]);
    sp[228] = tetrahedron_reference_cell_volume * sp[13];
    sp[229] = std::abs(sp[228]);
    sp[230] = sp[227] / (6.0 * sp[229]);
    sp[231] = 2.0 * sp[230] * (2.0 * sp[230]);
    sp[232] = sp[231] / w[6][0];
    sp[233] = sp[232] * w[8][0];
    sp[234] = sp[87] * sp[233];
    sp[235] = sp[88] * sp[233];
    sp[236] = sp[89] * sp[233];
    sp[237] = w0_d0_c0 * sp[22];
    sp[238] = w0_d1_c0 * sp[26];
    sp[239] = sp[237] + sp[238];
    sp[240] = w0_d2_c0 * sp[30];
    sp[241] = sp[239] + sp[240];
    sp[242] = w0_d0_c0 * sp[34];
    sp[243] = w0_d1_c0 * sp[38];
    sp[244] = sp[242] + sp[243];
    sp[245] = w0_d2_c0 * sp[42];
    sp[246] = sp[244] + sp[245];
    sp[247] = w0_d0_c1 * sp[14];
    sp[248] = w0_d1_c1 * sp[17];
    sp[249] = sp[247] + sp[248];
    sp[250] = w0_d2_c1 * sp[18];
    sp[251] = sp[249] + sp[250];
    sp[252] = w0_d0_c1 * sp[34];
    sp[253] = w0_d1_c1 * sp[38];
    sp[254] = sp[252] + sp[253];
    sp[255] = w0_d2_c1 * sp[42];
    sp[256] = sp[254] + sp[255];
    sp[257] = w0_d0_c2 * sp[14];
    sp[258] = w0_d1_c2 * sp[17];
    sp[259] = sp[257] + sp[258];
    sp[260] = w0_d2_c2 * sp[18];
    sp[261] = sp[259] + sp[260];
    sp[262] = w0_d0_c2 * sp[22];
    sp[263] = w0_d1_c2 * sp[26];
    sp[264] = sp[262] + sp[263];
    sp[265] = w0_d2_c2 * sp[30];
    sp[266] = sp[264] + sp[265];
    sp[267] = sp[47] * w[5][0];
    sp[268] = sp[241] * w[5][0];
    sp[269] = sp[246] * w[5][0];
    sp[270] = sp[251] * w[5][0];
    sp[271] = sp[52] * w[5][0];
    sp[272] = sp[256] * w[5][0];
    sp[273] = sp[261] * w[5][0];
    sp[274] = sp[266] * w[5][0];
    sp[275] = sp[58] * w[5][0];
    sp[276] = sp[14] + sp[14];
    sp[277] = sp[17] + sp[17];
    sp[278] = sp[18] + sp[18];
    sp[279] = sp[47] + sp[47];
    sp[280] = 0.5 * sp[279] * (0.5 * sp[276]);
    sp[281] = 0.5 * sp[279] * (0.5 * sp[277]);
    sp[282] = 0.5 * sp[279] * (0.5 * sp[278]);
    sp[283] = sp[251] + sp[241];
    sp[284] = 0.5 * sp[283] * (0.5 * sp[22]);
    sp[285] = 0.5 * sp[283] * (0.5 * sp[26]);
    sp[286] = 0.5 * sp[283] * (0.5 * sp[30]);
    sp[287] = 0.5 * sp[283] * (0.5 * sp[14]);
    sp[288] = 0.5 * sp[283] * (0.5 * sp[17]);
    sp[289] = 0.5 * sp[283] * (0.5 * sp[18]);
    sp[290] = sp[280] + sp[284];
    sp[291] = sp[281] + sp[285];
    sp[292] = sp[282] + sp[286];
    sp[293] = sp[246] + sp[261];
    sp[294] = 0.5 * sp[293] * (0.5 * sp[34]);
    sp[295] = 0.5 * sp[293] * (0.5 * sp[38]);
    sp[296] = 0.5 * sp[293] * (0.5 * sp[42]);
    sp[297] = 0.5 * sp[293] * (0.5 * sp[14]);
    sp[298] = 0.5 * sp[293] * (0.5 * sp[17]);
    sp[299] = 0.5 * sp[293] * (0.5 * sp[18]);
    sp[300] = sp[290] + sp[294];
    sp[301] = sp[291] + sp[295];
    sp[302] = sp[292] + sp[296];
    sp[303] = sp[22] + sp[22];
    sp[304] = sp[26] + sp[26];
    sp[305] = sp[30] + sp[30];
    sp[306] = sp[52] + sp[52];
    sp[307] = 0.5 * sp[306] * (0.5 * sp[303]);
    sp[308] = 0.5 * sp[306] * (0.5 * sp[304]);
    sp[309] = 0.5 * sp[306] * (0.5 * sp[305]);
    sp[310] = sp[307] + sp[287];
    sp[311] = sp[308] + sp[288];
    sp[312] = sp[309] + sp[289];
    sp[313] = sp[256] + sp[266];
    sp[314] = 0.5 * sp[313] * (0.5 * sp[34]);
    sp[315] = 0.5 * sp[313] * (0.5 * sp[38]);
    sp[316] = 0.5 * sp[313] * (0.5 * sp[42]);
    sp[317] = 0.5 * sp[313] * (0.5 * sp[22]);
    sp[318] = 0.5 * sp[313] * (0.5 * sp[26]);
    sp[319] = 0.5 * sp[313] * (0.5 * sp[30]);
    sp[320] = sp[310] + sp[314];
    sp[321] = sp[311] + sp[315];
    sp[322] = sp[312] + sp[316];
    sp[323] = sp[300] + sp[284];
    sp[324] = sp[301] + sp[285];
    sp[325] = sp[302] + sp[286];
    sp[326] = sp[320] + sp[287];
    sp[327] = sp[321] + sp[288];
    sp[328] = sp[322] + sp[289];
    sp[329] = sp[317] + sp[297];
    sp[330] = sp[318] + sp[298];
    sp[331] = sp[299] + sp[319];
    sp[332] = sp[34] + sp[34];
    sp[333] = sp[38] + sp[38];
    sp[334] = sp[42] + sp[42];
    sp[335] = sp[58] + sp[58];
    sp[336] = 0.5 * sp[335] * (0.5 * sp[332]);
    sp[337] = 0.5 * sp[335] * (0.5 * sp[333]);
    sp[338] = 0.5 * sp[335] * (0.5 * sp[334]);
    sp[339] = sp[329] + sp[336];
    sp[340] = sp[330] + sp[337];
    sp[341] = sp[331] + sp[338];
    sp[342] = sp[323] + sp[294];
    sp[343] = sp[324] + sp[295];
    sp[344] = sp[325] + sp[296];
    sp[345] = sp[326] + sp[314];
    sp[346] = sp[327] + sp[315];
    sp[347] = sp[328] + sp[316];
    sp[348] = sp[339] + sp[329];
    sp[349] = sp[340] + sp[330];
    sp[350] = sp[341] + sp[331];
    sp[351] = sp[342] * (2.0 * w[6][0]);
    sp[352] = sp[343] * (2.0 * w[6][0]);
    sp[353] = sp[344] * (2.0 * w[6][0]);
    sp[354] = sp[345] * (2.0 * w[6][0]);
    sp[355] = sp[346] * (2.0 * w[6][0]);
    sp[356] = sp[347] * (2.0 * w[6][0]);
    sp[357] = sp[348] * (2.0 * w[6][0]);
    sp[358] = sp[349] * (2.0 * w[6][0]);
    sp[359] = sp[350] * (2.0 * w[6][0]);
    sp[360] = std::abs(sp[13]);
    sp[361] = -1 * sp[59] * sp[360];
    sp[362] = sp[234] * sp[360];
    sp[363] = sp[235] * sp[360];
    sp[364] = sp[236] * sp[360];
    alignas(32) double BF0[2] = {};
    alignas(32) double BF1[4] = {};
    alignas(32) double BF2[2] = {};
    alignas(32) double BF3[2] = {};
    alignas(32) double BF4[2] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[2] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[4] = {};
    alignas(32) double BF10[2] = {};
    alignas(32) double BF11[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w0_c3 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c3 += w[0][ic + 12] * FE31_C0_Q4[0][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c0 += w[2][ic] * FE31_C0_Q4[0][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c0 += w[0][ic] * FE31_C0_Q4[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c0 += w[1][ic] * FE31_C0_Q4[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c1 += w[2][ic + 4] * FE31_C0_Q4[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c1 += w[0][ic + 4] * FE31_C0_Q4[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c1 += w[1][ic + 4] * FE31_C0_Q4[0][iq][ic];
        double w2_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c2 += w[2][ic + 8] * FE31_C0_Q4[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c2 += w[0][ic + 8] * FE31_C0_Q4[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c2 += w[1][ic + 8] * FE31_C0_Q4[0][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w3_c0 += w[3][ic] * FE31_C0_Q4[0][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w3_c1 += w[3][ic + 4] * FE31_C0_Q4[0][iq][ic];
        double w3_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w3_c2 += w[3][ic + 8] * FE31_C0_Q4[0][iq][ic];
        alignas(32) double sv4[123];
        sv4[0] = w0_c3 * sp[14];
        sv4[1] = w0_c3 * sp[17];
        sv4[2] = w0_c3 * sp[18];
        sv4[3] = w0_c3 * sp[22];
        sv4[4] = w0_c3 * sp[26];
        sv4[5] = w0_c3 * sp[30];
        sv4[6] = w0_c3 * sp[34];
        sv4[7] = w0_c3 * sp[38];
        sv4[8] = w0_c3 * sp[42];
        sv4[9] = 3 * w0_c0 + -1 * (4 * w1_c0);
        sv4[10] = w2_c0 + sv4[9];
        sv4[11] = sv4[10] / (2 * w[7][0]);
        sv4[12] = 3 * w0_c1 + -1 * (4 * w1_c1);
        sv4[13] = w2_c1 + sv4[12];
        sv4[14] = sv4[13] / (2 * w[7][0]);
        sv4[15] = 3 * w0_c2 + -1 * (4 * w1_c2);
        sv4[16] = w2_c2 + sv4[15];
        sv4[17] = sv4[16] / (2 * w[7][0]);
        sv4[18] = sv4[11] * w[5][0];
        sv4[19] = sv4[14] * w[5][0];
        sv4[20] = sv4[17] * w[5][0];
        sv4[21] = w0_c0 + -1 * w3_c0;
        sv4[22] = sv4[21] * sp[47];
        sv4[23] = w0_c1 + -1 * w3_c1;
        sv4[24] = sv4[23] * sp[241];
        sv4[25] = sv4[22] + sv4[24];
        sv4[26] = w0_c2 + -1 * w3_c2;
        sv4[27] = sv4[26] * sp[246];
        sv4[28] = sv4[25] + sv4[27];
        sv4[29] = sv4[21] * sp[251];
        sv4[30] = sv4[23] * sp[52];
        sv4[31] = sv4[29] + sv4[30];
        sv4[32] = sv4[26] * sp[256];
        sv4[33] = sv4[31] + sv4[32];
        sv4[34] = sv4[21] * sp[261];
        sv4[35] = sv4[23] * sp[266];
        sv4[36] = sv4[34] + sv4[35];
        sv4[37] = sv4[26] * sp[58];
        sv4[38] = sv4[36] + sv4[37];
        sv4[39] = sv4[28] * w[5][0];
        sv4[40] = sv4[33] * w[5][0];
        sv4[41] = sv4[38] * w[5][0];
        sv4[42] = sv4[39] + sv4[18];
        sv4[43] = sv4[40] + sv4[19];
        sv4[44] = sv4[41] + sv4[20];
        sv4[45] = sv4[21] * sp[14];
        sv4[46] = sv4[21] * sp[17];
        sv4[47] = sv4[21] * sp[18];
        sv4[48] = sv4[23] * sp[22];
        sv4[49] = sv4[23] * sp[26];
        sv4[50] = sv4[23] * sp[30];
        sv4[51] = sv4[48] + sv4[45];
        sv4[52] = sv4[49] + sv4[46];
        sv4[53] = sv4[47] + sv4[50];
        sv4[54] = sv4[26] * sp[34];
        sv4[55] = sv4[26] * sp[38];
        sv4[56] = sv4[26] * sp[42];
        sv4[57] = sv4[51] + sv4[54];
        sv4[58] = sv4[52] + sv4[55];
        sv4[59] = sv4[53] + sv4[56];
        sv4[60] = sv4[21] * sp[267];
        sv4[61] = sv4[23] * sp[268];
        sv4[62] = sv4[60] + sv4[61];
        sv4[63] = sv4[26] * sp[269];
        sv4[64] = sv4[62] + sv4[63];
        sv4[65] = sv4[64] * sv4[57];
        sv4[66] = sv4[64] * sv4[58];
        sv4[67] = sv4[64] * sv4[59];
        sv4[68] = sv4[21] * sp[270];
        sv4[69] = sv4[23] * sp[271];
        sv4[70] = sv4[68] + sv4[69];
        sv4[71] = sv4[26] * sp[272];
        sv4[72] = sv4[70] + sv4[71];
        sv4[73] = sv4[72] * sv4[57];
        sv4[74] = sv4[72] * sv4[58];
        sv4[75] = sv4[72] * sv4[59];
        sv4[76] = sv4[21] * sp[273];
        sv4[77] = sv4[23] * sp[274];
        sv4[78] = sv4[76] + sv4[77];
        sv4[79] = sv4[26] * sp[275];
        sv4[80] = sv4[78] + sv4[79];
        sv4[81] = sv4[80] * sv4[57];
        sv4[82] = sv4[80] * sv4[58];
        sv4[83] = sv4[80] * sv4[59];
        sv4[84] = sv4[65] * w[4][0];
        sv4[85] = sv4[66] * w[4][0];
        sv4[86] = sv4[67] * w[4][0];
        sv4[87] = sv4[73] * w[4][0];
        sv4[88] = sv4[74] * w[4][0];
        sv4[89] = sv4[75] * w[4][0];
        sv4[90] = sv4[81] * w[4][0];
        sv4[91] = sv4[82] * w[4][0];
        sv4[92] = sv4[83] * w[4][0];
        sv4[93] = -1 * sv4[0] + sv4[84];
        sv4[94] = -1 * sv4[1] + sv4[85];
        sv4[95] = -1 * sv4[2] + sv4[86];
        sv4[96] = -1 * sv4[3] + sv4[87];
        sv4[97] = -1 * sv4[4] + sv4[88];
        sv4[98] = -1 * sv4[5] + sv4[89];
        sv4[99] = -1 * sv4[6] + sv4[90];
        sv4[100] = -1 * sv4[7] + sv4[91];
        sv4[101] = -1 * sv4[8] + sv4[92];
        sv4[102] = sv4[93] + sp[351];
        sv4[103] = sv4[94] + sp[352];
        sv4[104] = sv4[95] + sp[353];
        sv4[105] = sv4[96] + sp[354];
        sv4[106] = sv4[97] + sp[355];
        sv4[107] = sv4[98] + sp[356];
        sv4[108] = sv4[99] + sp[357];
        sv4[109] = sv4[100] + sp[358];
        sv4[110] = sv4[101] + sp[359];
        sv4[111] = sv4[102] * sp[360];
        sv4[112] = sv4[103] * sp[360];
        sv4[113] = sv4[104] * sp[360];
        sv4[114] = sv4[105] * sp[360];
        sv4[115] = sv4[106] * sp[360];
        sv4[116] = sv4[107] * sp[360];
        sv4[117] = sv4[108] * sp[360];
        sv4[118] = sv4[109] * sp[360];
        sv4[119] = sv4[110] * sp[360];
        sv4[120] = sv4[42] * sp[360];
        sv4[121] = sv4[43] * sp[360];
        sv4[122] = sv4[44] * sp[360];
        const double fw0 = sv4[111] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF0[i] += fw0 * FE31_C0_D001_Q4[0][0][i];
        const double fw1 = sv4[120] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF1[i] += fw1 * FE31_C0_Q4[0][iq][i];
        const double fw2 = sv4[112] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF2[i] += fw2 * FE31_C0_D001_Q4[0][0][i];
        const double fw3 = sv4[113] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF3[i] += fw3 * FE31_C0_D001_Q4[0][0][i];
        const double fw4 = sv4[114] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF4[i] += fw4 * FE31_C0_D001_Q4[0][0][i];
        const double fw5 = sv4[121] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE31_C0_Q4[0][iq][i];
        const double fw6 = sv4[115] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE31_C0_D001_Q4[0][0][i];
        const double fw7 = sv4[116] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF7[i] += fw7 * FE31_C0_D001_Q4[0][0][i];
        const double fw8 = sv4[117] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE31_C0_D001_Q4[0][0][i];
        const double fw9 = sv4[122] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF9[i] += fw9 * FE31_C0_Q4[0][iq][i];
        const double fw10 = sv4[118] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF10[i] += fw10 * FE31_C0_D001_Q4[0][0][i];
        const double fw11 = sv4[119] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF11[i] += fw11 * FE31_C0_D001_Q4[0][0][i];
    }
    std::fill(&A[0], &A[12], 0.0);
    A[12] = -0.1666666666666667 * sp[362] + 0.04166666666666644 * sp[361] + -0.1666666666666667 * sp[363] + -0.1666666666666667 * sp[364];
    A[13] = 0.1666666666666667 * sp[362] + 0.04166666666666674 * sp[361];
    A[14] = 0.04166666666666675 * sp[361] + 0.1666666666666667 * sp[363];
    A[15] = 0.04166666666666674 * sp[361] + 0.1666666666666667 * sp[364];
    std::fill(&A[16], &A[20], 0.0);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 4; ++i)
        A[i] += BF1[i];
    for (int i = 0; i < 2; ++i)
        A[DM0[i]] += BF2[i];
    for (int i = 0; i < 2; ++i)
        A[DM1[i]] += BF3[i];
    for (int i = 0; i < 2; ++i)
        A[i + 4] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[i + 4] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[DM2[i]] += BF6[i];
    for (int i = 0; i < 2; ++i)
        A[DM3[i]] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[i + 8] += BF8[i];
    for (int i = 0; i < 4; ++i)
        A[i + 8] += BF9[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF10[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF11[i];
  }

};


class fluid3dp1p1_exterior_facet_integral_0_203: public ufc::exterior_facet_integral
{
public:

  fluid3dp1p1_exterior_facet_integral_0_203() : ufc::exterior_facet_integral()
  {

  }

  ~fluid3dp1p1_exterior_facet_integral_0_203() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, false, false, false, false, false, true, false, false});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 1
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 1
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           1
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE11_C0_D001_F_Q1[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[4][4] =
        { { 0.0, 0.1666666666666666, 0.1666666666666667, 0.1666666666666667 },
          { 0.1666666666666667, 0.0, 0.1666666666666667, 0.1666666666666667 },
          { 0.1666666666666667, 0.1666666666666667, 0.0, 0.1666666666666667 },
          { 0.1666666666666667, 0.1666666666666666, 0.1666666666666667, 0.0 } };
    // Unstructured piecewise computations
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE11_C0_D001_F_Q1[0][0][ic];
    const double J_c4 = coordinate_dofs[1] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[7] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[11] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[10] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[8] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[3] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[6] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[5] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[4] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[9] * FE11_C0_D001_F_Q1[0][0][1];
    const double w0_d1_c0 = w[0][0] * FE11_C0_D001_F_Q1[0][0][0] + w[0][2] * FE11_C0_D001_F_Q1[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE11_C0_D001_F_Q1[0][0][0] + w[0][3] * FE11_C0_D001_F_Q1[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE11_C0_D001_F_Q1[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE11_C0_D001_F_Q1[0][0][0] + w[0][6] * FE11_C0_D001_F_Q1[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE11_C0_D001_F_Q1[0][0][0] + w[0][7] * FE11_C0_D001_F_Q1[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE11_C0_D001_F_Q1[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE11_C0_D001_F_Q1[0][0][0] + w[0][10] * FE11_C0_D001_F_Q1[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE11_C0_D001_F_Q1[0][0][0] + w[0][11] * FE11_C0_D001_F_Q1[0][0][1];
    alignas(32) double sp[178];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = w0_d0_c0 * sp[14];
    sp[16] = J_c3 * (-1 * J_c8);
    sp[17] = sp[4] + sp[16];
    sp[18] = sp[17] / sp[13];
    sp[19] = w0_d1_c0 * sp[18];
    sp[20] = sp[15] + sp[19];
    sp[21] = sp[11] / sp[13];
    sp[22] = w0_d2_c0 * sp[21];
    sp[23] = sp[20] + sp[22];
    sp[24] = tetrahedron_reference_facet_normals[facet][0] * sp[14];
    sp[25] = tetrahedron_reference_facet_normals[facet][1] * sp[18];
    sp[26] = sp[24] + sp[25];
    sp[27] = tetrahedron_reference_facet_normals[facet][2] * sp[21];
    sp[28] = sp[26] + sp[27];
    sp[29] = sp[28] * sp[28];
    sp[30] = J_c2 * J_c7;
    sp[31] = J_c8 * (-1 * J_c1);
    sp[32] = sp[30] + sp[31];
    sp[33] = sp[32] / sp[13];
    sp[34] = tetrahedron_reference_facet_normals[facet][0] * sp[33];
    sp[35] = J_c0 * J_c8;
    sp[36] = J_c6 * (-1 * J_c2);
    sp[37] = sp[35] + sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = tetrahedron_reference_facet_normals[facet][1] * sp[38];
    sp[40] = sp[34] + sp[39];
    sp[41] = J_c1 * J_c6;
    sp[42] = J_c0 * J_c7;
    sp[43] = sp[41] + -1 * sp[42];
    sp[44] = sp[43] / sp[13];
    sp[45] = tetrahedron_reference_facet_normals[facet][2] * sp[44];
    sp[46] = sp[40] + sp[45];
    sp[47] = sp[46] * sp[46];
    sp[48] = sp[29] + sp[47];
    sp[49] = J_c1 * J_c5;
    sp[50] = J_c2 * J_c4;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = tetrahedron_reference_facet_normals[facet][0] * sp[52];
    sp[54] = J_c2 * J_c3;
    sp[55] = J_c0 * J_c5;
    sp[56] = sp[54] + -1 * sp[55];
    sp[57] = sp[56] / sp[13];
    sp[58] = tetrahedron_reference_facet_normals[facet][1] * sp[57];
    sp[59] = sp[53] + sp[58];
    sp[60] = J_c0 * J_c4;
    sp[61] = J_c1 * J_c3;
    sp[62] = sp[60] + -1 * sp[61];
    sp[63] = sp[62] / sp[13];
    sp[64] = tetrahedron_reference_facet_normals[facet][2] * sp[63];
    sp[65] = sp[59] + sp[64];
    sp[66] = sp[65] * sp[65];
    sp[67] = sp[48] + sp[66];
    sp[68] = std::sqrt(sp[67]);
    sp[69] = sp[28] / sp[68];
    sp[70] = sp[23] * sp[69];
    sp[71] = w0_d0_c1 * sp[14];
    sp[72] = w0_d1_c1 * sp[18];
    sp[73] = sp[71] + sp[72];
    sp[74] = w0_d2_c1 * sp[21];
    sp[75] = sp[73] + sp[74];
    sp[76] = sp[46] / sp[68];
    sp[77] = sp[75] * sp[76];
    sp[78] = sp[70] + sp[77];
    sp[79] = w0_d0_c2 * sp[14];
    sp[80] = w0_d1_c2 * sp[18];
    sp[81] = sp[79] + sp[80];
    sp[82] = w0_d2_c2 * sp[21];
    sp[83] = sp[81] + sp[82];
    sp[84] = sp[65] / sp[68];
    sp[85] = sp[83] * sp[84];
    sp[86] = sp[78] + sp[85];
    sp[87] = w0_d0_c0 * sp[33];
    sp[88] = w0_d1_c0 * sp[38];
    sp[89] = sp[87] + sp[88];
    sp[90] = w0_d2_c0 * sp[44];
    sp[91] = sp[89] + sp[90];
    sp[92] = sp[91] * sp[69];
    sp[93] = w0_d0_c1 * sp[33];
    sp[94] = w0_d1_c1 * sp[38];
    sp[95] = sp[93] + sp[94];
    sp[96] = w0_d2_c1 * sp[44];
    sp[97] = sp[95] + sp[96];
    sp[98] = sp[97] * sp[76];
    sp[99] = sp[92] + sp[98];
    sp[100] = w0_d0_c2 * sp[33];
    sp[101] = w0_d1_c2 * sp[38];
    sp[102] = sp[100] + sp[101];
    sp[103] = w0_d2_c2 * sp[44];
    sp[104] = sp[102] + sp[103];
    sp[105] = sp[104] * sp[84];
    sp[106] = sp[99] + sp[105];
    sp[107] = w0_d0_c0 * sp[52];
    sp[108] = w0_d1_c0 * sp[57];
    sp[109] = sp[107] + sp[108];
    sp[110] = w0_d2_c0 * sp[63];
    sp[111] = sp[109] + sp[110];
    sp[112] = sp[111] * sp[69];
    sp[113] = w0_d0_c1 * sp[52];
    sp[114] = w0_d1_c1 * sp[57];
    sp[115] = sp[113] + sp[114];
    sp[116] = w0_d2_c1 * sp[63];
    sp[117] = sp[115] + sp[116];
    sp[118] = sp[117] * sp[76];
    sp[119] = sp[112] + sp[118];
    sp[120] = w0_d0_c2 * sp[52];
    sp[121] = w0_d1_c2 * sp[57];
    sp[122] = sp[120] + sp[121];
    sp[123] = w0_d2_c2 * sp[63];
    sp[124] = sp[122] + sp[123];
    sp[125] = sp[124] * sp[84];
    sp[126] = sp[119] + sp[125];
    sp[127] = sp[86] * w[6][0];
    sp[128] = sp[106] * w[6][0];
    sp[129] = sp[126] * w[6][0];
    sp[130] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c3;
    sp[131] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c4;
    sp[132] = sp[130] + sp[131];
    sp[133] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[134] = sp[132] + sp[133];
    sp[135] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c6;
    sp[136] = tetrahedron_reference_facet_jacobian[facet][1][1] * J_c7;
    sp[137] = sp[135] + sp[136];
    sp[138] = tetrahedron_reference_facet_jacobian[facet][2][1] * J_c8;
    sp[139] = sp[137] + sp[138];
    sp[140] = sp[134] * sp[139];
    sp[141] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c3;
    sp[142] = J_c4 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[143] = sp[141] + sp[142];
    sp[144] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[145] = sp[143] + sp[144];
    sp[146] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c6;
    sp[147] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c7;
    sp[148] = sp[146] + sp[147];
    sp[149] = tetrahedron_reference_facet_jacobian[facet][2][0] * J_c8;
    sp[150] = sp[148] + sp[149];
    sp[151] = sp[145] * sp[150];
    sp[152] = sp[140] + -1 * sp[151];
    sp[153] = sp[152] * sp[152];
    sp[154] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][1];
    sp[155] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[156] = sp[154] + sp[155];
    sp[157] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[158] = sp[156] + sp[157];
    sp[159] = sp[158] * sp[150];
    sp[160] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][0];
    sp[161] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][0];
    sp[162] = sp[160] + sp[161];
    sp[163] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[164] = sp[162] + sp[163];
    sp[165] = sp[164] * sp[139];
    sp[166] = sp[159] + -1 * sp[165];
    sp[167] = sp[166] * sp[166];
    sp[168] = sp[153] + sp[167];
    sp[169] = sp[164] * sp[145];
    sp[170] = sp[134] * sp[158];
    sp[171] = sp[169] + -1 * sp[170];
    sp[172] = sp[171] * sp[171];
    sp[173] = sp[168] + sp[172];
    sp[174] = std::sqrt(sp[173]);
    sp[175] = -1 * sp[127] * sp[174];
    sp[176] = -1 * sp[128] * sp[174];
    sp[177] = -1 * sp[129] * sp[174];
    A[0] = sp[175] * PI0[facet][0];
    A[1] = sp[175] * PI0[facet][1];
    A[2] = sp[175] * PI0[facet][2];
    A[3] = sp[175] * PI0[facet][3];
    A[4] = sp[176] * PI0[facet][0];
    A[5] = sp[176] * PI0[facet][1];
    A[6] = sp[176] * PI0[facet][2];
    A[7] = sp[176] * PI0[facet][3];
    A[8] = sp[177] * PI0[facet][0];
    A[9] = sp[177] * PI0[facet][1];
    A[10] = sp[177] * PI0[facet][2];
    A[11] = sp[177] * PI0[facet][3];
    std::fill(&A[12], &A[20], 0.0);
  }

};


class fluid3dp1p1_cell_integral_1_204: public ufc::cell_integral
{
public:

  fluid3dp1p1_cell_integral_1_204() : ufc::cell_integral()
  {

  }

  ~fluid3dp1p1_cell_integral_1_204() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 2
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           2
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.04166666666666666, 0.04166666666666666, 0.04166666666666666, 0.04166666666666666 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE43_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE43_C0_Q4[1][4][4] =
        { { { 0.1381966011250091, 0.585410196624969, 0.138196601125011, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.585410196624969, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.138196601125011, 0.585410196624969 },
            { 0.5854101966249672, 0.1381966011250109, 0.138196601125011, 0.138196601125011 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE43_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE43_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE43_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE43_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE43_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE43_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE43_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE43_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE43_C0_D001_Q4[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE43_C0_D001_Q4[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE43_C0_D001_Q4[0][0][0] + w[0][2] * FE43_C0_D001_Q4[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE43_C0_D001_Q4[0][0][0] + w[0][3] * FE43_C0_D001_Q4[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE43_C0_D001_Q4[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE43_C0_D001_Q4[0][0][0] + w[0][6] * FE43_C0_D001_Q4[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE43_C0_D001_Q4[0][0][0] + w[0][7] * FE43_C0_D001_Q4[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE43_C0_D001_Q4[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE43_C0_D001_Q4[0][0][0] + w[0][10] * FE43_C0_D001_Q4[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE43_C0_D001_Q4[0][0][0] + w[0][11] * FE43_C0_D001_Q4[0][0][1];
    alignas(32) double sp[552];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = sp[14] * w[3][0];
    sp[44] = sp[17] * w[3][0];
    sp[45] = sp[18] * w[3][0];
    sp[46] = w0_d0_c0 * sp[14];
    sp[47] = w0_d1_c0 * sp[17];
    sp[48] = sp[46] + sp[47];
    sp[49] = w0_d2_c0 * sp[18];
    sp[50] = sp[48] + sp[49];
    sp[51] = sp[50] * w[3][0];
    sp[52] = sp[22] * w[3][0];
    sp[53] = sp[26] * w[3][0];
    sp[54] = sp[30] * w[3][0];
    sp[55] = w0_d0_c0 * sp[22];
    sp[56] = w0_d1_c0 * sp[26];
    sp[57] = sp[55] + sp[56];
    sp[58] = w0_d2_c0 * sp[30];
    sp[59] = sp[57] + sp[58];
    sp[60] = sp[59] * w[3][0];
    sp[61] = sp[34] * w[3][0];
    sp[62] = sp[38] * w[3][0];
    sp[63] = sp[42] * w[3][0];
    sp[64] = w0_d0_c0 * sp[34];
    sp[65] = w0_d1_c0 * sp[38];
    sp[66] = sp[64] + sp[65];
    sp[67] = w0_d2_c0 * sp[42];
    sp[68] = sp[66] + sp[67];
    sp[69] = sp[68] * w[3][0];
    sp[70] = w0_d0_c1 * sp[14];
    sp[71] = w0_d1_c1 * sp[17];
    sp[72] = sp[70] + sp[71];
    sp[73] = w0_d2_c1 * sp[18];
    sp[74] = sp[72] + sp[73];
    sp[75] = sp[74] * w[3][0];
    sp[76] = w0_d0_c1 * sp[22];
    sp[77] = w0_d1_c1 * sp[26];
    sp[78] = sp[76] + sp[77];
    sp[79] = w0_d2_c1 * sp[30];
    sp[80] = sp[78] + sp[79];
    sp[81] = sp[80] * w[3][0];
    sp[82] = w0_d0_c1 * sp[34];
    sp[83] = w0_d1_c1 * sp[38];
    sp[84] = sp[82] + sp[83];
    sp[85] = w0_d2_c1 * sp[42];
    sp[86] = sp[84] + sp[85];
    sp[87] = sp[86] * w[3][0];
    sp[88] = w0_d0_c2 * sp[14];
    sp[89] = w0_d1_c2 * sp[17];
    sp[90] = sp[88] + sp[89];
    sp[91] = w0_d2_c2 * sp[18];
    sp[92] = sp[90] + sp[91];
    sp[93] = sp[92] * w[3][0];
    sp[94] = w0_d0_c2 * sp[22];
    sp[95] = w0_d1_c2 * sp[26];
    sp[96] = sp[94] + sp[95];
    sp[97] = w0_d2_c2 * sp[30];
    sp[98] = sp[96] + sp[97];
    sp[99] = sp[98] * w[3][0];
    sp[100] = w0_d0_c2 * sp[34];
    sp[101] = w0_d1_c2 * sp[38];
    sp[102] = sp[100] + sp[101];
    sp[103] = w0_d2_c2 * sp[42];
    sp[104] = sp[102] + sp[103];
    sp[105] = sp[104] * w[3][0];
    sp[106] = sp[14] * sp[14];
    sp[107] = sp[14] * sp[17];
    sp[108] = sp[18] * sp[14];
    sp[109] = sp[17] * sp[17];
    sp[110] = sp[18] * sp[17];
    sp[111] = sp[18] * sp[18];
    sp[112] = sp[22] * sp[22];
    sp[113] = sp[22] * sp[26];
    sp[114] = sp[22] * sp[30];
    sp[115] = sp[26] * sp[26];
    sp[116] = sp[26] * sp[30];
    sp[117] = sp[30] * sp[30];
    sp[118] = sp[112] + sp[106];
    sp[119] = sp[113] + sp[107];
    sp[120] = sp[114] + sp[108];
    sp[121] = sp[115] + sp[109];
    sp[122] = sp[116] + sp[110];
    sp[123] = sp[111] + sp[117];
    sp[124] = sp[34] * sp[34];
    sp[125] = sp[34] * sp[38];
    sp[126] = sp[42] * sp[34];
    sp[127] = sp[38] * sp[38];
    sp[128] = sp[42] * sp[38];
    sp[129] = sp[42] * sp[42];
    sp[130] = sp[118] + sp[124];
    sp[131] = sp[119] + sp[125];
    sp[132] = sp[120] + sp[126];
    sp[133] = sp[121] + sp[127];
    sp[134] = sp[122] + sp[128];
    sp[135] = sp[123] + sp[129];
    sp[136] = J_c0 * tetrahedron_reference_edge_vectors[0][0];
    sp[137] = J_c1 * tetrahedron_reference_edge_vectors[0][1];
    sp[138] = sp[136] + sp[137];
    sp[139] = J_c2 * tetrahedron_reference_edge_vectors[0][2];
    sp[140] = sp[138] + sp[139];
    sp[141] = sp[140] * sp[140];
    sp[142] = tetrahedron_reference_edge_vectors[0][0] * J_c3;
    sp[143] = tetrahedron_reference_edge_vectors[0][1] * J_c4;
    sp[144] = sp[142] + sp[143];
    sp[145] = tetrahedron_reference_edge_vectors[0][2] * J_c5;
    sp[146] = sp[144] + sp[145];
    sp[147] = sp[146] * sp[146];
    sp[148] = sp[141] + sp[147];
    sp[149] = tetrahedron_reference_edge_vectors[0][0] * J_c6;
    sp[150] = tetrahedron_reference_edge_vectors[0][1] * J_c7;
    sp[151] = sp[149] + sp[150];
    sp[152] = tetrahedron_reference_edge_vectors[0][2] * J_c8;
    sp[153] = sp[151] + sp[152];
    sp[154] = sp[153] * sp[153];
    sp[155] = sp[148] + sp[154];
    sp[156] = std::sqrt(sp[155]);
    sp[157] = J_c0 * tetrahedron_reference_edge_vectors[5][0];
    sp[158] = J_c1 * tetrahedron_reference_edge_vectors[5][1];
    sp[159] = sp[157] + sp[158];
    sp[160] = J_c2 * tetrahedron_reference_edge_vectors[5][2];
    sp[161] = sp[159] + sp[160];
    sp[162] = sp[161] * sp[161];
    sp[163] = J_c3 * tetrahedron_reference_edge_vectors[5][0];
    sp[164] = J_c4 * tetrahedron_reference_edge_vectors[5][1];
    sp[165] = sp[163] + sp[164];
    sp[166] = J_c5 * tetrahedron_reference_edge_vectors[5][2];
    sp[167] = sp[165] + sp[166];
    sp[168] = sp[167] * sp[167];
    sp[169] = sp[162] + sp[168];
    sp[170] = J_c6 * tetrahedron_reference_edge_vectors[5][0];
    sp[171] = J_c7 * tetrahedron_reference_edge_vectors[5][1];
    sp[172] = sp[170] + sp[171];
    sp[173] = J_c8 * tetrahedron_reference_edge_vectors[5][2];
    sp[174] = sp[172] + sp[173];
    sp[175] = sp[174] * sp[174];
    sp[176] = sp[169] + sp[175];
    sp[177] = std::sqrt(sp[176]);
    sp[178] = sp[156] * sp[177];
    sp[179] = J_c0 * tetrahedron_reference_edge_vectors[2][0];
    sp[180] = J_c1 * tetrahedron_reference_edge_vectors[2][1];
    sp[181] = sp[179] + sp[180];
    sp[182] = J_c2 * tetrahedron_reference_edge_vectors[2][2];
    sp[183] = sp[181] + sp[182];
    sp[184] = sp[183] * sp[183];
    sp[185] = J_c3 * tetrahedron_reference_edge_vectors[2][0];
    sp[186] = J_c4 * tetrahedron_reference_edge_vectors[2][1];
    sp[187] = sp[185] + sp[186];
    sp[188] = J_c5 * tetrahedron_reference_edge_vectors[2][2];
    sp[189] = sp[187] + sp[188];
    sp[190] = sp[189] * sp[189];
    sp[191] = sp[184] + sp[190];
    sp[192] = J_c6 * tetrahedron_reference_edge_vectors[2][0];
    sp[193] = J_c7 * tetrahedron_reference_edge_vectors[2][1];
    sp[194] = sp[192] + sp[193];
    sp[195] = J_c8 * tetrahedron_reference_edge_vectors[2][2];
    sp[196] = sp[194] + sp[195];
    sp[197] = sp[196] * sp[196];
    sp[198] = sp[191] + sp[197];
    sp[199] = std::sqrt(sp[198]);
    sp[200] = J_c0 * tetrahedron_reference_edge_vectors[3][0];
    sp[201] = J_c1 * tetrahedron_reference_edge_vectors[3][1];
    sp[202] = sp[200] + sp[201];
    sp[203] = J_c2 * tetrahedron_reference_edge_vectors[3][2];
    sp[204] = sp[202] + sp[203];
    sp[205] = sp[204] * sp[204];
    sp[206] = J_c3 * tetrahedron_reference_edge_vectors[3][0];
    sp[207] = J_c4 * tetrahedron_reference_edge_vectors[3][1];
    sp[208] = sp[206] + sp[207];
    sp[209] = J_c5 * tetrahedron_reference_edge_vectors[3][2];
    sp[210] = sp[208] + sp[209];
    sp[211] = sp[210] * sp[210];
    sp[212] = sp[205] + sp[211];
    sp[213] = J_c6 * tetrahedron_reference_edge_vectors[3][0];
    sp[214] = J_c7 * tetrahedron_reference_edge_vectors[3][1];
    sp[215] = sp[213] + sp[214];
    sp[216] = J_c8 * tetrahedron_reference_edge_vectors[3][2];
    sp[217] = sp[215] + sp[216];
    sp[218] = sp[217] * sp[217];
    sp[219] = sp[212] + sp[218];
    sp[220] = std::sqrt(sp[219]);
    sp[221] = sp[199] * sp[220];
    sp[222] = J_c0 * tetrahedron_reference_edge_vectors[1][0];
    sp[223] = J_c1 * tetrahedron_reference_edge_vectors[1][1];
    sp[224] = sp[222] + sp[223];
    sp[225] = J_c2 * tetrahedron_reference_edge_vectors[1][2];
    sp[226] = sp[224] + sp[225];
    sp[227] = sp[226] * sp[226];
    sp[228] = J_c3 * tetrahedron_reference_edge_vectors[1][0];
    sp[229] = J_c4 * tetrahedron_reference_edge_vectors[1][1];
    sp[230] = sp[228] + sp[229];
    sp[231] = J_c5 * tetrahedron_reference_edge_vectors[1][2];
    sp[232] = sp[230] + sp[231];
    sp[233] = sp[232] * sp[232];
    sp[234] = sp[227] + sp[233];
    sp[235] = tetrahedron_reference_edge_vectors[1][0] * J_c6;
    sp[236] = tetrahedron_reference_edge_vectors[1][1] * J_c7;
    sp[237] = sp[235] + sp[236];
    sp[238] = tetrahedron_reference_edge_vectors[1][2] * J_c8;
    sp[239] = sp[237] + sp[238];
    sp[240] = sp[239] * sp[239];
    sp[241] = sp[234] + sp[240];
    sp[242] = std::sqrt(sp[241]);
    sp[243] = J_c0 * tetrahedron_reference_edge_vectors[4][0];
    sp[244] = J_c1 * tetrahedron_reference_edge_vectors[4][1];
    sp[245] = sp[243] + sp[244];
    sp[246] = J_c2 * tetrahedron_reference_edge_vectors[4][2];
    sp[247] = sp[245] + sp[246];
    sp[248] = sp[247] * sp[247];
    sp[249] = J_c3 * tetrahedron_reference_edge_vectors[4][0];
    sp[250] = J_c4 * tetrahedron_reference_edge_vectors[4][1];
    sp[251] = sp[249] + sp[250];
    sp[252] = J_c5 * tetrahedron_reference_edge_vectors[4][2];
    sp[253] = sp[251] + sp[252];
    sp[254] = sp[253] * sp[253];
    sp[255] = sp[248] + sp[254];
    sp[256] = J_c6 * tetrahedron_reference_edge_vectors[4][0];
    sp[257] = J_c7 * tetrahedron_reference_edge_vectors[4][1];
    sp[258] = sp[256] + sp[257];
    sp[259] = J_c8 * tetrahedron_reference_edge_vectors[4][2];
    sp[260] = sp[258] + sp[259];
    sp[261] = sp[260] * sp[260];
    sp[262] = sp[255] + sp[261];
    sp[263] = std::sqrt(sp[262]);
    sp[264] = sp[242] * sp[263];
    sp[265] = sp[221] + sp[264];
    sp[266] = sp[265] + sp[178];
    sp[267] = -1 * sp[178] + sp[266] / 2;
    sp[268] = -1 * sp[264] + sp[266] / 2;
    sp[269] = -1 * sp[221] + sp[266] / 2;
    sp[270] = sp[269] * (sp[266] / 2);
    sp[271] = sp[268] * sp[270];
    sp[272] = sp[267] * sp[271];
    sp[273] = std::sqrt(sp[272]);
    sp[274] = tetrahedron_reference_cell_volume * sp[13];
    sp[275] = std::abs(sp[274]);
    sp[276] = sp[273] / (6.0 * sp[275]);
    sp[277] = 2.0 * sp[276] * (2.0 * sp[276]);
    sp[278] = sp[277] / w[4][0];
    sp[279] = sp[278] * w[6][0];
    sp[280] = sp[130] * sp[279];
    sp[281] = sp[131] * sp[279];
    sp[282] = sp[132] * sp[279];
    sp[283] = sp[133] * sp[279];
    sp[284] = sp[134] * sp[279];
    sp[285] = sp[135] * sp[279];
    sp[286] = 3.0 / (2 * w[5][0]) * w[3][0];
    sp[287] = sp[51] + sp[286];
    sp[288] = sp[81] + sp[286];
    sp[289] = sp[105] + sp[286];
    sp[290] = sp[14] + sp[14];
    sp[291] = sp[17] + sp[17];
    sp[292] = sp[18] + sp[18];
    sp[293] = 0.5 * sp[290] * (0.5 * sp[290]);
    sp[294] = 0.5 * sp[290] * (0.5 * sp[291]);
    sp[295] = 0.5 * sp[292] * (0.5 * sp[290]);
    sp[296] = 0.5 * sp[291] * (0.5 * sp[291]);
    sp[297] = 0.5 * sp[292] * (0.5 * sp[291]);
    sp[298] = 0.5 * sp[292] * (0.5 * sp[292]);
    sp[299] = 0.5 * sp[22] * (0.5 * sp[22]);
    sp[300] = 0.5 * sp[22] * (0.5 * sp[26]);
    sp[301] = 0.5 * sp[22] * (0.5 * sp[30]);
    sp[302] = 0.5 * sp[22] * (0.5 * sp[14]);
    sp[303] = 0.5 * sp[22] * (0.5 * sp[17]);
    sp[304] = 0.5 * sp[22] * (0.5 * sp[18]);
    sp[305] = 0.5 * sp[26] * (0.5 * sp[26]);
    sp[306] = 0.5 * sp[26] * (0.5 * sp[30]);
    sp[307] = 0.5 * sp[26] * (0.5 * sp[14]);
    sp[308] = 0.5 * sp[26] * (0.5 * sp[17]);
    sp[309] = 0.5 * sp[26] * (0.5 * sp[18]);
    sp[310] = 0.5 * sp[30] * (0.5 * sp[30]);
    sp[311] = 0.5 * sp[30] * (0.5 * sp[14]);
    sp[312] = 0.5 * sp[30] * (0.5 * sp[17]);
    sp[313] = 0.5 * sp[18] * (0.5 * sp[30]);
    sp[314] = 0.5 * sp[14] * (0.5 * sp[14]);
    sp[315] = 0.5 * sp[14] * (0.5 * sp[17]);
    sp[316] = 0.5 * sp[18] * (0.5 * sp[14]);
    sp[317] = 0.5 * sp[17] * (0.5 * sp[17]);
    sp[318] = 0.5 * sp[18] * (0.5 * sp[17]);
    sp[319] = 0.5 * sp[18] * (0.5 * sp[18]);
    sp[320] = sp[293] + sp[299];
    sp[321] = sp[294] + sp[300];
    sp[322] = sp[295] + sp[301];
    sp[323] = sp[296] + sp[305];
    sp[324] = sp[297] + sp[306];
    sp[325] = sp[298] + sp[310];
    sp[326] = 0.5 * sp[34] * (0.5 * sp[34]);
    sp[327] = 0.5 * sp[34] * (0.5 * sp[38]);
    sp[328] = 0.5 * sp[42] * (0.5 * sp[34]);
    sp[329] = 0.5 * sp[34] * (0.5 * sp[14]);
    sp[330] = 0.5 * sp[34] * (0.5 * sp[17]);
    sp[331] = 0.5 * sp[34] * (0.5 * sp[18]);
    sp[332] = 0.5 * sp[38] * (0.5 * sp[38]);
    sp[333] = 0.5 * sp[42] * (0.5 * sp[38]);
    sp[334] = 0.5 * sp[38] * (0.5 * sp[14]);
    sp[335] = 0.5 * sp[38] * (0.5 * sp[17]);
    sp[336] = 0.5 * sp[38] * (0.5 * sp[18]);
    sp[337] = 0.5 * sp[42] * (0.5 * sp[42]);
    sp[338] = 0.5 * sp[42] * (0.5 * sp[14]);
    sp[339] = 0.5 * sp[42] * (0.5 * sp[17]);
    sp[340] = 0.5 * sp[42] * (0.5 * sp[18]);
    sp[341] = sp[320] + sp[326];
    sp[342] = sp[321] + sp[327];
    sp[343] = sp[322] + sp[328];
    sp[344] = sp[323] + sp[332];
    sp[345] = sp[324] + sp[333];
    sp[346] = sp[325] + sp[337];
    sp[347] = sp[22] + sp[22];
    sp[348] = sp[26] + sp[26];
    sp[349] = sp[30] + sp[30];
    sp[350] = 0.5 * sp[347] * (0.5 * sp[347]);
    sp[351] = 0.5 * sp[347] * (0.5 * sp[348]);
    sp[352] = 0.5 * sp[347] * (0.5 * sp[349]);
    sp[353] = 0.5 * sp[348] * (0.5 * sp[348]);
    sp[354] = 0.5 * sp[348] * (0.5 * sp[349]);
    sp[355] = 0.5 * sp[349] * (0.5 * sp[349]);
    sp[356] = sp[350] + sp[314];
    sp[357] = sp[351] + sp[315];
    sp[358] = sp[352] + sp[316];
    sp[359] = sp[353] + sp[317];
    sp[360] = sp[354] + sp[318];
    sp[361] = sp[355] + sp[319];
    sp[362] = 0.5 * sp[22] * (0.5 * sp[34]);
    sp[363] = 0.5 * sp[26] * (0.5 * sp[34]);
    sp[364] = 0.5 * sp[34] * (0.5 * sp[30]);
    sp[365] = 0.5 * sp[22] * (0.5 * sp[38]);
    sp[366] = 0.5 * sp[26] * (0.5 * sp[38]);
    sp[367] = 0.5 * sp[38] * (0.5 * sp[30]);
    sp[368] = 0.5 * sp[22] * (0.5 * sp[42]);
    sp[369] = 0.5 * sp[26] * (0.5 * sp[42]);
    sp[370] = 0.5 * sp[42] * (0.5 * sp[30]);
    sp[371] = sp[356] + sp[326];
    sp[372] = sp[357] + sp[327];
    sp[373] = sp[358] + sp[328];
    sp[374] = sp[359] + sp[332];
    sp[375] = sp[360] + sp[333];
    sp[376] = sp[361] + sp[337];
    sp[377] = sp[341] + sp[299];
    sp[378] = sp[342] + sp[300];
    sp[379] = sp[343] + sp[301];
    sp[380] = sp[302] + sp[302];
    sp[381] = sp[303] + sp[303];
    sp[382] = sp[304] + sp[304];
    sp[383] = sp[344] + sp[305];
    sp[384] = sp[345] + sp[306];
    sp[385] = sp[307] + sp[307];
    sp[386] = sp[308] + sp[308];
    sp[387] = sp[309] + sp[309];
    sp[388] = sp[346] + sp[310];
    sp[389] = sp[311] + sp[311];
    sp[390] = sp[312] + sp[312];
    sp[391] = sp[313] + sp[313];
    sp[392] = sp[371] + sp[314];
    sp[393] = sp[372] + sp[315];
    sp[394] = sp[373] + sp[316];
    sp[395] = sp[374] + sp[317];
    sp[396] = sp[375] + sp[318];
    sp[397] = sp[376] + sp[319];
    sp[398] = sp[299] + sp[314];
    sp[399] = sp[300] + sp[315];
    sp[400] = sp[301] + sp[316];
    sp[401] = sp[305] + sp[317];
    sp[402] = sp[306] + sp[318];
    sp[403] = sp[319] + sp[310];
    sp[404] = sp[34] + sp[34];
    sp[405] = sp[38] + sp[38];
    sp[406] = sp[42] + sp[42];
    sp[407] = 0.5 * sp[404] * (0.5 * sp[404]);
    sp[408] = 0.5 * sp[404] * (0.5 * sp[405]);
    sp[409] = 0.5 * sp[406] * (0.5 * sp[404]);
    sp[410] = 0.5 * sp[405] * (0.5 * sp[405]);
    sp[411] = 0.5 * sp[406] * (0.5 * sp[405]);
    sp[412] = 0.5 * sp[406] * (0.5 * sp[406]);
    sp[413] = sp[398] + sp[407];
    sp[414] = sp[399] + sp[408];
    sp[415] = sp[400] + sp[409];
    sp[416] = sp[401] + sp[410];
    sp[417] = sp[402] + sp[411];
    sp[418] = sp[403] + sp[412];
    sp[419] = sp[377] + sp[326];
    sp[420] = sp[378] + sp[327];
    sp[421] = sp[379] + sp[328];
    sp[422] = sp[329] + sp[329];
    sp[423] = sp[330] + sp[330];
    sp[424] = sp[331] + sp[331];
    sp[425] = sp[383] + sp[332];
    sp[426] = sp[384] + sp[333];
    sp[427] = sp[334] + sp[334];
    sp[428] = sp[335] + sp[335];
    sp[429] = sp[336] + sp[336];
    sp[430] = sp[388] + sp[337];
    sp[431] = sp[338] + sp[338];
    sp[432] = sp[339] + sp[339];
    sp[433] = sp[340] + sp[340];
    sp[434] = sp[392] + sp[326];
    sp[435] = sp[393] + sp[327];
    sp[436] = sp[394] + sp[328];
    sp[437] = sp[362] + sp[362];
    sp[438] = sp[363] + sp[363];
    sp[439] = sp[364] + sp[364];
    sp[440] = sp[395] + sp[332];
    sp[441] = sp[396] + sp[333];
    sp[442] = sp[365] + sp[365];
    sp[443] = sp[366] + sp[366];
    sp[444] = sp[367] + sp[367];
    sp[445] = sp[397] + sp[337];
    sp[446] = sp[368] + sp[368];
    sp[447] = sp[369] + sp[369];
    sp[448] = sp[370] + sp[370];
    sp[449] = sp[413] + sp[398];
    sp[450] = sp[414] + sp[399];
    sp[451] = sp[415] + sp[400];
    sp[452] = sp[416] + sp[401];
    sp[453] = sp[417] + sp[402];
    sp[454] = sp[418] + sp[403];
    sp[455] = sp[419] * (2.0 * w[4][0]);
    sp[456] = sp[420] * (2.0 * w[4][0]);
    sp[457] = sp[421] * (2.0 * w[4][0]);
    sp[458] = sp[380] * (2.0 * w[4][0]);
    sp[459] = sp[381] * (2.0 * w[4][0]);
    sp[460] = sp[382] * (2.0 * w[4][0]);
    sp[461] = sp[422] * (2.0 * w[4][0]);
    sp[462] = sp[423] * (2.0 * w[4][0]);
    sp[463] = sp[424] * (2.0 * w[4][0]);
    sp[464] = sp[425] * (2.0 * w[4][0]);
    sp[465] = sp[426] * (2.0 * w[4][0]);
    sp[466] = sp[385] * (2.0 * w[4][0]);
    sp[467] = sp[386] * (2.0 * w[4][0]);
    sp[468] = sp[387] * (2.0 * w[4][0]);
    sp[469] = sp[427] * (2.0 * w[4][0]);
    sp[470] = sp[428] * (2.0 * w[4][0]);
    sp[471] = sp[429] * (2.0 * w[4][0]);
    sp[472] = sp[430] * (2.0 * w[4][0]);
    sp[473] = sp[389] * (2.0 * w[4][0]);
    sp[474] = sp[390] * (2.0 * w[4][0]);
    sp[475] = sp[391] * (2.0 * w[4][0]);
    sp[476] = sp[431] * (2.0 * w[4][0]);
    sp[477] = sp[432] * (2.0 * w[4][0]);
    sp[478] = sp[433] * (2.0 * w[4][0]);
    sp[479] = sp[434] * (2.0 * w[4][0]);
    sp[480] = sp[435] * (2.0 * w[4][0]);
    sp[481] = sp[436] * (2.0 * w[4][0]);
    sp[482] = sp[437] * (2.0 * w[4][0]);
    sp[483] = sp[438] * (2.0 * w[4][0]);
    sp[484] = sp[439] * (2.0 * w[4][0]);
    sp[485] = sp[440] * (2.0 * w[4][0]);
    sp[486] = sp[441] * (2.0 * w[4][0]);
    sp[487] = sp[442] * (2.0 * w[4][0]);
    sp[488] = sp[443] * (2.0 * w[4][0]);
    sp[489] = sp[444] * (2.0 * w[4][0]);
    sp[490] = sp[445] * (2.0 * w[4][0]);
    sp[491] = sp[446] * (2.0 * w[4][0]);
    sp[492] = sp[447] * (2.0 * w[4][0]);
    sp[493] = sp[448] * (2.0 * w[4][0]);
    sp[494] = sp[449] * (2.0 * w[4][0]);
    sp[495] = sp[450] * (2.0 * w[4][0]);
    sp[496] = sp[451] * (2.0 * w[4][0]);
    sp[497] = sp[452] * (2.0 * w[4][0]);
    sp[498] = sp[453] * (2.0 * w[4][0]);
    sp[499] = sp[454] * (2.0 * w[4][0]);
    sp[500] = std::abs(sp[13]);
    sp[501] = -1 * sp[14] * sp[500];
    sp[502] = -1 * sp[17] * sp[500];
    sp[503] = -1 * sp[18] * sp[500];
    sp[504] = -1 * sp[22] * sp[500];
    sp[505] = -1 * sp[26] * sp[500];
    sp[506] = -1 * sp[30] * sp[500];
    sp[507] = -1 * sp[34] * sp[500];
    sp[508] = -1 * sp[38] * sp[500];
    sp[509] = -1 * sp[42] * sp[500];
    sp[510] = sp[458] * sp[500];
    sp[511] = sp[459] * sp[500];
    sp[512] = sp[460] * sp[500];
    sp[513] = sp[461] * sp[500];
    sp[514] = sp[462] * sp[500];
    sp[515] = sp[463] * sp[500];
    sp[516] = sp[466] * sp[500];
    sp[517] = sp[467] * sp[500];
    sp[518] = sp[468] * sp[500];
    sp[519] = sp[469] * sp[500];
    sp[520] = sp[470] * sp[500];
    sp[521] = sp[471] * sp[500];
    sp[522] = sp[473] * sp[500];
    sp[523] = sp[474] * sp[500];
    sp[524] = sp[475] * sp[500];
    sp[525] = sp[476] * sp[500];
    sp[526] = sp[477] * sp[500];
    sp[527] = sp[478] * sp[500];
    sp[528] = sp[482] * sp[500];
    sp[529] = sp[483] * sp[500];
    sp[530] = sp[484] * sp[500];
    sp[531] = sp[487] * sp[500];
    sp[532] = sp[488] * sp[500];
    sp[533] = sp[489] * sp[500];
    sp[534] = sp[491] * sp[500];
    sp[535] = sp[492] * sp[500];
    sp[536] = sp[493] * sp[500];
    sp[537] = sp[287] * sp[500];
    sp[538] = sp[75] * sp[500];
    sp[539] = sp[93] * sp[500];
    sp[540] = sp[60] * sp[500];
    sp[541] = sp[288] * sp[500];
    sp[542] = sp[99] * sp[500];
    sp[543] = sp[69] * sp[500];
    sp[544] = sp[87] * sp[500];
    sp[545] = sp[289] * sp[500];
    sp[546] = sp[280] * sp[500];
    sp[547] = sp[281] * sp[500];
    sp[548] = sp[282] * sp[500];
    sp[549] = sp[283] * sp[500];
    sp[550] = sp[284] * sp[500];
    sp[551] = sp[285] * sp[500];
    alignas(32) double TP0[2] = {};
    alignas(32) double TP1[4] = {};
    alignas(32) double TP2[2] = {};
    alignas(32) double TP3[2] = {};
    alignas(32) double TP4[4] = {};
    alignas(32) double TP5[4] = {};
    alignas(32) double TP6[4] = {};
    alignas(32) double TP7[4] = {};
    alignas(32) double TP8[4] = {};
    alignas(32) double TP9[2] = {};
    alignas(32) double TP10[4] = {};
    alignas(32) double TP11[2] = {};
    alignas(32) double TP12[2] = {};
    alignas(32) double TP13[4] = {};
    alignas(32) double TP14[4] = {};
    alignas(32) double TP15[2] = {};
    alignas(32) double TP16[4] = {};
    alignas(32) double TP17[2] = {};
    alignas(32) double TP18[2] = {};
    alignas(32) double TP19[4] = {};
    alignas(32) double TP20[4] = {};
    alignas(32) double TP21[4] = {};
    alignas(32) double TP22[2] = {};
    alignas(32) double TP23[4] = {};
    alignas(32) double TP24[2] = {};
    alignas(32) double TP25[2] = {};
    alignas(32) double TP26[4] = {};
    alignas(32) double TP27[4] = {};
    alignas(32) double TP28[2] = {};
    alignas(32) double TP29[4] = {};
    alignas(32) double TP30[2] = {};
    alignas(32) double TP31[2] = {};
    alignas(32) double TP32[4] = {};
    alignas(32) double TP33[4] = {};
    alignas(32) double TP34[2] = {};
    alignas(32) double TP35[4] = {};
    alignas(32) double TP36[2] = {};
    alignas(32) double TP37[2] = {};
    alignas(32) double TP38[4] = {};
    alignas(32) double TP39[4] = {};
    alignas(32) double TP40[4] = {};
    alignas(32) double TP41[2] = {};
    alignas(32) double TP42[4] = {};
    alignas(32) double TP43[2] = {};
    alignas(32) double TP44[2] = {};
    alignas(32) double TP45[4] = {};
    alignas(32) double TP46[4] = {};
    alignas(32) double TP47[2] = {};
    alignas(32) double TP48[4] = {};
    alignas(32) double TP49[2] = {};
    alignas(32) double TP50[2] = {};
    alignas(32) double TP51[4] = {};
    alignas(32) double TP52[4] = {};
    alignas(32) double TP53[2] = {};
    alignas(32) double TP54[4] = {};
    alignas(32) double TP55[2] = {};
    alignas(32) double TP56[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c0 += w[0][ic] * FE43_C0_Q4[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c0 += w[1][ic] * FE43_C0_Q4[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c1 += w[0][ic + 4] * FE43_C0_Q4[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c1 += w[1][ic + 4] * FE43_C0_Q4[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c2 += w[0][ic + 8] * FE43_C0_Q4[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c2 += w[1][ic + 8] * FE43_C0_Q4[0][iq][ic];
        alignas(32) double sv4[261];
        sv4[0] = w0_c0 + -1 * w1_c0;
        sv4[1] = sv4[0] * sp[43];
        sv4[2] = sv4[0] * sp[44];
        sv4[3] = sv4[0] * sp[45];
        sv4[4] = w0_c1 + -1 * w1_c1;
        sv4[5] = sv4[4] * sp[52];
        sv4[6] = sv4[4] * sp[53];
        sv4[7] = sv4[4] * sp[54];
        sv4[8] = sv4[5] + sv4[1];
        sv4[9] = sv4[6] + sv4[2];
        sv4[10] = sv4[3] + sv4[7];
        sv4[11] = w0_c2 + -1 * w1_c2;
        sv4[12] = sv4[11] * sp[61];
        sv4[13] = sv4[11] * sp[62];
        sv4[14] = sv4[11] * sp[63];
        sv4[15] = sv4[8] + sv4[12];
        sv4[16] = sv4[9] + sv4[13];
        sv4[17] = sv4[10] + sv4[14];
        sv4[18] = sv4[0] * sp[14];
        sv4[19] = sv4[0] * sp[17];
        sv4[20] = sv4[0] * sp[18];
        sv4[21] = sv4[4] * sp[22];
        sv4[22] = sv4[4] * sp[26];
        sv4[23] = sv4[4] * sp[30];
        sv4[24] = sv4[21] + sv4[18];
        sv4[25] = sv4[22] + sv4[19];
        sv4[26] = sv4[20] + sv4[23];
        sv4[27] = sv4[11] * sp[34];
        sv4[28] = sv4[11] * sp[38];
        sv4[29] = sv4[11] * sp[42];
        sv4[30] = sv4[24] + sv4[27];
        sv4[31] = sv4[25] + sv4[28];
        sv4[32] = sv4[26] + sv4[29];
        sv4[33] = sv4[15] * sv4[30];
        sv4[34] = sv4[15] * sv4[31];
        sv4[35] = sv4[15] * sv4[32];
        sv4[36] = sv4[16] * sv4[30];
        sv4[37] = sv4[16] * sv4[31];
        sv4[38] = sv4[16] * sv4[32];
        sv4[39] = sv4[17] * sv4[30];
        sv4[40] = sv4[17] * sv4[31];
        sv4[41] = sv4[17] * sv4[32];
        sv4[42] = sv4[30] * sp[51];
        sv4[43] = sv4[31] * sp[51];
        sv4[44] = sv4[32] * sp[51];
        sv4[45] = sv4[30] * sp[60];
        sv4[46] = sv4[31] * sp[60];
        sv4[47] = sv4[32] * sp[60];
        sv4[48] = sv4[30] * sp[69];
        sv4[49] = sv4[31] * sp[69];
        sv4[50] = sv4[32] * sp[69];
        sv4[51] = sv4[0] * sp[51];
        sv4[52] = sv4[4] * sp[60];
        sv4[53] = sv4[51] + sv4[52];
        sv4[54] = sv4[11] * sp[69];
        sv4[55] = sv4[53] + sv4[54];
        sv4[56] = sv4[55] * sp[14];
        sv4[57] = sv4[55] * sp[22];
        sv4[58] = sv4[55] * sp[34];
        sv4[59] = sv4[55] * sp[17];
        sv4[60] = sv4[55] * sp[26];
        sv4[61] = sv4[55] * sp[38];
        sv4[62] = sv4[55] * sp[18];
        sv4[63] = sv4[55] * sp[30];
        sv4[64] = sv4[55] * sp[42];
        sv4[65] = sv4[42] + sv4[56];
        sv4[66] = sv4[45] + sv4[57];
        sv4[67] = sv4[48] + sv4[58];
        sv4[68] = sv4[43] + sv4[59];
        sv4[69] = sv4[46] + sv4[60];
        sv4[70] = sv4[49] + sv4[61];
        sv4[71] = sv4[44] + sv4[62];
        sv4[72] = sv4[47] + sv4[63];
        sv4[73] = sv4[50] + sv4[64];
        sv4[74] = sv4[30] * sp[75];
        sv4[75] = sv4[31] * sp[75];
        sv4[76] = sv4[32] * sp[75];
        sv4[77] = sv4[30] * sp[81];
        sv4[78] = sv4[31] * sp[81];
        sv4[79] = sv4[32] * sp[81];
        sv4[80] = sv4[30] * sp[87];
        sv4[81] = sv4[31] * sp[87];
        sv4[82] = sv4[32] * sp[87];
        sv4[83] = sv4[0] * sp[75];
        sv4[84] = sv4[4] * sp[81];
        sv4[85] = sv4[83] + sv4[84];
        sv4[86] = sv4[11] * sp[87];
        sv4[87] = sv4[85] + sv4[86];
        sv4[88] = sv4[87] * sp[14];
        sv4[89] = sv4[87] * sp[22];
        sv4[90] = sv4[87] * sp[34];
        sv4[91] = sv4[87] * sp[17];
        sv4[92] = sv4[87] * sp[26];
        sv4[93] = sv4[87] * sp[38];
        sv4[94] = sv4[87] * sp[18];
        sv4[95] = sv4[87] * sp[30];
        sv4[96] = sv4[87] * sp[42];
        sv4[97] = sv4[74] + sv4[88];
        sv4[98] = sv4[77] + sv4[89];
        sv4[99] = sv4[80] + sv4[90];
        sv4[100] = sv4[75] + sv4[91];
        sv4[101] = sv4[78] + sv4[92];
        sv4[102] = sv4[81] + sv4[93];
        sv4[103] = sv4[76] + sv4[94];
        sv4[104] = sv4[79] + sv4[95];
        sv4[105] = sv4[82] + sv4[96];
        sv4[106] = sv4[30] * sp[93];
        sv4[107] = sv4[31] * sp[93];
        sv4[108] = sv4[32] * sp[93];
        sv4[109] = sv4[30] * sp[99];
        sv4[110] = sv4[31] * sp[99];
        sv4[111] = sv4[32] * sp[99];
        sv4[112] = sv4[30] * sp[105];
        sv4[113] = sv4[31] * sp[105];
        sv4[114] = sv4[32] * sp[105];
        sv4[115] = sv4[0] * sp[93];
        sv4[116] = sv4[4] * sp[99];
        sv4[117] = sv4[115] + sv4[116];
        sv4[118] = sv4[11] * sp[105];
        sv4[119] = sv4[117] + sv4[118];
        sv4[120] = sv4[119] * sp[14];
        sv4[121] = sv4[119] * sp[22];
        sv4[122] = sv4[119] * sp[34];
        sv4[123] = sv4[119] * sp[17];
        sv4[124] = sv4[119] * sp[26];
        sv4[125] = sv4[119] * sp[38];
        sv4[126] = sv4[119] * sp[18];
        sv4[127] = sv4[119] * sp[30];
        sv4[128] = sv4[119] * sp[42];
        sv4[129] = sv4[106] + sv4[120];
        sv4[130] = sv4[109] + sv4[121];
        sv4[131] = sv4[112] + sv4[122];
        sv4[132] = sv4[107] + sv4[123];
        sv4[133] = sv4[110] + sv4[124];
        sv4[134] = sv4[113] + sv4[125];
        sv4[135] = sv4[108] + sv4[126];
        sv4[136] = sv4[111] + sv4[127];
        sv4[137] = sv4[114] + sv4[128];
        sv4[138] = sv4[33] * w[2][0];
        sv4[139] = sv4[36] * w[2][0];
        sv4[140] = sv4[39] * w[2][0];
        sv4[141] = sv4[65] * w[2][0];
        sv4[142] = sv4[66] * w[2][0];
        sv4[143] = sv4[67] * w[2][0];
        sv4[144] = sv4[34] * w[2][0];
        sv4[145] = sv4[37] * w[2][0];
        sv4[146] = sv4[40] * w[2][0];
        sv4[147] = sv4[68] * w[2][0];
        sv4[148] = sv4[69] * w[2][0];
        sv4[149] = sv4[70] * w[2][0];
        sv4[150] = sv4[35] * w[2][0];
        sv4[151] = sv4[38] * w[2][0];
        sv4[152] = sv4[41] * w[2][0];
        sv4[153] = sv4[71] * w[2][0];
        sv4[154] = sv4[72] * w[2][0];
        sv4[155] = sv4[73] * w[2][0];
        sv4[156] = sv4[97] * w[2][0];
        sv4[157] = sv4[98] * w[2][0];
        sv4[158] = sv4[99] * w[2][0];
        sv4[159] = sv4[100] * w[2][0];
        sv4[160] = sv4[101] * w[2][0];
        sv4[161] = sv4[102] * w[2][0];
        sv4[162] = sv4[103] * w[2][0];
        sv4[163] = sv4[104] * w[2][0];
        sv4[164] = sv4[105] * w[2][0];
        sv4[165] = sv4[129] * w[2][0];
        sv4[166] = sv4[130] * w[2][0];
        sv4[167] = sv4[131] * w[2][0];
        sv4[168] = sv4[132] * w[2][0];
        sv4[169] = sv4[133] * w[2][0];
        sv4[170] = sv4[134] * w[2][0];
        sv4[171] = sv4[135] * w[2][0];
        sv4[172] = sv4[136] * w[2][0];
        sv4[173] = sv4[137] * w[2][0];
        sv4[174] = sv4[30] * w[3][0];
        sv4[175] = sv4[31] * w[3][0];
        sv4[176] = sv4[32] * w[3][0];
        sv4[177] = sp[455] + sv4[138];
        sv4[178] = sp[456] + sv4[139];
        sv4[179] = sp[457] + sv4[140];
        sv4[180] = sp[456] + sv4[144];
        sv4[181] = sp[464] + sv4[145];
        sv4[182] = sp[465] + sv4[146];
        sv4[183] = sp[457] + sv4[150];
        sv4[184] = sp[465] + sv4[151];
        sv4[185] = sp[472] + sv4[152];
        sv4[186] = sp[479] + sv4[138];
        sv4[187] = sp[480] + sv4[139];
        sv4[188] = sp[481] + sv4[140];
        sv4[189] = sp[480] + sv4[144];
        sv4[190] = sp[485] + sv4[145];
        sv4[191] = sp[486] + sv4[146];
        sv4[192] = sp[481] + sv4[150];
        sv4[193] = sp[486] + sv4[151];
        sv4[194] = sp[490] + sv4[152];
        sv4[195] = sp[494] + sv4[138];
        sv4[196] = sp[495] + sv4[139];
        sv4[197] = sp[496] + sv4[140];
        sv4[198] = sp[495] + sv4[144];
        sv4[199] = sp[497] + sv4[145];
        sv4[200] = sp[498] + sv4[146];
        sv4[201] = sp[496] + sv4[150];
        sv4[202] = sp[498] + sv4[151];
        sv4[203] = sp[499] + sv4[152];
        sv4[204] = sv4[177] * sp[500];
        sv4[205] = sv4[178] * sp[500];
        sv4[206] = sv4[179] * sp[500];
        sv4[207] = sv4[141] * sp[500];
        sv4[208] = sv4[142] * sp[500];
        sv4[209] = sv4[143] * sp[500];
        sv4[210] = sv4[180] * sp[500];
        sv4[211] = sv4[181] * sp[500];
        sv4[212] = sv4[182] * sp[500];
        sv4[213] = sv4[147] * sp[500];
        sv4[214] = sv4[148] * sp[500];
        sv4[215] = sv4[149] * sp[500];
        sv4[216] = sv4[183] * sp[500];
        sv4[217] = sv4[184] * sp[500];
        sv4[218] = sv4[185] * sp[500];
        sv4[219] = sv4[153] * sp[500];
        sv4[220] = sv4[154] * sp[500];
        sv4[221] = sv4[155] * sp[500];
        sv4[222] = sv4[186] * sp[500];
        sv4[223] = sv4[187] * sp[500];
        sv4[224] = sv4[188] * sp[500];
        sv4[225] = sv4[156] * sp[500];
        sv4[226] = sv4[157] * sp[500];
        sv4[227] = sv4[158] * sp[500];
        sv4[228] = sv4[189] * sp[500];
        sv4[229] = sv4[190] * sp[500];
        sv4[230] = sv4[191] * sp[500];
        sv4[231] = sv4[159] * sp[500];
        sv4[232] = sv4[160] * sp[500];
        sv4[233] = sv4[161] * sp[500];
        sv4[234] = sv4[192] * sp[500];
        sv4[235] = sv4[193] * sp[500];
        sv4[236] = sv4[194] * sp[500];
        sv4[237] = sv4[162] * sp[500];
        sv4[238] = sv4[163] * sp[500];
        sv4[239] = sv4[164] * sp[500];
        sv4[240] = sv4[195] * sp[500];
        sv4[241] = sv4[196] * sp[500];
        sv4[242] = sv4[197] * sp[500];
        sv4[243] = sv4[165] * sp[500];
        sv4[244] = sv4[166] * sp[500];
        sv4[245] = sv4[167] * sp[500];
        sv4[246] = sv4[198] * sp[500];
        sv4[247] = sv4[199] * sp[500];
        sv4[248] = sv4[200] * sp[500];
        sv4[249] = sv4[168] * sp[500];
        sv4[250] = sv4[169] * sp[500];
        sv4[251] = sv4[170] * sp[500];
        sv4[252] = sv4[201] * sp[500];
        sv4[253] = sv4[202] * sp[500];
        sv4[254] = sv4[203] * sp[500];
        sv4[255] = sv4[171] * sp[500];
        sv4[256] = sv4[172] * sp[500];
        sv4[257] = sv4[173] * sp[500];
        sv4[258] = sv4[174] * sp[500];
        sv4[259] = sv4[175] * sp[500];
        sv4[260] = sv4[176] * sp[500];
        const double fw0 = sv4[204] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP0[j] += fw0 * FE43_C0_D001_Q4[0][0][j];
        const double fw1 = sv4[207] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP1[j] += fw1 * FE43_C0_Q4[0][iq][j];
        const double fw2 = sv4[205] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP2[j] += fw2 * FE43_C0_D001_Q4[0][0][j];
        const double fw3 = sv4[206] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP3[j] += fw3 * FE43_C0_D001_Q4[0][0][j];
        const double fw4 = sv4[208] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP4[j] += fw4 * FE43_C0_Q4[0][iq][j];
        const double fw5 = sv4[209] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP5[j] += fw5 * FE43_C0_Q4[0][iq][j];
        const double fw6 = sv4[258] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            TP6[i] += fw6 * FE43_C0_Q4[0][iq][i];
        const double fw7 = sv4[259] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            TP7[i] += fw7 * FE43_C0_Q4[0][iq][i];
        const double fw8 = sv4[260] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            TP8[i] += fw8 * FE43_C0_Q4[0][iq][i];
        const double fw9 = sv4[210] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP9[j] += fw9 * FE43_C0_D001_Q4[0][0][j];
        const double fw10 = sv4[213] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP10[j] += fw10 * FE43_C0_Q4[0][iq][j];
        const double fw11 = sv4[211] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP11[j] += fw11 * FE43_C0_D001_Q4[0][0][j];
        const double fw12 = sv4[212] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP12[j] += fw12 * FE43_C0_D001_Q4[0][0][j];
        const double fw13 = sv4[214] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP13[j] += fw13 * FE43_C0_Q4[0][iq][j];
        const double fw14 = sv4[215] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP14[j] += fw14 * FE43_C0_Q4[0][iq][j];
        const double fw15 = sv4[216] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP15[j] += fw15 * FE43_C0_D001_Q4[0][0][j];
        const double fw16 = sv4[219] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP16[j] += fw16 * FE43_C0_Q4[0][iq][j];
        const double fw17 = sv4[217] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP17[j] += fw17 * FE43_C0_D001_Q4[0][0][j];
        const double fw18 = sv4[218] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP18[j] += fw18 * FE43_C0_D001_Q4[0][0][j];
        const double fw19 = sv4[220] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP19[j] += fw19 * FE43_C0_Q4[0][iq][j];
        const double fw20 = sv4[221] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP20[j] += fw20 * FE43_C0_Q4[0][iq][j];
        const double fw21 = sv4[225] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP21[j] += fw21 * FE43_C0_Q4[0][iq][j];
        const double fw22 = sv4[222] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP22[j] += fw22 * FE43_C0_D001_Q4[0][0][j];
        const double fw23 = sv4[226] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP23[j] += fw23 * FE43_C0_Q4[0][iq][j];
        const double fw24 = sv4[223] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP24[j] += fw24 * FE43_C0_D001_Q4[0][0][j];
        const double fw25 = sv4[224] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP25[j] += fw25 * FE43_C0_D001_Q4[0][0][j];
        const double fw26 = sv4[227] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP26[j] += fw26 * FE43_C0_Q4[0][iq][j];
        const double fw27 = sv4[231] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP27[j] += fw27 * FE43_C0_Q4[0][iq][j];
        const double fw28 = sv4[228] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP28[j] += fw28 * FE43_C0_D001_Q4[0][0][j];
        const double fw29 = sv4[232] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP29[j] += fw29 * FE43_C0_Q4[0][iq][j];
        const double fw30 = sv4[229] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP30[j] += fw30 * FE43_C0_D001_Q4[0][0][j];
        const double fw31 = sv4[230] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP31[j] += fw31 * FE43_C0_D001_Q4[0][0][j];
        const double fw32 = sv4[233] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP32[j] += fw32 * FE43_C0_Q4[0][iq][j];
        const double fw33 = sv4[237] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP33[j] += fw33 * FE43_C0_Q4[0][iq][j];
        const double fw34 = sv4[234] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP34[j] += fw34 * FE43_C0_D001_Q4[0][0][j];
        const double fw35 = sv4[238] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP35[j] += fw35 * FE43_C0_Q4[0][iq][j];
        const double fw36 = sv4[235] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP36[j] += fw36 * FE43_C0_D001_Q4[0][0][j];
        const double fw37 = sv4[236] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP37[j] += fw37 * FE43_C0_D001_Q4[0][0][j];
        const double fw38 = sv4[239] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP38[j] += fw38 * FE43_C0_Q4[0][iq][j];
        const double fw39 = sv4[243] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP39[j] += fw39 * FE43_C0_Q4[0][iq][j];
        const double fw40 = sv4[244] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP40[j] += fw40 * FE43_C0_Q4[0][iq][j];
        const double fw41 = sv4[240] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP41[j] += fw41 * FE43_C0_D001_Q4[0][0][j];
        const double fw42 = sv4[245] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP42[j] += fw42 * FE43_C0_Q4[0][iq][j];
        const double fw43 = sv4[241] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP43[j] += fw43 * FE43_C0_D001_Q4[0][0][j];
        const double fw44 = sv4[242] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP44[j] += fw44 * FE43_C0_D001_Q4[0][0][j];
        const double fw45 = sv4[249] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP45[j] += fw45 * FE43_C0_Q4[0][iq][j];
        const double fw46 = sv4[250] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP46[j] += fw46 * FE43_C0_Q4[0][iq][j];
        const double fw47 = sv4[246] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP47[j] += fw47 * FE43_C0_D001_Q4[0][0][j];
        const double fw48 = sv4[251] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP48[j] += fw48 * FE43_C0_Q4[0][iq][j];
        const double fw49 = sv4[247] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP49[j] += fw49 * FE43_C0_D001_Q4[0][0][j];
        const double fw50 = sv4[248] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP50[j] += fw50 * FE43_C0_D001_Q4[0][0][j];
        const double fw51 = sv4[255] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP51[j] += fw51 * FE43_C0_Q4[0][iq][j];
        const double fw52 = sv4[256] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP52[j] += fw52 * FE43_C0_Q4[0][iq][j];
        const double fw53 = sv4[252] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP53[j] += fw53 * FE43_C0_D001_Q4[0][0][j];
        const double fw54 = sv4[257] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP54[j] += fw54 * FE43_C0_Q4[0][iq][j];
        const double fw55 = sv4[253] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP55[j] += fw55 * FE43_C0_D001_Q4[0][0][j];
        const double fw56 = sv4[254] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP56[j] += fw56 * FE43_C0_D001_Q4[0][0][j];
    }
    A[0] = 0.01666666666666656 * sp[537];
    A[1] = 0.008333333333333293 * sp[537];
    A[2] = 0.008333333333333299 * sp[537];
    A[3] = 0.008333333333333297 * sp[537];
    A[4] = 0.1666666666666667 * sp[510] + 0.1666666666666667 * sp[511] + 0.1666666666666667 * sp[512] + 0.01666666666666656 * sp[540] + 0.1666666666666667 * sp[516] + 0.1666666666666667 * sp[517] + 0.1666666666666667 * sp[518] + 0.1666666666666667 * sp[522] + 0.1666666666666667 * sp[523] + 0.1666666666666667 * sp[524];
    A[5] = -0.1666666666666667 * sp[510] + 0.008333333333333293 * sp[540] + -0.1666666666666667 * sp[516] + -0.1666666666666667 * sp[522];
    A[6] = -0.1666666666666667 * sp[511] + 0.008333333333333299 * sp[540] + -0.1666666666666667 * sp[517] + -0.1666666666666667 * sp[523];
    A[7] = -0.1666666666666667 * sp[512] + 0.008333333333333297 * sp[540] + -0.1666666666666667 * sp[518] + -0.1666666666666667 * sp[524];
    A[8] = 0.1666666666666667 * sp[513] + 0.1666666666666667 * sp[514] + 0.1666666666666667 * sp[515] + 0.01666666666666656 * sp[543] + 0.1666666666666667 * sp[519] + 0.1666666666666667 * sp[520] + 0.1666666666666667 * sp[521] + 0.1666666666666667 * sp[525] + 0.1666666666666667 * sp[526] + 0.1666666666666667 * sp[527];
    A[9] = -0.1666666666666667 * sp[513] + 0.008333333333333293 * sp[543] + -0.1666666666666667 * sp[519] + -0.1666666666666667 * sp[525];
    A[10] = -0.1666666666666667 * sp[514] + 0.008333333333333299 * sp[543] + -0.1666666666666667 * sp[520] + -0.1666666666666667 * sp[526];
    A[11] = -0.1666666666666667 * sp[515] + 0.008333333333333297 * sp[543] + -0.1666666666666667 * sp[521] + -0.1666666666666667 * sp[527];
    A[12] = -0.04166666666666644 * sp[501] + -0.04166666666666644 * sp[502] + -0.04166666666666644 * sp[503];
    A[13] = -0.04166666666666674 * sp[501] + -0.04166666666666674 * sp[502] + -0.04166666666666674 * sp[503];
    A[14] = -0.04166666666666675 * sp[501] + -0.04166666666666675 * sp[502] + -0.04166666666666675 * sp[503];
    A[15] = -0.04166666666666674 * sp[501] + -0.04166666666666674 * sp[502] + -0.04166666666666674 * sp[503];
    std::fill(&A[16], &A[20], 0.0);
    A[20] = 0.008333333333333293 * sp[537];
    A[21] = 0.0166666666666667 * sp[537];
    A[22] = 0.008333333333333373 * sp[537];
    A[23] = 0.008333333333333371 * sp[537];
    A[24] = -0.1666666666666667 * sp[510] + -0.1666666666666667 * sp[511] + -0.1666666666666667 * sp[512] + 0.008333333333333293 * sp[540];
    A[25] = 0.1666666666666667 * sp[510] + 0.0166666666666667 * sp[540];
    A[26] = 0.1666666666666667 * sp[511] + 0.008333333333333373 * sp[540];
    A[27] = 0.1666666666666667 * sp[512] + 0.008333333333333371 * sp[540];
    A[28] = -0.1666666666666667 * sp[513] + -0.1666666666666667 * sp[514] + -0.1666666666666667 * sp[515] + 0.008333333333333293 * sp[543];
    A[29] = 0.1666666666666667 * sp[513] + 0.0166666666666667 * sp[543];
    A[30] = 0.1666666666666667 * sp[514] + 0.008333333333333373 * sp[543];
    A[31] = 0.1666666666666667 * sp[515] + 0.008333333333333371 * sp[543];
    A[32] = 0.04166666666666644 * sp[501];
    A[33] = 0.04166666666666674 * sp[501];
    A[34] = 0.04166666666666675 * sp[501];
    A[35] = 0.04166666666666674 * sp[501];
    std::fill(&A[36], &A[40], 0.0);
    A[40] = 0.008333333333333299 * sp[537];
    A[41] = 0.008333333333333373 * sp[537];
    A[42] = 0.01666666666666671 * sp[537];
    A[43] = 0.008333333333333373 * sp[537];
    A[44] = 0.008333333333333299 * sp[540] + -0.1666666666666667 * sp[516] + -0.1666666666666667 * sp[517] + -0.1666666666666667 * sp[518];
    A[45] = 0.008333333333333373 * sp[540] + 0.1666666666666667 * sp[516];
    A[46] = 0.01666666666666671 * sp[540] + 0.1666666666666667 * sp[517];
    A[47] = 0.008333333333333373 * sp[540] + 0.1666666666666667 * sp[518];
    A[48] = 0.008333333333333299 * sp[543] + -0.1666666666666667 * sp[519] + -0.1666666666666667 * sp[520] + -0.1666666666666667 * sp[521];
    A[49] = 0.008333333333333373 * sp[543] + 0.1666666666666667 * sp[519];
    A[50] = 0.01666666666666671 * sp[543] + 0.1666666666666667 * sp[520];
    A[51] = 0.008333333333333373 * sp[543] + 0.1666666666666667 * sp[521];
    A[52] = 0.04166666666666644 * sp[502];
    A[53] = 0.04166666666666674 * sp[502];
    A[54] = 0.04166666666666675 * sp[502];
    A[55] = 0.04166666666666674 * sp[502];
    std::fill(&A[56], &A[60], 0.0);
    A[60] = 0.008333333333333297 * sp[537];
    A[61] = 0.008333333333333371 * sp[537];
    A[62] = 0.008333333333333373 * sp[537];
    A[63] = 0.01666666666666671 * sp[537];
    A[64] = 0.008333333333333297 * sp[540] + -0.1666666666666667 * sp[522] + -0.1666666666666667 * sp[523] + -0.1666666666666667 * sp[524];
    A[65] = 0.008333333333333371 * sp[540] + 0.1666666666666667 * sp[522];
    A[66] = 0.008333333333333373 * sp[540] + 0.1666666666666667 * sp[523];
    A[67] = 0.01666666666666671 * sp[540] + 0.1666666666666667 * sp[524];
    A[68] = 0.008333333333333297 * sp[543] + -0.1666666666666667 * sp[525] + -0.1666666666666667 * sp[526] + -0.1666666666666667 * sp[527];
    A[69] = 0.008333333333333371 * sp[543] + 0.1666666666666667 * sp[525];
    A[70] = 0.008333333333333373 * sp[543] + 0.1666666666666667 * sp[526];
    A[71] = 0.01666666666666671 * sp[543] + 0.1666666666666667 * sp[527];
    A[72] = 0.04166666666666644 * sp[503];
    A[73] = 0.04166666666666674 * sp[503];
    A[74] = 0.04166666666666675 * sp[503];
    A[75] = 0.04166666666666674 * sp[503];
    std::fill(&A[76], &A[80], 0.0);
    A[80] = 0.1666666666666667 * sp[510] + 0.1666666666666667 * sp[516] + 0.1666666666666667 * sp[522] + 0.01666666666666656 * sp[538] + 0.1666666666666667 * sp[511] + 0.1666666666666667 * sp[517] + 0.1666666666666667 * sp[523] + 0.1666666666666667 * sp[512] + 0.1666666666666667 * sp[518] + 0.1666666666666667 * sp[524];
    A[81] = -0.1666666666666667 * sp[510] + 0.008333333333333293 * sp[538] + -0.1666666666666667 * sp[511] + -0.1666666666666667 * sp[512];
    A[82] = -0.1666666666666667 * sp[516] + 0.008333333333333299 * sp[538] + -0.1666666666666667 * sp[517] + -0.1666666666666667 * sp[518];
    A[83] = -0.1666666666666667 * sp[522] + 0.008333333333333297 * sp[538] + -0.1666666666666667 * sp[523] + -0.1666666666666667 * sp[524];
    A[84] = 0.01666666666666656 * sp[541];
    A[85] = 0.008333333333333293 * sp[541];
    A[86] = 0.008333333333333299 * sp[541];
    A[87] = 0.008333333333333297 * sp[541];
    A[88] = 0.1666666666666667 * sp[528] + 0.1666666666666667 * sp[529] + 0.1666666666666667 * sp[530] + 0.01666666666666656 * sp[544] + 0.1666666666666667 * sp[531] + 0.1666666666666667 * sp[532] + 0.1666666666666667 * sp[533] + 0.1666666666666667 * sp[534] + 0.1666666666666667 * sp[535] + 0.1666666666666667 * sp[536];
    A[89] = -0.1666666666666667 * sp[528] + 0.008333333333333293 * sp[544] + -0.1666666666666667 * sp[531] + -0.1666666666666667 * sp[534];
    A[90] = -0.1666666666666667 * sp[529] + 0.008333333333333299 * sp[544] + -0.1666666666666667 * sp[532] + -0.1666666666666667 * sp[535];
    A[91] = -0.1666666666666667 * sp[530] + 0.008333333333333297 * sp[544] + -0.1666666666666667 * sp[533] + -0.1666666666666667 * sp[536];
    A[92] = -0.04166666666666644 * sp[504] + -0.04166666666666644 * sp[505] + -0.04166666666666644 * sp[506];
    A[93] = -0.04166666666666674 * sp[504] + -0.04166666666666674 * sp[505] + -0.04166666666666674 * sp[506];
    A[94] = -0.04166666666666675 * sp[504] + -0.04166666666666675 * sp[505] + -0.04166666666666675 * sp[506];
    A[95] = -0.04166666666666674 * sp[504] + -0.04166666666666674 * sp[505] + -0.04166666666666674 * sp[506];
    std::fill(&A[96], &A[100], 0.0);
    A[100] = -0.1666666666666667 * sp[510] + -0.1666666666666667 * sp[516] + -0.1666666666666667 * sp[522] + 0.008333333333333293 * sp[538];
    A[101] = 0.1666666666666667 * sp[510] + 0.0166666666666667 * sp[538];
    A[102] = 0.1666666666666667 * sp[516] + 0.008333333333333373 * sp[538];
    A[103] = 0.1666666666666667 * sp[522] + 0.008333333333333371 * sp[538];
    A[104] = 0.008333333333333293 * sp[541];
    A[105] = 0.0166666666666667 * sp[541];
    A[106] = 0.008333333333333373 * sp[541];
    A[107] = 0.008333333333333371 * sp[541];
    A[108] = -0.1666666666666667 * sp[528] + -0.1666666666666667 * sp[529] + -0.1666666666666667 * sp[530] + 0.008333333333333293 * sp[544];
    A[109] = 0.1666666666666667 * sp[528] + 0.0166666666666667 * sp[544];
    A[110] = 0.1666666666666667 * sp[529] + 0.008333333333333373 * sp[544];
    A[111] = 0.1666666666666667 * sp[530] + 0.008333333333333371 * sp[544];
    A[112] = 0.04166666666666644 * sp[504];
    A[113] = 0.04166666666666674 * sp[504];
    A[114] = 0.04166666666666675 * sp[504];
    A[115] = 0.04166666666666674 * sp[504];
    std::fill(&A[116], &A[120], 0.0);
    A[120] = 0.008333333333333299 * sp[538] + -0.1666666666666667 * sp[511] + -0.1666666666666667 * sp[517] + -0.1666666666666667 * sp[523];
    A[121] = 0.008333333333333373 * sp[538] + 0.1666666666666667 * sp[511];
    A[122] = 0.01666666666666671 * sp[538] + 0.1666666666666667 * sp[517];
    A[123] = 0.008333333333333373 * sp[538] + 0.1666666666666667 * sp[523];
    A[124] = 0.008333333333333299 * sp[541];
    A[125] = 0.008333333333333373 * sp[541];
    A[126] = 0.01666666666666671 * sp[541];
    A[127] = 0.008333333333333373 * sp[541];
    A[128] = 0.008333333333333299 * sp[544] + -0.1666666666666667 * sp[531] + -0.1666666666666667 * sp[532] + -0.1666666666666667 * sp[533];
    A[129] = 0.008333333333333373 * sp[544] + 0.1666666666666667 * sp[531];
    A[130] = 0.01666666666666671 * sp[544] + 0.1666666666666667 * sp[532];
    A[131] = 0.008333333333333373 * sp[544] + 0.1666666666666667 * sp[533];
    A[132] = 0.04166666666666644 * sp[505];
    A[133] = 0.04166666666666674 * sp[505];
    A[134] = 0.04166666666666675 * sp[505];
    A[135] = 0.04166666666666674 * sp[505];
    std::fill(&A[136], &A[140], 0.0);
    A[140] = 0.008333333333333297 * sp[538] + -0.1666666666666667 * sp[512] + -0.1666666666666667 * sp[518] + -0.1666666666666667 * sp[524];
    A[141] = 0.008333333333333371 * sp[538] + 0.1666666666666667 * sp[512];
    A[142] = 0.008333333333333373 * sp[538] + 0.1666666666666667 * sp[518];
    A[143] = 0.01666666666666671 * sp[538] + 0.1666666666666667 * sp[524];
    A[144] = 0.008333333333333297 * sp[541];
    A[145] = 0.008333333333333371 * sp[541];
    A[146] = 0.008333333333333373 * sp[541];
    A[147] = 0.01666666666666671 * sp[541];
    A[148] = 0.008333333333333297 * sp[544] + -0.1666666666666667 * sp[534] + -0.1666666666666667 * sp[535] + -0.1666666666666667 * sp[536];
    A[149] = 0.008333333333333371 * sp[544] + 0.1666666666666667 * sp[534];
    A[150] = 0.008333333333333373 * sp[544] + 0.1666666666666667 * sp[535];
    A[151] = 0.01666666666666671 * sp[544] + 0.1666666666666667 * sp[536];
    A[152] = 0.04166666666666644 * sp[506];
    A[153] = 0.04166666666666674 * sp[506];
    A[154] = 0.04166666666666675 * sp[506];
    A[155] = 0.04166666666666674 * sp[506];
    std::fill(&A[156], &A[160], 0.0);
    A[160] = 0.1666666666666667 * sp[513] + 0.1666666666666667 * sp[519] + 0.1666666666666667 * sp[525] + 0.01666666666666656 * sp[539] + 0.1666666666666667 * sp[514] + 0.1666666666666667 * sp[520] + 0.1666666666666667 * sp[526] + 0.1666666666666667 * sp[515] + 0.1666666666666667 * sp[521] + 0.1666666666666667 * sp[527];
    A[161] = -0.1666666666666667 * sp[513] + 0.008333333333333293 * sp[539] + -0.1666666666666667 * sp[514] + -0.1666666666666667 * sp[515];
    A[162] = -0.1666666666666667 * sp[519] + 0.008333333333333299 * sp[539] + -0.1666666666666667 * sp[520] + -0.1666666666666667 * sp[521];
    A[163] = -0.1666666666666667 * sp[525] + 0.008333333333333297 * sp[539] + -0.1666666666666667 * sp[526] + -0.1666666666666667 * sp[527];
    A[164] = 0.1666666666666667 * sp[528] + 0.1666666666666667 * sp[531] + 0.1666666666666667 * sp[534] + 0.01666666666666656 * sp[542] + 0.1666666666666667 * sp[529] + 0.1666666666666667 * sp[532] + 0.1666666666666667 * sp[535] + 0.1666666666666667 * sp[530] + 0.1666666666666667 * sp[533] + 0.1666666666666667 * sp[536];
    A[165] = -0.1666666666666667 * sp[528] + 0.008333333333333293 * sp[542] + -0.1666666666666667 * sp[529] + -0.1666666666666667 * sp[530];
    A[166] = -0.1666666666666667 * sp[531] + 0.008333333333333299 * sp[542] + -0.1666666666666667 * sp[532] + -0.1666666666666667 * sp[533];
    A[167] = -0.1666666666666667 * sp[534] + 0.008333333333333297 * sp[542] + -0.1666666666666667 * sp[535] + -0.1666666666666667 * sp[536];
    A[168] = 0.01666666666666656 * sp[545];
    A[169] = 0.008333333333333293 * sp[545];
    A[170] = 0.008333333333333299 * sp[545];
    A[171] = 0.008333333333333297 * sp[545];
    A[172] = -0.04166666666666644 * sp[507] + -0.04166666666666644 * sp[508] + -0.04166666666666644 * sp[509];
    A[173] = -0.04166666666666674 * sp[507] + -0.04166666666666674 * sp[508] + -0.04166666666666674 * sp[509];
    A[174] = -0.04166666666666675 * sp[507] + -0.04166666666666675 * sp[508] + -0.04166666666666675 * sp[509];
    A[175] = -0.04166666666666674 * sp[507] + -0.04166666666666674 * sp[508] + -0.04166666666666674 * sp[509];
    std::fill(&A[176], &A[180], 0.0);
    A[180] = -0.1666666666666667 * sp[513] + -0.1666666666666667 * sp[519] + -0.1666666666666667 * sp[525] + 0.008333333333333293 * sp[539];
    A[181] = 0.1666666666666667 * sp[513] + 0.0166666666666667 * sp[539];
    A[182] = 0.1666666666666667 * sp[519] + 0.008333333333333373 * sp[539];
    A[183] = 0.1666666666666667 * sp[525] + 0.008333333333333371 * sp[539];
    A[184] = -0.1666666666666667 * sp[528] + -0.1666666666666667 * sp[531] + -0.1666666666666667 * sp[534] + 0.008333333333333293 * sp[542];
    A[185] = 0.1666666666666667 * sp[528] + 0.0166666666666667 * sp[542];
    A[186] = 0.1666666666666667 * sp[531] + 0.008333333333333373 * sp[542];
    A[187] = 0.1666666666666667 * sp[534] + 0.008333333333333371 * sp[542];
    A[188] = 0.008333333333333293 * sp[545];
    A[189] = 0.0166666666666667 * sp[545];
    A[190] = 0.008333333333333373 * sp[545];
    A[191] = 0.008333333333333371 * sp[545];
    A[192] = 0.04166666666666644 * sp[507];
    A[193] = 0.04166666666666674 * sp[507];
    A[194] = 0.04166666666666675 * sp[507];
    A[195] = 0.04166666666666674 * sp[507];
    std::fill(&A[196], &A[200], 0.0);
    A[200] = 0.008333333333333299 * sp[539] + -0.1666666666666667 * sp[514] + -0.1666666666666667 * sp[520] + -0.1666666666666667 * sp[526];
    A[201] = 0.008333333333333373 * sp[539] + 0.1666666666666667 * sp[514];
    A[202] = 0.01666666666666671 * sp[539] + 0.1666666666666667 * sp[520];
    A[203] = 0.008333333333333373 * sp[539] + 0.1666666666666667 * sp[526];
    A[204] = 0.008333333333333299 * sp[542] + -0.1666666666666667 * sp[529] + -0.1666666666666667 * sp[532] + -0.1666666666666667 * sp[535];
    A[205] = 0.008333333333333373 * sp[542] + 0.1666666666666667 * sp[529];
    A[206] = 0.01666666666666671 * sp[542] + 0.1666666666666667 * sp[532];
    A[207] = 0.008333333333333373 * sp[542] + 0.1666666666666667 * sp[535];
    A[208] = 0.008333333333333299 * sp[545];
    A[209] = 0.008333333333333373 * sp[545];
    A[210] = 0.01666666666666671 * sp[545];
    A[211] = 0.008333333333333373 * sp[545];
    A[212] = 0.04166666666666644 * sp[508];
    A[213] = 0.04166666666666674 * sp[508];
    A[214] = 0.04166666666666675 * sp[508];
    A[215] = 0.04166666666666674 * sp[508];
    std::fill(&A[216], &A[220], 0.0);
    A[220] = 0.008333333333333297 * sp[539] + -0.1666666666666667 * sp[515] + -0.1666666666666667 * sp[521] + -0.1666666666666667 * sp[527];
    A[221] = 0.008333333333333371 * sp[539] + 0.1666666666666667 * sp[515];
    A[222] = 0.008333333333333373 * sp[539] + 0.1666666666666667 * sp[521];
    A[223] = 0.01666666666666671 * sp[539] + 0.1666666666666667 * sp[527];
    A[224] = 0.008333333333333297 * sp[542] + -0.1666666666666667 * sp[530] + -0.1666666666666667 * sp[533] + -0.1666666666666667 * sp[536];
    A[225] = 0.008333333333333371 * sp[542] + 0.1666666666666667 * sp[530];
    A[226] = 0.008333333333333373 * sp[542] + 0.1666666666666667 * sp[533];
    A[227] = 0.01666666666666671 * sp[542] + 0.1666666666666667 * sp[536];
    A[228] = 0.008333333333333297 * sp[545];
    A[229] = 0.008333333333333371 * sp[545];
    A[230] = 0.008333333333333373 * sp[545];
    A[231] = 0.01666666666666671 * sp[545];
    A[232] = 0.04166666666666644 * sp[509];
    A[233] = 0.04166666666666674 * sp[509];
    A[234] = 0.04166666666666675 * sp[509];
    A[235] = 0.04166666666666674 * sp[509];
    std::fill(&A[236], &A[240], 0.0);
    A[240] = -0.04166666666666644 * sp[501] + -0.04166666666666644 * sp[502] + -0.04166666666666644 * sp[503];
    A[241] = 0.04166666666666644 * sp[501];
    A[242] = 0.04166666666666644 * sp[502];
    A[243] = 0.04166666666666644 * sp[503];
    A[244] = -0.04166666666666644 * sp[504] + -0.04166666666666644 * sp[505] + -0.04166666666666644 * sp[506];
    A[245] = 0.04166666666666644 * sp[504];
    A[246] = 0.04166666666666644 * sp[505];
    A[247] = 0.04166666666666644 * sp[506];
    A[248] = -0.04166666666666644 * sp[507] + -0.04166666666666644 * sp[508] + -0.04166666666666644 * sp[509];
    A[249] = 0.04166666666666644 * sp[507];
    A[250] = 0.04166666666666644 * sp[508];
    A[251] = 0.04166666666666644 * sp[509];
    A[252] = 0.1666666666666667 * sp[546] + 0.1666666666666667 * sp[547] + 0.1666666666666667 * sp[548] + 0.1666666666666667 * sp[547] + 0.1666666666666667 * sp[549] + 0.1666666666666667 * sp[550] + 0.1666666666666667 * sp[548] + 0.1666666666666667 * sp[550] + 0.1666666666666667 * sp[551];
    A[253] = -0.1666666666666667 * sp[546] + -0.1666666666666667 * sp[547] + -0.1666666666666667 * sp[548];
    A[254] = -0.1666666666666667 * sp[547] + -0.1666666666666667 * sp[549] + -0.1666666666666667 * sp[550];
    A[255] = -0.1666666666666667 * sp[548] + -0.1666666666666667 * sp[550] + -0.1666666666666667 * sp[551];
    std::fill(&A[256], &A[260], 0.0);
    A[260] = -0.04166666666666674 * sp[501] + -0.04166666666666674 * sp[502] + -0.04166666666666674 * sp[503];
    A[261] = 0.04166666666666674 * sp[501];
    A[262] = 0.04166666666666674 * sp[502];
    A[263] = 0.04166666666666674 * sp[503];
    A[264] = -0.04166666666666674 * sp[504] + -0.04166666666666674 * sp[505] + -0.04166666666666674 * sp[506];
    A[265] = 0.04166666666666674 * sp[504];
    A[266] = 0.04166666666666674 * sp[505];
    A[267] = 0.04166666666666674 * sp[506];
    A[268] = -0.04166666666666674 * sp[507] + -0.04166666666666674 * sp[508] + -0.04166666666666674 * sp[509];
    A[269] = 0.04166666666666674 * sp[507];
    A[270] = 0.04166666666666674 * sp[508];
    A[271] = 0.04166666666666674 * sp[509];
    A[272] = -0.1666666666666667 * sp[546] + -0.1666666666666667 * sp[547] + -0.1666666666666667 * sp[548];
    A[273] = 0.1666666666666667 * sp[546];
    A[274] = 0.1666666666666667 * sp[547];
    A[275] = 0.1666666666666667 * sp[548];
    std::fill(&A[276], &A[280], 0.0);
    A[280] = -0.04166666666666675 * sp[501] + -0.04166666666666675 * sp[502] + -0.04166666666666675 * sp[503];
    A[281] = 0.04166666666666675 * sp[501];
    A[282] = 0.04166666666666675 * sp[502];
    A[283] = 0.04166666666666675 * sp[503];
    A[284] = -0.04166666666666675 * sp[504] + -0.04166666666666675 * sp[505] + -0.04166666666666675 * sp[506];
    A[285] = 0.04166666666666675 * sp[504];
    A[286] = 0.04166666666666675 * sp[505];
    A[287] = 0.04166666666666675 * sp[506];
    A[288] = -0.04166666666666675 * sp[507] + -0.04166666666666675 * sp[508] + -0.04166666666666675 * sp[509];
    A[289] = 0.04166666666666675 * sp[507];
    A[290] = 0.04166666666666675 * sp[508];
    A[291] = 0.04166666666666675 * sp[509];
    A[292] = -0.1666666666666667 * sp[547] + -0.1666666666666667 * sp[549] + -0.1666666666666667 * sp[550];
    A[293] = 0.1666666666666667 * sp[547];
    A[294] = 0.1666666666666667 * sp[549];
    A[295] = 0.1666666666666667 * sp[550];
    std::fill(&A[296], &A[300], 0.0);
    A[300] = -0.04166666666666674 * sp[501] + -0.04166666666666674 * sp[502] + -0.04166666666666674 * sp[503];
    A[301] = 0.04166666666666674 * sp[501];
    A[302] = 0.04166666666666674 * sp[502];
    A[303] = 0.04166666666666674 * sp[503];
    A[304] = -0.04166666666666674 * sp[504] + -0.04166666666666674 * sp[505] + -0.04166666666666674 * sp[506];
    A[305] = 0.04166666666666674 * sp[504];
    A[306] = 0.04166666666666674 * sp[505];
    A[307] = 0.04166666666666674 * sp[506];
    A[308] = -0.04166666666666674 * sp[507] + -0.04166666666666674 * sp[508] + -0.04166666666666674 * sp[509];
    A[309] = 0.04166666666666674 * sp[507];
    A[310] = 0.04166666666666674 * sp[508];
    A[311] = 0.04166666666666674 * sp[509];
    A[312] = -0.1666666666666667 * sp[548] + -0.1666666666666667 * sp[550] + -0.1666666666666667 * sp[551];
    A[313] = 0.1666666666666667 * sp[548];
    A[314] = 0.1666666666666667 * sp[550];
    A[315] = 0.1666666666666667 * sp[551];
    std::fill(&A[316], &A[400], 0.0);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + j] += FE43_C0_D001_Q4[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * i + j] += FE43_C0_D001_Q4[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM0[j]] += FE43_C0_D001_Q4[0][0][i] * TP2[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM1[j]] += FE43_C0_D001_Q4[0][0][i] * TP3[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * i + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP4[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * i + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP5[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + j] += FE43_C0_D001_Q4[0][0][j] * TP6[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM0[j]] += FE43_C0_D001_Q4[0][0][j] * TP7[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM1[j]] += FE43_C0_D001_Q4[0][0][j] * TP8[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP9[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM0[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + DM0[j]] += FE43_C0_D001_Q4[0][0][i] * TP11[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + DM1[j]] += FE43_C0_D001_Q4[0][0][i] * TP12[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM0[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP13[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM0[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP14[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP15[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM1[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP16[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + DM0[j]] += FE43_C0_D001_Q4[0][0][i] * TP17[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + DM1[j]] += FE43_C0_D001_Q4[0][0][i] * TP18[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM1[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP19[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM1[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP20[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 4) + j] += FE43_C0_D001_Q4[0][0][i] * TP21[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP22[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 4) + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP23[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM2[j]] += FE43_C0_D001_Q4[0][0][i] * TP24[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM3[j]] += FE43_C0_D001_Q4[0][0][i] * TP25[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 4) + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP26[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + (j + 4)] += FE43_C0_D001_Q4[0][0][j] * TP6[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM2[j]] += FE43_C0_D001_Q4[0][0][j] * TP7[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM3[j]] += FE43_C0_D001_Q4[0][0][j] * TP8[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM2[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP27[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP28[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM2[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP29[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + DM2[j]] += FE43_C0_D001_Q4[0][0][i] * TP30[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + DM3[j]] += FE43_C0_D001_Q4[0][0][i] * TP31[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM2[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP32[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM3[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP33[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP34[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM3[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP35[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + DM2[j]] += FE43_C0_D001_Q4[0][0][i] * TP36[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + DM3[j]] += FE43_C0_D001_Q4[0][0][i] * TP37[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM3[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP38[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 8) + j] += FE43_C0_D001_Q4[0][0][i] * TP39[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 8) + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP40[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP41[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 8) + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP42[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM4[j]] += FE43_C0_D001_Q4[0][0][i] * TP43[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM5[j]] += FE43_C0_D001_Q4[0][0][i] * TP44[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + (j + 8)] += FE43_C0_D001_Q4[0][0][j] * TP6[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM4[j]] += FE43_C0_D001_Q4[0][0][j] * TP7[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM5[j]] += FE43_C0_D001_Q4[0][0][j] * TP8[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM4[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP45[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM4[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP46[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP47[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM4[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP48[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + DM4[j]] += FE43_C0_D001_Q4[0][0][i] * TP49[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + DM5[j]] += FE43_C0_D001_Q4[0][0][i] * TP50[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM5[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP51[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM5[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP52[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP53[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM5[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP54[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + DM4[j]] += FE43_C0_D001_Q4[0][0][i] * TP55[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + DM5[j]] += FE43_C0_D001_Q4[0][0][i] * TP56[j];
  }

};


class fluid3dp1p1_cell_integral_1_210: public ufc::cell_integral
{
public:

  fluid3dp1p1_cell_integral_1_210() : ufc::cell_integral()
  {

  }

  ~fluid3dp1p1_cell_integral_1_210() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 2
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           2
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.04166666666666666, 0.04166666666666666, 0.04166666666666666, 0.04166666666666666 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE43_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE43_C0_Q4[1][4][4] =
        { { { 0.1381966011250091, 0.585410196624969, 0.138196601125011, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.585410196624969, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.138196601125011, 0.585410196624969 },
            { 0.5854101966249672, 0.1381966011250109, 0.138196601125011, 0.138196601125011 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE43_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE43_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE43_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE43_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE43_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE43_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE43_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE43_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE43_C0_D001_Q4[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE43_C0_D001_Q4[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE43_C0_D001_Q4[0][0][0] + w[0][2] * FE43_C0_D001_Q4[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE43_C0_D001_Q4[0][0][0] + w[0][3] * FE43_C0_D001_Q4[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE43_C0_D001_Q4[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE43_C0_D001_Q4[0][0][0] + w[0][6] * FE43_C0_D001_Q4[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE43_C0_D001_Q4[0][0][0] + w[0][7] * FE43_C0_D001_Q4[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE43_C0_D001_Q4[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE43_C0_D001_Q4[0][0][0] + w[0][10] * FE43_C0_D001_Q4[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE43_C0_D001_Q4[0][0][0] + w[0][11] * FE43_C0_D001_Q4[0][0][1];
    alignas(32) double sp[552];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = sp[14] * w[3][0];
    sp[44] = sp[17] * w[3][0];
    sp[45] = sp[18] * w[3][0];
    sp[46] = w0_d0_c0 * sp[14];
    sp[47] = w0_d1_c0 * sp[17];
    sp[48] = sp[46] + sp[47];
    sp[49] = w0_d2_c0 * sp[18];
    sp[50] = sp[48] + sp[49];
    sp[51] = sp[50] * w[3][0];
    sp[52] = sp[22] * w[3][0];
    sp[53] = sp[26] * w[3][0];
    sp[54] = sp[30] * w[3][0];
    sp[55] = w0_d0_c0 * sp[22];
    sp[56] = w0_d1_c0 * sp[26];
    sp[57] = sp[55] + sp[56];
    sp[58] = w0_d2_c0 * sp[30];
    sp[59] = sp[57] + sp[58];
    sp[60] = sp[59] * w[3][0];
    sp[61] = sp[34] * w[3][0];
    sp[62] = sp[38] * w[3][0];
    sp[63] = sp[42] * w[3][0];
    sp[64] = w0_d0_c0 * sp[34];
    sp[65] = w0_d1_c0 * sp[38];
    sp[66] = sp[64] + sp[65];
    sp[67] = w0_d2_c0 * sp[42];
    sp[68] = sp[66] + sp[67];
    sp[69] = sp[68] * w[3][0];
    sp[70] = w0_d0_c1 * sp[14];
    sp[71] = w0_d1_c1 * sp[17];
    sp[72] = sp[70] + sp[71];
    sp[73] = w0_d2_c1 * sp[18];
    sp[74] = sp[72] + sp[73];
    sp[75] = sp[74] * w[3][0];
    sp[76] = w0_d0_c1 * sp[22];
    sp[77] = w0_d1_c1 * sp[26];
    sp[78] = sp[76] + sp[77];
    sp[79] = w0_d2_c1 * sp[30];
    sp[80] = sp[78] + sp[79];
    sp[81] = sp[80] * w[3][0];
    sp[82] = w0_d0_c1 * sp[34];
    sp[83] = w0_d1_c1 * sp[38];
    sp[84] = sp[82] + sp[83];
    sp[85] = w0_d2_c1 * sp[42];
    sp[86] = sp[84] + sp[85];
    sp[87] = sp[86] * w[3][0];
    sp[88] = w0_d0_c2 * sp[14];
    sp[89] = w0_d1_c2 * sp[17];
    sp[90] = sp[88] + sp[89];
    sp[91] = w0_d2_c2 * sp[18];
    sp[92] = sp[90] + sp[91];
    sp[93] = sp[92] * w[3][0];
    sp[94] = w0_d0_c2 * sp[22];
    sp[95] = w0_d1_c2 * sp[26];
    sp[96] = sp[94] + sp[95];
    sp[97] = w0_d2_c2 * sp[30];
    sp[98] = sp[96] + sp[97];
    sp[99] = sp[98] * w[3][0];
    sp[100] = w0_d0_c2 * sp[34];
    sp[101] = w0_d1_c2 * sp[38];
    sp[102] = sp[100] + sp[101];
    sp[103] = w0_d2_c2 * sp[42];
    sp[104] = sp[102] + sp[103];
    sp[105] = sp[104] * w[3][0];
    sp[106] = sp[14] * sp[14];
    sp[107] = sp[14] * sp[17];
    sp[108] = sp[18] * sp[14];
    sp[109] = sp[17] * sp[17];
    sp[110] = sp[18] * sp[17];
    sp[111] = sp[18] * sp[18];
    sp[112] = sp[22] * sp[22];
    sp[113] = sp[22] * sp[26];
    sp[114] = sp[22] * sp[30];
    sp[115] = sp[26] * sp[26];
    sp[116] = sp[26] * sp[30];
    sp[117] = sp[30] * sp[30];
    sp[118] = sp[112] + sp[106];
    sp[119] = sp[113] + sp[107];
    sp[120] = sp[114] + sp[108];
    sp[121] = sp[115] + sp[109];
    sp[122] = sp[116] + sp[110];
    sp[123] = sp[111] + sp[117];
    sp[124] = sp[34] * sp[34];
    sp[125] = sp[34] * sp[38];
    sp[126] = sp[42] * sp[34];
    sp[127] = sp[38] * sp[38];
    sp[128] = sp[42] * sp[38];
    sp[129] = sp[42] * sp[42];
    sp[130] = sp[118] + sp[124];
    sp[131] = sp[119] + sp[125];
    sp[132] = sp[120] + sp[126];
    sp[133] = sp[121] + sp[127];
    sp[134] = sp[122] + sp[128];
    sp[135] = sp[123] + sp[129];
    sp[136] = J_c0 * tetrahedron_reference_edge_vectors[0][0];
    sp[137] = J_c1 * tetrahedron_reference_edge_vectors[0][1];
    sp[138] = sp[136] + sp[137];
    sp[139] = J_c2 * tetrahedron_reference_edge_vectors[0][2];
    sp[140] = sp[138] + sp[139];
    sp[141] = sp[140] * sp[140];
    sp[142] = tetrahedron_reference_edge_vectors[0][0] * J_c3;
    sp[143] = tetrahedron_reference_edge_vectors[0][1] * J_c4;
    sp[144] = sp[142] + sp[143];
    sp[145] = tetrahedron_reference_edge_vectors[0][2] * J_c5;
    sp[146] = sp[144] + sp[145];
    sp[147] = sp[146] * sp[146];
    sp[148] = sp[141] + sp[147];
    sp[149] = tetrahedron_reference_edge_vectors[0][0] * J_c6;
    sp[150] = tetrahedron_reference_edge_vectors[0][1] * J_c7;
    sp[151] = sp[149] + sp[150];
    sp[152] = tetrahedron_reference_edge_vectors[0][2] * J_c8;
    sp[153] = sp[151] + sp[152];
    sp[154] = sp[153] * sp[153];
    sp[155] = sp[148] + sp[154];
    sp[156] = std::sqrt(sp[155]);
    sp[157] = J_c0 * tetrahedron_reference_edge_vectors[5][0];
    sp[158] = J_c1 * tetrahedron_reference_edge_vectors[5][1];
    sp[159] = sp[157] + sp[158];
    sp[160] = J_c2 * tetrahedron_reference_edge_vectors[5][2];
    sp[161] = sp[159] + sp[160];
    sp[162] = sp[161] * sp[161];
    sp[163] = J_c3 * tetrahedron_reference_edge_vectors[5][0];
    sp[164] = J_c4 * tetrahedron_reference_edge_vectors[5][1];
    sp[165] = sp[163] + sp[164];
    sp[166] = J_c5 * tetrahedron_reference_edge_vectors[5][2];
    sp[167] = sp[165] + sp[166];
    sp[168] = sp[167] * sp[167];
    sp[169] = sp[162] + sp[168];
    sp[170] = J_c6 * tetrahedron_reference_edge_vectors[5][0];
    sp[171] = J_c7 * tetrahedron_reference_edge_vectors[5][1];
    sp[172] = sp[170] + sp[171];
    sp[173] = J_c8 * tetrahedron_reference_edge_vectors[5][2];
    sp[174] = sp[172] + sp[173];
    sp[175] = sp[174] * sp[174];
    sp[176] = sp[169] + sp[175];
    sp[177] = std::sqrt(sp[176]);
    sp[178] = sp[156] * sp[177];
    sp[179] = J_c0 * tetrahedron_reference_edge_vectors[2][0];
    sp[180] = J_c1 * tetrahedron_reference_edge_vectors[2][1];
    sp[181] = sp[179] + sp[180];
    sp[182] = J_c2 * tetrahedron_reference_edge_vectors[2][2];
    sp[183] = sp[181] + sp[182];
    sp[184] = sp[183] * sp[183];
    sp[185] = J_c3 * tetrahedron_reference_edge_vectors[2][0];
    sp[186] = J_c4 * tetrahedron_reference_edge_vectors[2][1];
    sp[187] = sp[185] + sp[186];
    sp[188] = J_c5 * tetrahedron_reference_edge_vectors[2][2];
    sp[189] = sp[187] + sp[188];
    sp[190] = sp[189] * sp[189];
    sp[191] = sp[184] + sp[190];
    sp[192] = J_c6 * tetrahedron_reference_edge_vectors[2][0];
    sp[193] = J_c7 * tetrahedron_reference_edge_vectors[2][1];
    sp[194] = sp[192] + sp[193];
    sp[195] = J_c8 * tetrahedron_reference_edge_vectors[2][2];
    sp[196] = sp[194] + sp[195];
    sp[197] = sp[196] * sp[196];
    sp[198] = sp[191] + sp[197];
    sp[199] = std::sqrt(sp[198]);
    sp[200] = J_c0 * tetrahedron_reference_edge_vectors[3][0];
    sp[201] = J_c1 * tetrahedron_reference_edge_vectors[3][1];
    sp[202] = sp[200] + sp[201];
    sp[203] = J_c2 * tetrahedron_reference_edge_vectors[3][2];
    sp[204] = sp[202] + sp[203];
    sp[205] = sp[204] * sp[204];
    sp[206] = J_c3 * tetrahedron_reference_edge_vectors[3][0];
    sp[207] = J_c4 * tetrahedron_reference_edge_vectors[3][1];
    sp[208] = sp[206] + sp[207];
    sp[209] = J_c5 * tetrahedron_reference_edge_vectors[3][2];
    sp[210] = sp[208] + sp[209];
    sp[211] = sp[210] * sp[210];
    sp[212] = sp[205] + sp[211];
    sp[213] = J_c6 * tetrahedron_reference_edge_vectors[3][0];
    sp[214] = J_c7 * tetrahedron_reference_edge_vectors[3][1];
    sp[215] = sp[213] + sp[214];
    sp[216] = J_c8 * tetrahedron_reference_edge_vectors[3][2];
    sp[217] = sp[215] + sp[216];
    sp[218] = sp[217] * sp[217];
    sp[219] = sp[212] + sp[218];
    sp[220] = std::sqrt(sp[219]);
    sp[221] = sp[199] * sp[220];
    sp[222] = J_c0 * tetrahedron_reference_edge_vectors[1][0];
    sp[223] = J_c1 * tetrahedron_reference_edge_vectors[1][1];
    sp[224] = sp[222] + sp[223];
    sp[225] = J_c2 * tetrahedron_reference_edge_vectors[1][2];
    sp[226] = sp[224] + sp[225];
    sp[227] = sp[226] * sp[226];
    sp[228] = J_c3 * tetrahedron_reference_edge_vectors[1][0];
    sp[229] = J_c4 * tetrahedron_reference_edge_vectors[1][1];
    sp[230] = sp[228] + sp[229];
    sp[231] = J_c5 * tetrahedron_reference_edge_vectors[1][2];
    sp[232] = sp[230] + sp[231];
    sp[233] = sp[232] * sp[232];
    sp[234] = sp[227] + sp[233];
    sp[235] = tetrahedron_reference_edge_vectors[1][0] * J_c6;
    sp[236] = tetrahedron_reference_edge_vectors[1][1] * J_c7;
    sp[237] = sp[235] + sp[236];
    sp[238] = tetrahedron_reference_edge_vectors[1][2] * J_c8;
    sp[239] = sp[237] + sp[238];
    sp[240] = sp[239] * sp[239];
    sp[241] = sp[234] + sp[240];
    sp[242] = std::sqrt(sp[241]);
    sp[243] = J_c0 * tetrahedron_reference_edge_vectors[4][0];
    sp[244] = J_c1 * tetrahedron_reference_edge_vectors[4][1];
    sp[245] = sp[243] + sp[244];
    sp[246] = J_c2 * tetrahedron_reference_edge_vectors[4][2];
    sp[247] = sp[245] + sp[246];
    sp[248] = sp[247] * sp[247];
    sp[249] = J_c3 * tetrahedron_reference_edge_vectors[4][0];
    sp[250] = J_c4 * tetrahedron_reference_edge_vectors[4][1];
    sp[251] = sp[249] + sp[250];
    sp[252] = J_c5 * tetrahedron_reference_edge_vectors[4][2];
    sp[253] = sp[251] + sp[252];
    sp[254] = sp[253] * sp[253];
    sp[255] = sp[248] + sp[254];
    sp[256] = J_c6 * tetrahedron_reference_edge_vectors[4][0];
    sp[257] = J_c7 * tetrahedron_reference_edge_vectors[4][1];
    sp[258] = sp[256] + sp[257];
    sp[259] = J_c8 * tetrahedron_reference_edge_vectors[4][2];
    sp[260] = sp[258] + sp[259];
    sp[261] = sp[260] * sp[260];
    sp[262] = sp[255] + sp[261];
    sp[263] = std::sqrt(sp[262]);
    sp[264] = sp[242] * sp[263];
    sp[265] = sp[221] + sp[264];
    sp[266] = sp[265] + sp[178];
    sp[267] = -1 * sp[178] + sp[266] / 2;
    sp[268] = -1 * sp[264] + sp[266] / 2;
    sp[269] = -1 * sp[221] + sp[266] / 2;
    sp[270] = sp[269] * (sp[266] / 2);
    sp[271] = sp[268] * sp[270];
    sp[272] = sp[267] * sp[271];
    sp[273] = std::sqrt(sp[272]);
    sp[274] = tetrahedron_reference_cell_volume * sp[13];
    sp[275] = std::abs(sp[274]);
    sp[276] = sp[273] / (6.0 * sp[275]);
    sp[277] = 2.0 * sp[276] * (2.0 * sp[276]);
    sp[278] = sp[277] / w[4][0];
    sp[279] = sp[278] * w[6][0];
    sp[280] = sp[130] * sp[279];
    sp[281] = sp[131] * sp[279];
    sp[282] = sp[132] * sp[279];
    sp[283] = sp[133] * sp[279];
    sp[284] = sp[134] * sp[279];
    sp[285] = sp[135] * sp[279];
    sp[286] = 3.0 / (2 * w[5][0]) * w[3][0];
    sp[287] = sp[51] + sp[286];
    sp[288] = sp[81] + sp[286];
    sp[289] = sp[105] + sp[286];
    sp[290] = sp[14] + sp[14];
    sp[291] = sp[17] + sp[17];
    sp[292] = sp[18] + sp[18];
    sp[293] = 0.5 * sp[290] * (0.5 * sp[290]);
    sp[294] = 0.5 * sp[290] * (0.5 * sp[291]);
    sp[295] = 0.5 * sp[292] * (0.5 * sp[290]);
    sp[296] = 0.5 * sp[291] * (0.5 * sp[291]);
    sp[297] = 0.5 * sp[292] * (0.5 * sp[291]);
    sp[298] = 0.5 * sp[292] * (0.5 * sp[292]);
    sp[299] = 0.5 * sp[22] * (0.5 * sp[22]);
    sp[300] = 0.5 * sp[22] * (0.5 * sp[26]);
    sp[301] = 0.5 * sp[22] * (0.5 * sp[30]);
    sp[302] = 0.5 * sp[22] * (0.5 * sp[14]);
    sp[303] = 0.5 * sp[22] * (0.5 * sp[17]);
    sp[304] = 0.5 * sp[22] * (0.5 * sp[18]);
    sp[305] = 0.5 * sp[26] * (0.5 * sp[26]);
    sp[306] = 0.5 * sp[26] * (0.5 * sp[30]);
    sp[307] = 0.5 * sp[26] * (0.5 * sp[14]);
    sp[308] = 0.5 * sp[26] * (0.5 * sp[17]);
    sp[309] = 0.5 * sp[26] * (0.5 * sp[18]);
    sp[310] = 0.5 * sp[30] * (0.5 * sp[30]);
    sp[311] = 0.5 * sp[30] * (0.5 * sp[14]);
    sp[312] = 0.5 * sp[30] * (0.5 * sp[17]);
    sp[313] = 0.5 * sp[18] * (0.5 * sp[30]);
    sp[314] = 0.5 * sp[14] * (0.5 * sp[14]);
    sp[315] = 0.5 * sp[14] * (0.5 * sp[17]);
    sp[316] = 0.5 * sp[18] * (0.5 * sp[14]);
    sp[317] = 0.5 * sp[17] * (0.5 * sp[17]);
    sp[318] = 0.5 * sp[18] * (0.5 * sp[17]);
    sp[319] = 0.5 * sp[18] * (0.5 * sp[18]);
    sp[320] = sp[293] + sp[299];
    sp[321] = sp[294] + sp[300];
    sp[322] = sp[295] + sp[301];
    sp[323] = sp[296] + sp[305];
    sp[324] = sp[297] + sp[306];
    sp[325] = sp[298] + sp[310];
    sp[326] = 0.5 * sp[34] * (0.5 * sp[34]);
    sp[327] = 0.5 * sp[34] * (0.5 * sp[38]);
    sp[328] = 0.5 * sp[42] * (0.5 * sp[34]);
    sp[329] = 0.5 * sp[34] * (0.5 * sp[14]);
    sp[330] = 0.5 * sp[34] * (0.5 * sp[17]);
    sp[331] = 0.5 * sp[34] * (0.5 * sp[18]);
    sp[332] = 0.5 * sp[38] * (0.5 * sp[38]);
    sp[333] = 0.5 * sp[42] * (0.5 * sp[38]);
    sp[334] = 0.5 * sp[38] * (0.5 * sp[14]);
    sp[335] = 0.5 * sp[38] * (0.5 * sp[17]);
    sp[336] = 0.5 * sp[38] * (0.5 * sp[18]);
    sp[337] = 0.5 * sp[42] * (0.5 * sp[42]);
    sp[338] = 0.5 * sp[42] * (0.5 * sp[14]);
    sp[339] = 0.5 * sp[42] * (0.5 * sp[17]);
    sp[340] = 0.5 * sp[42] * (0.5 * sp[18]);
    sp[341] = sp[320] + sp[326];
    sp[342] = sp[321] + sp[327];
    sp[343] = sp[322] + sp[328];
    sp[344] = sp[323] + sp[332];
    sp[345] = sp[324] + sp[333];
    sp[346] = sp[325] + sp[337];
    sp[347] = sp[22] + sp[22];
    sp[348] = sp[26] + sp[26];
    sp[349] = sp[30] + sp[30];
    sp[350] = 0.5 * sp[347] * (0.5 * sp[347]);
    sp[351] = 0.5 * sp[347] * (0.5 * sp[348]);
    sp[352] = 0.5 * sp[347] * (0.5 * sp[349]);
    sp[353] = 0.5 * sp[348] * (0.5 * sp[348]);
    sp[354] = 0.5 * sp[348] * (0.5 * sp[349]);
    sp[355] = 0.5 * sp[349] * (0.5 * sp[349]);
    sp[356] = sp[350] + sp[314];
    sp[357] = sp[351] + sp[315];
    sp[358] = sp[352] + sp[316];
    sp[359] = sp[353] + sp[317];
    sp[360] = sp[354] + sp[318];
    sp[361] = sp[355] + sp[319];
    sp[362] = 0.5 * sp[22] * (0.5 * sp[34]);
    sp[363] = 0.5 * sp[26] * (0.5 * sp[34]);
    sp[364] = 0.5 * sp[34] * (0.5 * sp[30]);
    sp[365] = 0.5 * sp[22] * (0.5 * sp[38]);
    sp[366] = 0.5 * sp[26] * (0.5 * sp[38]);
    sp[367] = 0.5 * sp[38] * (0.5 * sp[30]);
    sp[368] = 0.5 * sp[22] * (0.5 * sp[42]);
    sp[369] = 0.5 * sp[26] * (0.5 * sp[42]);
    sp[370] = 0.5 * sp[42] * (0.5 * sp[30]);
    sp[371] = sp[356] + sp[326];
    sp[372] = sp[357] + sp[327];
    sp[373] = sp[358] + sp[328];
    sp[374] = sp[359] + sp[332];
    sp[375] = sp[360] + sp[333];
    sp[376] = sp[361] + sp[337];
    sp[377] = sp[341] + sp[299];
    sp[378] = sp[342] + sp[300];
    sp[379] = sp[343] + sp[301];
    sp[380] = sp[302] + sp[302];
    sp[381] = sp[303] + sp[303];
    sp[382] = sp[304] + sp[304];
    sp[383] = sp[344] + sp[305];
    sp[384] = sp[345] + sp[306];
    sp[385] = sp[307] + sp[307];
    sp[386] = sp[308] + sp[308];
    sp[387] = sp[309] + sp[309];
    sp[388] = sp[346] + sp[310];
    sp[389] = sp[311] + sp[311];
    sp[390] = sp[312] + sp[312];
    sp[391] = sp[313] + sp[313];
    sp[392] = sp[371] + sp[314];
    sp[393] = sp[372] + sp[315];
    sp[394] = sp[373] + sp[316];
    sp[395] = sp[374] + sp[317];
    sp[396] = sp[375] + sp[318];
    sp[397] = sp[376] + sp[319];
    sp[398] = sp[299] + sp[314];
    sp[399] = sp[300] + sp[315];
    sp[400] = sp[301] + sp[316];
    sp[401] = sp[305] + sp[317];
    sp[402] = sp[306] + sp[318];
    sp[403] = sp[319] + sp[310];
    sp[404] = sp[34] + sp[34];
    sp[405] = sp[38] + sp[38];
    sp[406] = sp[42] + sp[42];
    sp[407] = 0.5 * sp[404] * (0.5 * sp[404]);
    sp[408] = 0.5 * sp[404] * (0.5 * sp[405]);
    sp[409] = 0.5 * sp[406] * (0.5 * sp[404]);
    sp[410] = 0.5 * sp[405] * (0.5 * sp[405]);
    sp[411] = 0.5 * sp[406] * (0.5 * sp[405]);
    sp[412] = 0.5 * sp[406] * (0.5 * sp[406]);
    sp[413] = sp[398] + sp[407];
    sp[414] = sp[399] + sp[408];
    sp[415] = sp[400] + sp[409];
    sp[416] = sp[401] + sp[410];
    sp[417] = sp[402] + sp[411];
    sp[418] = sp[403] + sp[412];
    sp[419] = sp[377] + sp[326];
    sp[420] = sp[378] + sp[327];
    sp[421] = sp[379] + sp[328];
    sp[422] = sp[329] + sp[329];
    sp[423] = sp[330] + sp[330];
    sp[424] = sp[331] + sp[331];
    sp[425] = sp[383] + sp[332];
    sp[426] = sp[384] + sp[333];
    sp[427] = sp[334] + sp[334];
    sp[428] = sp[335] + sp[335];
    sp[429] = sp[336] + sp[336];
    sp[430] = sp[388] + sp[337];
    sp[431] = sp[338] + sp[338];
    sp[432] = sp[339] + sp[339];
    sp[433] = sp[340] + sp[340];
    sp[434] = sp[392] + sp[326];
    sp[435] = sp[393] + sp[327];
    sp[436] = sp[394] + sp[328];
    sp[437] = sp[362] + sp[362];
    sp[438] = sp[363] + sp[363];
    sp[439] = sp[364] + sp[364];
    sp[440] = sp[395] + sp[332];
    sp[441] = sp[396] + sp[333];
    sp[442] = sp[365] + sp[365];
    sp[443] = sp[366] + sp[366];
    sp[444] = sp[367] + sp[367];
    sp[445] = sp[397] + sp[337];
    sp[446] = sp[368] + sp[368];
    sp[447] = sp[369] + sp[369];
    sp[448] = sp[370] + sp[370];
    sp[449] = sp[413] + sp[398];
    sp[450] = sp[414] + sp[399];
    sp[451] = sp[415] + sp[400];
    sp[452] = sp[416] + sp[401];
    sp[453] = sp[417] + sp[402];
    sp[454] = sp[418] + sp[403];
    sp[455] = sp[419] * (2.0 * w[4][0]);
    sp[456] = sp[420] * (2.0 * w[4][0]);
    sp[457] = sp[421] * (2.0 * w[4][0]);
    sp[458] = sp[380] * (2.0 * w[4][0]);
    sp[459] = sp[381] * (2.0 * w[4][0]);
    sp[460] = sp[382] * (2.0 * w[4][0]);
    sp[461] = sp[422] * (2.0 * w[4][0]);
    sp[462] = sp[423] * (2.0 * w[4][0]);
    sp[463] = sp[424] * (2.0 * w[4][0]);
    sp[464] = sp[425] * (2.0 * w[4][0]);
    sp[465] = sp[426] * (2.0 * w[4][0]);
    sp[466] = sp[385] * (2.0 * w[4][0]);
    sp[467] = sp[386] * (2.0 * w[4][0]);
    sp[468] = sp[387] * (2.0 * w[4][0]);
    sp[469] = sp[427] * (2.0 * w[4][0]);
    sp[470] = sp[428] * (2.0 * w[4][0]);
    sp[471] = sp[429] * (2.0 * w[4][0]);
    sp[472] = sp[430] * (2.0 * w[4][0]);
    sp[473] = sp[389] * (2.0 * w[4][0]);
    sp[474] = sp[390] * (2.0 * w[4][0]);
    sp[475] = sp[391] * (2.0 * w[4][0]);
    sp[476] = sp[431] * (2.0 * w[4][0]);
    sp[477] = sp[432] * (2.0 * w[4][0]);
    sp[478] = sp[433] * (2.0 * w[4][0]);
    sp[479] = sp[434] * (2.0 * w[4][0]);
    sp[480] = sp[435] * (2.0 * w[4][0]);
    sp[481] = sp[436] * (2.0 * w[4][0]);
    sp[482] = sp[437] * (2.0 * w[4][0]);
    sp[483] = sp[438] * (2.0 * w[4][0]);
    sp[484] = sp[439] * (2.0 * w[4][0]);
    sp[485] = sp[440] * (2.0 * w[4][0]);
    sp[486] = sp[441] * (2.0 * w[4][0]);
    sp[487] = sp[442] * (2.0 * w[4][0]);
    sp[488] = sp[443] * (2.0 * w[4][0]);
    sp[489] = sp[444] * (2.0 * w[4][0]);
    sp[490] = sp[445] * (2.0 * w[4][0]);
    sp[491] = sp[446] * (2.0 * w[4][0]);
    sp[492] = sp[447] * (2.0 * w[4][0]);
    sp[493] = sp[448] * (2.0 * w[4][0]);
    sp[494] = sp[449] * (2.0 * w[4][0]);
    sp[495] = sp[450] * (2.0 * w[4][0]);
    sp[496] = sp[451] * (2.0 * w[4][0]);
    sp[497] = sp[452] * (2.0 * w[4][0]);
    sp[498] = sp[453] * (2.0 * w[4][0]);
    sp[499] = sp[454] * (2.0 * w[4][0]);
    sp[500] = std::abs(sp[13]);
    sp[501] = -1 * sp[14] * sp[500];
    sp[502] = -1 * sp[17] * sp[500];
    sp[503] = -1 * sp[18] * sp[500];
    sp[504] = -1 * sp[22] * sp[500];
    sp[505] = -1 * sp[26] * sp[500];
    sp[506] = -1 * sp[30] * sp[500];
    sp[507] = -1 * sp[34] * sp[500];
    sp[508] = -1 * sp[38] * sp[500];
    sp[509] = -1 * sp[42] * sp[500];
    sp[510] = sp[458] * sp[500];
    sp[511] = sp[459] * sp[500];
    sp[512] = sp[460] * sp[500];
    sp[513] = sp[461] * sp[500];
    sp[514] = sp[462] * sp[500];
    sp[515] = sp[463] * sp[500];
    sp[516] = sp[466] * sp[500];
    sp[517] = sp[467] * sp[500];
    sp[518] = sp[468] * sp[500];
    sp[519] = sp[469] * sp[500];
    sp[520] = sp[470] * sp[500];
    sp[521] = sp[471] * sp[500];
    sp[522] = sp[473] * sp[500];
    sp[523] = sp[474] * sp[500];
    sp[524] = sp[475] * sp[500];
    sp[525] = sp[476] * sp[500];
    sp[526] = sp[477] * sp[500];
    sp[527] = sp[478] * sp[500];
    sp[528] = sp[482] * sp[500];
    sp[529] = sp[483] * sp[500];
    sp[530] = sp[484] * sp[500];
    sp[531] = sp[487] * sp[500];
    sp[532] = sp[488] * sp[500];
    sp[533] = sp[489] * sp[500];
    sp[534] = sp[491] * sp[500];
    sp[535] = sp[492] * sp[500];
    sp[536] = sp[493] * sp[500];
    sp[537] = sp[287] * sp[500];
    sp[538] = sp[75] * sp[500];
    sp[539] = sp[93] * sp[500];
    sp[540] = sp[60] * sp[500];
    sp[541] = sp[288] * sp[500];
    sp[542] = sp[99] * sp[500];
    sp[543] = sp[69] * sp[500];
    sp[544] = sp[87] * sp[500];
    sp[545] = sp[289] * sp[500];
    sp[546] = sp[280] * sp[500];
    sp[547] = sp[281] * sp[500];
    sp[548] = sp[282] * sp[500];
    sp[549] = sp[283] * sp[500];
    sp[550] = sp[284] * sp[500];
    sp[551] = sp[285] * sp[500];
    alignas(32) double TP0[2] = {};
    alignas(32) double TP1[4] = {};
    alignas(32) double TP2[2] = {};
    alignas(32) double TP3[2] = {};
    alignas(32) double TP4[4] = {};
    alignas(32) double TP5[4] = {};
    alignas(32) double TP6[4] = {};
    alignas(32) double TP7[4] = {};
    alignas(32) double TP8[4] = {};
    alignas(32) double TP9[2] = {};
    alignas(32) double TP10[4] = {};
    alignas(32) double TP11[2] = {};
    alignas(32) double TP12[2] = {};
    alignas(32) double TP13[4] = {};
    alignas(32) double TP14[4] = {};
    alignas(32) double TP15[2] = {};
    alignas(32) double TP16[4] = {};
    alignas(32) double TP17[2] = {};
    alignas(32) double TP18[2] = {};
    alignas(32) double TP19[4] = {};
    alignas(32) double TP20[4] = {};
    alignas(32) double TP21[4] = {};
    alignas(32) double TP22[2] = {};
    alignas(32) double TP23[4] = {};
    alignas(32) double TP24[2] = {};
    alignas(32) double TP25[2] = {};
    alignas(32) double TP26[4] = {};
    alignas(32) double TP27[4] = {};
    alignas(32) double TP28[2] = {};
    alignas(32) double TP29[4] = {};
    alignas(32) double TP30[2] = {};
    alignas(32) double TP31[2] = {};
    alignas(32) double TP32[4] = {};
    alignas(32) double TP33[4] = {};
    alignas(32) double TP34[2] = {};
    alignas(32) double TP35[4] = {};
    alignas(32) double TP36[2] = {};
    alignas(32) double TP37[2] = {};
    alignas(32) double TP38[4] = {};
    alignas(32) double TP39[4] = {};
    alignas(32) double TP40[4] = {};
    alignas(32) double TP41[2] = {};
    alignas(32) double TP42[4] = {};
    alignas(32) double TP43[2] = {};
    alignas(32) double TP44[2] = {};
    alignas(32) double TP45[4] = {};
    alignas(32) double TP46[4] = {};
    alignas(32) double TP47[2] = {};
    alignas(32) double TP48[4] = {};
    alignas(32) double TP49[2] = {};
    alignas(32) double TP50[2] = {};
    alignas(32) double TP51[4] = {};
    alignas(32) double TP52[4] = {};
    alignas(32) double TP53[2] = {};
    alignas(32) double TP54[4] = {};
    alignas(32) double TP55[2] = {};
    alignas(32) double TP56[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c0 += w[0][ic] * FE43_C0_Q4[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c0 += w[1][ic] * FE43_C0_Q4[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c1 += w[0][ic + 4] * FE43_C0_Q4[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c1 += w[1][ic + 4] * FE43_C0_Q4[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c2 += w[0][ic + 8] * FE43_C0_Q4[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c2 += w[1][ic + 8] * FE43_C0_Q4[0][iq][ic];
        alignas(32) double sv4[261];
        sv4[0] = w0_c0 + -1 * w1_c0;
        sv4[1] = sv4[0] * sp[43];
        sv4[2] = sv4[0] * sp[44];
        sv4[3] = sv4[0] * sp[45];
        sv4[4] = w0_c1 + -1 * w1_c1;
        sv4[5] = sv4[4] * sp[52];
        sv4[6] = sv4[4] * sp[53];
        sv4[7] = sv4[4] * sp[54];
        sv4[8] = sv4[5] + sv4[1];
        sv4[9] = sv4[6] + sv4[2];
        sv4[10] = sv4[3] + sv4[7];
        sv4[11] = w0_c2 + -1 * w1_c2;
        sv4[12] = sv4[11] * sp[61];
        sv4[13] = sv4[11] * sp[62];
        sv4[14] = sv4[11] * sp[63];
        sv4[15] = sv4[8] + sv4[12];
        sv4[16] = sv4[9] + sv4[13];
        sv4[17] = sv4[10] + sv4[14];
        sv4[18] = sv4[0] * sp[14];
        sv4[19] = sv4[0] * sp[17];
        sv4[20] = sv4[0] * sp[18];
        sv4[21] = sv4[4] * sp[22];
        sv4[22] = sv4[4] * sp[26];
        sv4[23] = sv4[4] * sp[30];
        sv4[24] = sv4[21] + sv4[18];
        sv4[25] = sv4[22] + sv4[19];
        sv4[26] = sv4[20] + sv4[23];
        sv4[27] = sv4[11] * sp[34];
        sv4[28] = sv4[11] * sp[38];
        sv4[29] = sv4[11] * sp[42];
        sv4[30] = sv4[24] + sv4[27];
        sv4[31] = sv4[25] + sv4[28];
        sv4[32] = sv4[26] + sv4[29];
        sv4[33] = sv4[15] * sv4[30];
        sv4[34] = sv4[15] * sv4[31];
        sv4[35] = sv4[15] * sv4[32];
        sv4[36] = sv4[16] * sv4[30];
        sv4[37] = sv4[16] * sv4[31];
        sv4[38] = sv4[16] * sv4[32];
        sv4[39] = sv4[17] * sv4[30];
        sv4[40] = sv4[17] * sv4[31];
        sv4[41] = sv4[17] * sv4[32];
        sv4[42] = sv4[30] * sp[51];
        sv4[43] = sv4[31] * sp[51];
        sv4[44] = sv4[32] * sp[51];
        sv4[45] = sv4[30] * sp[60];
        sv4[46] = sv4[31] * sp[60];
        sv4[47] = sv4[32] * sp[60];
        sv4[48] = sv4[30] * sp[69];
        sv4[49] = sv4[31] * sp[69];
        sv4[50] = sv4[32] * sp[69];
        sv4[51] = sv4[0] * sp[51];
        sv4[52] = sv4[4] * sp[60];
        sv4[53] = sv4[51] + sv4[52];
        sv4[54] = sv4[11] * sp[69];
        sv4[55] = sv4[53] + sv4[54];
        sv4[56] = sv4[55] * sp[14];
        sv4[57] = sv4[55] * sp[22];
        sv4[58] = sv4[55] * sp[34];
        sv4[59] = sv4[55] * sp[17];
        sv4[60] = sv4[55] * sp[26];
        sv4[61] = sv4[55] * sp[38];
        sv4[62] = sv4[55] * sp[18];
        sv4[63] = sv4[55] * sp[30];
        sv4[64] = sv4[55] * sp[42];
        sv4[65] = sv4[42] + sv4[56];
        sv4[66] = sv4[45] + sv4[57];
        sv4[67] = sv4[48] + sv4[58];
        sv4[68] = sv4[43] + sv4[59];
        sv4[69] = sv4[46] + sv4[60];
        sv4[70] = sv4[49] + sv4[61];
        sv4[71] = sv4[44] + sv4[62];
        sv4[72] = sv4[47] + sv4[63];
        sv4[73] = sv4[50] + sv4[64];
        sv4[74] = sv4[30] * sp[75];
        sv4[75] = sv4[31] * sp[75];
        sv4[76] = sv4[32] * sp[75];
        sv4[77] = sv4[30] * sp[81];
        sv4[78] = sv4[31] * sp[81];
        sv4[79] = sv4[32] * sp[81];
        sv4[80] = sv4[30] * sp[87];
        sv4[81] = sv4[31] * sp[87];
        sv4[82] = sv4[32] * sp[87];
        sv4[83] = sv4[0] * sp[75];
        sv4[84] = sv4[4] * sp[81];
        sv4[85] = sv4[83] + sv4[84];
        sv4[86] = sv4[11] * sp[87];
        sv4[87] = sv4[85] + sv4[86];
        sv4[88] = sv4[87] * sp[14];
        sv4[89] = sv4[87] * sp[22];
        sv4[90] = sv4[87] * sp[34];
        sv4[91] = sv4[87] * sp[17];
        sv4[92] = sv4[87] * sp[26];
        sv4[93] = sv4[87] * sp[38];
        sv4[94] = sv4[87] * sp[18];
        sv4[95] = sv4[87] * sp[30];
        sv4[96] = sv4[87] * sp[42];
        sv4[97] = sv4[74] + sv4[88];
        sv4[98] = sv4[77] + sv4[89];
        sv4[99] = sv4[80] + sv4[90];
        sv4[100] = sv4[75] + sv4[91];
        sv4[101] = sv4[78] + sv4[92];
        sv4[102] = sv4[81] + sv4[93];
        sv4[103] = sv4[76] + sv4[94];
        sv4[104] = sv4[79] + sv4[95];
        sv4[105] = sv4[82] + sv4[96];
        sv4[106] = sv4[30] * sp[93];
        sv4[107] = sv4[31] * sp[93];
        sv4[108] = sv4[32] * sp[93];
        sv4[109] = sv4[30] * sp[99];
        sv4[110] = sv4[31] * sp[99];
        sv4[111] = sv4[32] * sp[99];
        sv4[112] = sv4[30] * sp[105];
        sv4[113] = sv4[31] * sp[105];
        sv4[114] = sv4[32] * sp[105];
        sv4[115] = sv4[0] * sp[93];
        sv4[116] = sv4[4] * sp[99];
        sv4[117] = sv4[115] + sv4[116];
        sv4[118] = sv4[11] * sp[105];
        sv4[119] = sv4[117] + sv4[118];
        sv4[120] = sv4[119] * sp[14];
        sv4[121] = sv4[119] * sp[22];
        sv4[122] = sv4[119] * sp[34];
        sv4[123] = sv4[119] * sp[17];
        sv4[124] = sv4[119] * sp[26];
        sv4[125] = sv4[119] * sp[38];
        sv4[126] = sv4[119] * sp[18];
        sv4[127] = sv4[119] * sp[30];
        sv4[128] = sv4[119] * sp[42];
        sv4[129] = sv4[106] + sv4[120];
        sv4[130] = sv4[109] + sv4[121];
        sv4[131] = sv4[112] + sv4[122];
        sv4[132] = sv4[107] + sv4[123];
        sv4[133] = sv4[110] + sv4[124];
        sv4[134] = sv4[113] + sv4[125];
        sv4[135] = sv4[108] + sv4[126];
        sv4[136] = sv4[111] + sv4[127];
        sv4[137] = sv4[114] + sv4[128];
        sv4[138] = sv4[33] * w[2][0];
        sv4[139] = sv4[36] * w[2][0];
        sv4[140] = sv4[39] * w[2][0];
        sv4[141] = sv4[65] * w[2][0];
        sv4[142] = sv4[66] * w[2][0];
        sv4[143] = sv4[67] * w[2][0];
        sv4[144] = sv4[34] * w[2][0];
        sv4[145] = sv4[37] * w[2][0];
        sv4[146] = sv4[40] * w[2][0];
        sv4[147] = sv4[68] * w[2][0];
        sv4[148] = sv4[69] * w[2][0];
        sv4[149] = sv4[70] * w[2][0];
        sv4[150] = sv4[35] * w[2][0];
        sv4[151] = sv4[38] * w[2][0];
        sv4[152] = sv4[41] * w[2][0];
        sv4[153] = sv4[71] * w[2][0];
        sv4[154] = sv4[72] * w[2][0];
        sv4[155] = sv4[73] * w[2][0];
        sv4[156] = sv4[97] * w[2][0];
        sv4[157] = sv4[98] * w[2][0];
        sv4[158] = sv4[99] * w[2][0];
        sv4[159] = sv4[100] * w[2][0];
        sv4[160] = sv4[101] * w[2][0];
        sv4[161] = sv4[102] * w[2][0];
        sv4[162] = sv4[103] * w[2][0];
        sv4[163] = sv4[104] * w[2][0];
        sv4[164] = sv4[105] * w[2][0];
        sv4[165] = sv4[129] * w[2][0];
        sv4[166] = sv4[130] * w[2][0];
        sv4[167] = sv4[131] * w[2][0];
        sv4[168] = sv4[132] * w[2][0];
        sv4[169] = sv4[133] * w[2][0];
        sv4[170] = sv4[134] * w[2][0];
        sv4[171] = sv4[135] * w[2][0];
        sv4[172] = sv4[136] * w[2][0];
        sv4[173] = sv4[137] * w[2][0];
        sv4[174] = sv4[30] * w[3][0];
        sv4[175] = sv4[31] * w[3][0];
        sv4[176] = sv4[32] * w[3][0];
        sv4[177] = sp[455] + sv4[138];
        sv4[178] = sp[456] + sv4[139];
        sv4[179] = sp[457] + sv4[140];
        sv4[180] = sp[456] + sv4[144];
        sv4[181] = sp[464] + sv4[145];
        sv4[182] = sp[465] + sv4[146];
        sv4[183] = sp[457] + sv4[150];
        sv4[184] = sp[465] + sv4[151];
        sv4[185] = sp[472] + sv4[152];
        sv4[186] = sp[479] + sv4[138];
        sv4[187] = sp[480] + sv4[139];
        sv4[188] = sp[481] + sv4[140];
        sv4[189] = sp[480] + sv4[144];
        sv4[190] = sp[485] + sv4[145];
        sv4[191] = sp[486] + sv4[146];
        sv4[192] = sp[481] + sv4[150];
        sv4[193] = sp[486] + sv4[151];
        sv4[194] = sp[490] + sv4[152];
        sv4[195] = sp[494] + sv4[138];
        sv4[196] = sp[495] + sv4[139];
        sv4[197] = sp[496] + sv4[140];
        sv4[198] = sp[495] + sv4[144];
        sv4[199] = sp[497] + sv4[145];
        sv4[200] = sp[498] + sv4[146];
        sv4[201] = sp[496] + sv4[150];
        sv4[202] = sp[498] + sv4[151];
        sv4[203] = sp[499] + sv4[152];
        sv4[204] = sv4[177] * sp[500];
        sv4[205] = sv4[178] * sp[500];
        sv4[206] = sv4[179] * sp[500];
        sv4[207] = sv4[141] * sp[500];
        sv4[208] = sv4[142] * sp[500];
        sv4[209] = sv4[143] * sp[500];
        sv4[210] = sv4[180] * sp[500];
        sv4[211] = sv4[181] * sp[500];
        sv4[212] = sv4[182] * sp[500];
        sv4[213] = sv4[147] * sp[500];
        sv4[214] = sv4[148] * sp[500];
        sv4[215] = sv4[149] * sp[500];
        sv4[216] = sv4[183] * sp[500];
        sv4[217] = sv4[184] * sp[500];
        sv4[218] = sv4[185] * sp[500];
        sv4[219] = sv4[153] * sp[500];
        sv4[220] = sv4[154] * sp[500];
        sv4[221] = sv4[155] * sp[500];
        sv4[222] = sv4[186] * sp[500];
        sv4[223] = sv4[187] * sp[500];
        sv4[224] = sv4[188] * sp[500];
        sv4[225] = sv4[156] * sp[500];
        sv4[226] = sv4[157] * sp[500];
        sv4[227] = sv4[158] * sp[500];
        sv4[228] = sv4[189] * sp[500];
        sv4[229] = sv4[190] * sp[500];
        sv4[230] = sv4[191] * sp[500];
        sv4[231] = sv4[159] * sp[500];
        sv4[232] = sv4[160] * sp[500];
        sv4[233] = sv4[161] * sp[500];
        sv4[234] = sv4[192] * sp[500];
        sv4[235] = sv4[193] * sp[500];
        sv4[236] = sv4[194] * sp[500];
        sv4[237] = sv4[162] * sp[500];
        sv4[238] = sv4[163] * sp[500];
        sv4[239] = sv4[164] * sp[500];
        sv4[240] = sv4[195] * sp[500];
        sv4[241] = sv4[196] * sp[500];
        sv4[242] = sv4[197] * sp[500];
        sv4[243] = sv4[165] * sp[500];
        sv4[244] = sv4[166] * sp[500];
        sv4[245] = sv4[167] * sp[500];
        sv4[246] = sv4[198] * sp[500];
        sv4[247] = sv4[199] * sp[500];
        sv4[248] = sv4[200] * sp[500];
        sv4[249] = sv4[168] * sp[500];
        sv4[250] = sv4[169] * sp[500];
        sv4[251] = sv4[170] * sp[500];
        sv4[252] = sv4[201] * sp[500];
        sv4[253] = sv4[202] * sp[500];
        sv4[254] = sv4[203] * sp[500];
        sv4[255] = sv4[171] * sp[500];
        sv4[256] = sv4[172] * sp[500];
        sv4[257] = sv4[173] * sp[500];
        sv4[258] = sv4[174] * sp[500];
        sv4[259] = sv4[175] * sp[500];
        sv4[260] = sv4[176] * sp[500];
        const double fw0 = sv4[204] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP0[j] += fw0 * FE43_C0_D001_Q4[0][0][j];
        const double fw1 = sv4[207] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP1[j] += fw1 * FE43_C0_Q4[0][iq][j];
        const double fw2 = sv4[205] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP2[j] += fw2 * FE43_C0_D001_Q4[0][0][j];
        const double fw3 = sv4[206] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP3[j] += fw3 * FE43_C0_D001_Q4[0][0][j];
        const double fw4 = sv4[208] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP4[j] += fw4 * FE43_C0_Q4[0][iq][j];
        const double fw5 = sv4[209] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP5[j] += fw5 * FE43_C0_Q4[0][iq][j];
        const double fw6 = sv4[258] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            TP6[i] += fw6 * FE43_C0_Q4[0][iq][i];
        const double fw7 = sv4[259] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            TP7[i] += fw7 * FE43_C0_Q4[0][iq][i];
        const double fw8 = sv4[260] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            TP8[i] += fw8 * FE43_C0_Q4[0][iq][i];
        const double fw9 = sv4[210] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP9[j] += fw9 * FE43_C0_D001_Q4[0][0][j];
        const double fw10 = sv4[213] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP10[j] += fw10 * FE43_C0_Q4[0][iq][j];
        const double fw11 = sv4[211] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP11[j] += fw11 * FE43_C0_D001_Q4[0][0][j];
        const double fw12 = sv4[212] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP12[j] += fw12 * FE43_C0_D001_Q4[0][0][j];
        const double fw13 = sv4[214] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP13[j] += fw13 * FE43_C0_Q4[0][iq][j];
        const double fw14 = sv4[215] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP14[j] += fw14 * FE43_C0_Q4[0][iq][j];
        const double fw15 = sv4[216] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP15[j] += fw15 * FE43_C0_D001_Q4[0][0][j];
        const double fw16 = sv4[219] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP16[j] += fw16 * FE43_C0_Q4[0][iq][j];
        const double fw17 = sv4[217] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP17[j] += fw17 * FE43_C0_D001_Q4[0][0][j];
        const double fw18 = sv4[218] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP18[j] += fw18 * FE43_C0_D001_Q4[0][0][j];
        const double fw19 = sv4[220] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP19[j] += fw19 * FE43_C0_Q4[0][iq][j];
        const double fw20 = sv4[221] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP20[j] += fw20 * FE43_C0_Q4[0][iq][j];
        const double fw21 = sv4[225] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP21[j] += fw21 * FE43_C0_Q4[0][iq][j];
        const double fw22 = sv4[222] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP22[j] += fw22 * FE43_C0_D001_Q4[0][0][j];
        const double fw23 = sv4[226] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP23[j] += fw23 * FE43_C0_Q4[0][iq][j];
        const double fw24 = sv4[223] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP24[j] += fw24 * FE43_C0_D001_Q4[0][0][j];
        const double fw25 = sv4[224] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP25[j] += fw25 * FE43_C0_D001_Q4[0][0][j];
        const double fw26 = sv4[227] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP26[j] += fw26 * FE43_C0_Q4[0][iq][j];
        const double fw27 = sv4[231] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP27[j] += fw27 * FE43_C0_Q4[0][iq][j];
        const double fw28 = sv4[228] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP28[j] += fw28 * FE43_C0_D001_Q4[0][0][j];
        const double fw29 = sv4[232] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP29[j] += fw29 * FE43_C0_Q4[0][iq][j];
        const double fw30 = sv4[229] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP30[j] += fw30 * FE43_C0_D001_Q4[0][0][j];
        const double fw31 = sv4[230] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP31[j] += fw31 * FE43_C0_D001_Q4[0][0][j];
        const double fw32 = sv4[233] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP32[j] += fw32 * FE43_C0_Q4[0][iq][j];
        const double fw33 = sv4[237] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP33[j] += fw33 * FE43_C0_Q4[0][iq][j];
        const double fw34 = sv4[234] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP34[j] += fw34 * FE43_C0_D001_Q4[0][0][j];
        const double fw35 = sv4[238] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP35[j] += fw35 * FE43_C0_Q4[0][iq][j];
        const double fw36 = sv4[235] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP36[j] += fw36 * FE43_C0_D001_Q4[0][0][j];
        const double fw37 = sv4[236] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP37[j] += fw37 * FE43_C0_D001_Q4[0][0][j];
        const double fw38 = sv4[239] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP38[j] += fw38 * FE43_C0_Q4[0][iq][j];
        const double fw39 = sv4[243] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP39[j] += fw39 * FE43_C0_Q4[0][iq][j];
        const double fw40 = sv4[244] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP40[j] += fw40 * FE43_C0_Q4[0][iq][j];
        const double fw41 = sv4[240] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP41[j] += fw41 * FE43_C0_D001_Q4[0][0][j];
        const double fw42 = sv4[245] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP42[j] += fw42 * FE43_C0_Q4[0][iq][j];
        const double fw43 = sv4[241] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP43[j] += fw43 * FE43_C0_D001_Q4[0][0][j];
        const double fw44 = sv4[242] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP44[j] += fw44 * FE43_C0_D001_Q4[0][0][j];
        const double fw45 = sv4[249] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP45[j] += fw45 * FE43_C0_Q4[0][iq][j];
        const double fw46 = sv4[250] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP46[j] += fw46 * FE43_C0_Q4[0][iq][j];
        const double fw47 = sv4[246] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP47[j] += fw47 * FE43_C0_D001_Q4[0][0][j];
        const double fw48 = sv4[251] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP48[j] += fw48 * FE43_C0_Q4[0][iq][j];
        const double fw49 = sv4[247] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP49[j] += fw49 * FE43_C0_D001_Q4[0][0][j];
        const double fw50 = sv4[248] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP50[j] += fw50 * FE43_C0_D001_Q4[0][0][j];
        const double fw51 = sv4[255] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP51[j] += fw51 * FE43_C0_Q4[0][iq][j];
        const double fw52 = sv4[256] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP52[j] += fw52 * FE43_C0_Q4[0][iq][j];
        const double fw53 = sv4[252] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP53[j] += fw53 * FE43_C0_D001_Q4[0][0][j];
        const double fw54 = sv4[257] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP54[j] += fw54 * FE43_C0_Q4[0][iq][j];
        const double fw55 = sv4[253] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP55[j] += fw55 * FE43_C0_D001_Q4[0][0][j];
        const double fw56 = sv4[254] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP56[j] += fw56 * FE43_C0_D001_Q4[0][0][j];
    }
    A[0] = 0.01666666666666656 * sp[537];
    A[1] = 0.008333333333333293 * sp[537];
    A[2] = 0.008333333333333299 * sp[537];
    A[3] = 0.008333333333333297 * sp[537];
    A[4] = 0.1666666666666667 * sp[510] + 0.1666666666666667 * sp[511] + 0.1666666666666667 * sp[512] + 0.01666666666666656 * sp[540] + 0.1666666666666667 * sp[516] + 0.1666666666666667 * sp[517] + 0.1666666666666667 * sp[518] + 0.1666666666666667 * sp[522] + 0.1666666666666667 * sp[523] + 0.1666666666666667 * sp[524];
    A[5] = -0.1666666666666667 * sp[510] + 0.008333333333333293 * sp[540] + -0.1666666666666667 * sp[516] + -0.1666666666666667 * sp[522];
    A[6] = -0.1666666666666667 * sp[511] + 0.008333333333333299 * sp[540] + -0.1666666666666667 * sp[517] + -0.1666666666666667 * sp[523];
    A[7] = -0.1666666666666667 * sp[512] + 0.008333333333333297 * sp[540] + -0.1666666666666667 * sp[518] + -0.1666666666666667 * sp[524];
    A[8] = 0.1666666666666667 * sp[513] + 0.1666666666666667 * sp[514] + 0.1666666666666667 * sp[515] + 0.01666666666666656 * sp[543] + 0.1666666666666667 * sp[519] + 0.1666666666666667 * sp[520] + 0.1666666666666667 * sp[521] + 0.1666666666666667 * sp[525] + 0.1666666666666667 * sp[526] + 0.1666666666666667 * sp[527];
    A[9] = -0.1666666666666667 * sp[513] + 0.008333333333333293 * sp[543] + -0.1666666666666667 * sp[519] + -0.1666666666666667 * sp[525];
    A[10] = -0.1666666666666667 * sp[514] + 0.008333333333333299 * sp[543] + -0.1666666666666667 * sp[520] + -0.1666666666666667 * sp[526];
    A[11] = -0.1666666666666667 * sp[515] + 0.008333333333333297 * sp[543] + -0.1666666666666667 * sp[521] + -0.1666666666666667 * sp[527];
    A[12] = -0.04166666666666644 * sp[501] + -0.04166666666666644 * sp[502] + -0.04166666666666644 * sp[503];
    A[13] = -0.04166666666666674 * sp[501] + -0.04166666666666674 * sp[502] + -0.04166666666666674 * sp[503];
    A[14] = -0.04166666666666675 * sp[501] + -0.04166666666666675 * sp[502] + -0.04166666666666675 * sp[503];
    A[15] = -0.04166666666666674 * sp[501] + -0.04166666666666674 * sp[502] + -0.04166666666666674 * sp[503];
    std::fill(&A[16], &A[20], 0.0);
    A[20] = 0.008333333333333293 * sp[537];
    A[21] = 0.0166666666666667 * sp[537];
    A[22] = 0.008333333333333373 * sp[537];
    A[23] = 0.008333333333333371 * sp[537];
    A[24] = -0.1666666666666667 * sp[510] + -0.1666666666666667 * sp[511] + -0.1666666666666667 * sp[512] + 0.008333333333333293 * sp[540];
    A[25] = 0.1666666666666667 * sp[510] + 0.0166666666666667 * sp[540];
    A[26] = 0.1666666666666667 * sp[511] + 0.008333333333333373 * sp[540];
    A[27] = 0.1666666666666667 * sp[512] + 0.008333333333333371 * sp[540];
    A[28] = -0.1666666666666667 * sp[513] + -0.1666666666666667 * sp[514] + -0.1666666666666667 * sp[515] + 0.008333333333333293 * sp[543];
    A[29] = 0.1666666666666667 * sp[513] + 0.0166666666666667 * sp[543];
    A[30] = 0.1666666666666667 * sp[514] + 0.008333333333333373 * sp[543];
    A[31] = 0.1666666666666667 * sp[515] + 0.008333333333333371 * sp[543];
    A[32] = 0.04166666666666644 * sp[501];
    A[33] = 0.04166666666666674 * sp[501];
    A[34] = 0.04166666666666675 * sp[501];
    A[35] = 0.04166666666666674 * sp[501];
    std::fill(&A[36], &A[40], 0.0);
    A[40] = 0.008333333333333299 * sp[537];
    A[41] = 0.008333333333333373 * sp[537];
    A[42] = 0.01666666666666671 * sp[537];
    A[43] = 0.008333333333333373 * sp[537];
    A[44] = 0.008333333333333299 * sp[540] + -0.1666666666666667 * sp[516] + -0.1666666666666667 * sp[517] + -0.1666666666666667 * sp[518];
    A[45] = 0.008333333333333373 * sp[540] + 0.1666666666666667 * sp[516];
    A[46] = 0.01666666666666671 * sp[540] + 0.1666666666666667 * sp[517];
    A[47] = 0.008333333333333373 * sp[540] + 0.1666666666666667 * sp[518];
    A[48] = 0.008333333333333299 * sp[543] + -0.1666666666666667 * sp[519] + -0.1666666666666667 * sp[520] + -0.1666666666666667 * sp[521];
    A[49] = 0.008333333333333373 * sp[543] + 0.1666666666666667 * sp[519];
    A[50] = 0.01666666666666671 * sp[543] + 0.1666666666666667 * sp[520];
    A[51] = 0.008333333333333373 * sp[543] + 0.1666666666666667 * sp[521];
    A[52] = 0.04166666666666644 * sp[502];
    A[53] = 0.04166666666666674 * sp[502];
    A[54] = 0.04166666666666675 * sp[502];
    A[55] = 0.04166666666666674 * sp[502];
    std::fill(&A[56], &A[60], 0.0);
    A[60] = 0.008333333333333297 * sp[537];
    A[61] = 0.008333333333333371 * sp[537];
    A[62] = 0.008333333333333373 * sp[537];
    A[63] = 0.01666666666666671 * sp[537];
    A[64] = 0.008333333333333297 * sp[540] + -0.1666666666666667 * sp[522] + -0.1666666666666667 * sp[523] + -0.1666666666666667 * sp[524];
    A[65] = 0.008333333333333371 * sp[540] + 0.1666666666666667 * sp[522];
    A[66] = 0.008333333333333373 * sp[540] + 0.1666666666666667 * sp[523];
    A[67] = 0.01666666666666671 * sp[540] + 0.1666666666666667 * sp[524];
    A[68] = 0.008333333333333297 * sp[543] + -0.1666666666666667 * sp[525] + -0.1666666666666667 * sp[526] + -0.1666666666666667 * sp[527];
    A[69] = 0.008333333333333371 * sp[543] + 0.1666666666666667 * sp[525];
    A[70] = 0.008333333333333373 * sp[543] + 0.1666666666666667 * sp[526];
    A[71] = 0.01666666666666671 * sp[543] + 0.1666666666666667 * sp[527];
    A[72] = 0.04166666666666644 * sp[503];
    A[73] = 0.04166666666666674 * sp[503];
    A[74] = 0.04166666666666675 * sp[503];
    A[75] = 0.04166666666666674 * sp[503];
    std::fill(&A[76], &A[80], 0.0);
    A[80] = 0.1666666666666667 * sp[510] + 0.1666666666666667 * sp[516] + 0.1666666666666667 * sp[522] + 0.01666666666666656 * sp[538] + 0.1666666666666667 * sp[511] + 0.1666666666666667 * sp[517] + 0.1666666666666667 * sp[523] + 0.1666666666666667 * sp[512] + 0.1666666666666667 * sp[518] + 0.1666666666666667 * sp[524];
    A[81] = -0.1666666666666667 * sp[510] + 0.008333333333333293 * sp[538] + -0.1666666666666667 * sp[511] + -0.1666666666666667 * sp[512];
    A[82] = -0.1666666666666667 * sp[516] + 0.008333333333333299 * sp[538] + -0.1666666666666667 * sp[517] + -0.1666666666666667 * sp[518];
    A[83] = -0.1666666666666667 * sp[522] + 0.008333333333333297 * sp[538] + -0.1666666666666667 * sp[523] + -0.1666666666666667 * sp[524];
    A[84] = 0.01666666666666656 * sp[541];
    A[85] = 0.008333333333333293 * sp[541];
    A[86] = 0.008333333333333299 * sp[541];
    A[87] = 0.008333333333333297 * sp[541];
    A[88] = 0.1666666666666667 * sp[528] + 0.1666666666666667 * sp[529] + 0.1666666666666667 * sp[530] + 0.01666666666666656 * sp[544] + 0.1666666666666667 * sp[531] + 0.1666666666666667 * sp[532] + 0.1666666666666667 * sp[533] + 0.1666666666666667 * sp[534] + 0.1666666666666667 * sp[535] + 0.1666666666666667 * sp[536];
    A[89] = -0.1666666666666667 * sp[528] + 0.008333333333333293 * sp[544] + -0.1666666666666667 * sp[531] + -0.1666666666666667 * sp[534];
    A[90] = -0.1666666666666667 * sp[529] + 0.008333333333333299 * sp[544] + -0.1666666666666667 * sp[532] + -0.1666666666666667 * sp[535];
    A[91] = -0.1666666666666667 * sp[530] + 0.008333333333333297 * sp[544] + -0.1666666666666667 * sp[533] + -0.1666666666666667 * sp[536];
    A[92] = -0.04166666666666644 * sp[504] + -0.04166666666666644 * sp[505] + -0.04166666666666644 * sp[506];
    A[93] = -0.04166666666666674 * sp[504] + -0.04166666666666674 * sp[505] + -0.04166666666666674 * sp[506];
    A[94] = -0.04166666666666675 * sp[504] + -0.04166666666666675 * sp[505] + -0.04166666666666675 * sp[506];
    A[95] = -0.04166666666666674 * sp[504] + -0.04166666666666674 * sp[505] + -0.04166666666666674 * sp[506];
    std::fill(&A[96], &A[100], 0.0);
    A[100] = -0.1666666666666667 * sp[510] + -0.1666666666666667 * sp[516] + -0.1666666666666667 * sp[522] + 0.008333333333333293 * sp[538];
    A[101] = 0.1666666666666667 * sp[510] + 0.0166666666666667 * sp[538];
    A[102] = 0.1666666666666667 * sp[516] + 0.008333333333333373 * sp[538];
    A[103] = 0.1666666666666667 * sp[522] + 0.008333333333333371 * sp[538];
    A[104] = 0.008333333333333293 * sp[541];
    A[105] = 0.0166666666666667 * sp[541];
    A[106] = 0.008333333333333373 * sp[541];
    A[107] = 0.008333333333333371 * sp[541];
    A[108] = -0.1666666666666667 * sp[528] + -0.1666666666666667 * sp[529] + -0.1666666666666667 * sp[530] + 0.008333333333333293 * sp[544];
    A[109] = 0.1666666666666667 * sp[528] + 0.0166666666666667 * sp[544];
    A[110] = 0.1666666666666667 * sp[529] + 0.008333333333333373 * sp[544];
    A[111] = 0.1666666666666667 * sp[530] + 0.008333333333333371 * sp[544];
    A[112] = 0.04166666666666644 * sp[504];
    A[113] = 0.04166666666666674 * sp[504];
    A[114] = 0.04166666666666675 * sp[504];
    A[115] = 0.04166666666666674 * sp[504];
    std::fill(&A[116], &A[120], 0.0);
    A[120] = 0.008333333333333299 * sp[538] + -0.1666666666666667 * sp[511] + -0.1666666666666667 * sp[517] + -0.1666666666666667 * sp[523];
    A[121] = 0.008333333333333373 * sp[538] + 0.1666666666666667 * sp[511];
    A[122] = 0.01666666666666671 * sp[538] + 0.1666666666666667 * sp[517];
    A[123] = 0.008333333333333373 * sp[538] + 0.1666666666666667 * sp[523];
    A[124] = 0.008333333333333299 * sp[541];
    A[125] = 0.008333333333333373 * sp[541];
    A[126] = 0.01666666666666671 * sp[541];
    A[127] = 0.008333333333333373 * sp[541];
    A[128] = 0.008333333333333299 * sp[544] + -0.1666666666666667 * sp[531] + -0.1666666666666667 * sp[532] + -0.1666666666666667 * sp[533];
    A[129] = 0.008333333333333373 * sp[544] + 0.1666666666666667 * sp[531];
    A[130] = 0.01666666666666671 * sp[544] + 0.1666666666666667 * sp[532];
    A[131] = 0.008333333333333373 * sp[544] + 0.1666666666666667 * sp[533];
    A[132] = 0.04166666666666644 * sp[505];
    A[133] = 0.04166666666666674 * sp[505];
    A[134] = 0.04166666666666675 * sp[505];
    A[135] = 0.04166666666666674 * sp[505];
    std::fill(&A[136], &A[140], 0.0);
    A[140] = 0.008333333333333297 * sp[538] + -0.1666666666666667 * sp[512] + -0.1666666666666667 * sp[518] + -0.1666666666666667 * sp[524];
    A[141] = 0.008333333333333371 * sp[538] + 0.1666666666666667 * sp[512];
    A[142] = 0.008333333333333373 * sp[538] + 0.1666666666666667 * sp[518];
    A[143] = 0.01666666666666671 * sp[538] + 0.1666666666666667 * sp[524];
    A[144] = 0.008333333333333297 * sp[541];
    A[145] = 0.008333333333333371 * sp[541];
    A[146] = 0.008333333333333373 * sp[541];
    A[147] = 0.01666666666666671 * sp[541];
    A[148] = 0.008333333333333297 * sp[544] + -0.1666666666666667 * sp[534] + -0.1666666666666667 * sp[535] + -0.1666666666666667 * sp[536];
    A[149] = 0.008333333333333371 * sp[544] + 0.1666666666666667 * sp[534];
    A[150] = 0.008333333333333373 * sp[544] + 0.1666666666666667 * sp[535];
    A[151] = 0.01666666666666671 * sp[544] + 0.1666666666666667 * sp[536];
    A[152] = 0.04166666666666644 * sp[506];
    A[153] = 0.04166666666666674 * sp[506];
    A[154] = 0.04166666666666675 * sp[506];
    A[155] = 0.04166666666666674 * sp[506];
    std::fill(&A[156], &A[160], 0.0);
    A[160] = 0.1666666666666667 * sp[513] + 0.1666666666666667 * sp[519] + 0.1666666666666667 * sp[525] + 0.01666666666666656 * sp[539] + 0.1666666666666667 * sp[514] + 0.1666666666666667 * sp[520] + 0.1666666666666667 * sp[526] + 0.1666666666666667 * sp[515] + 0.1666666666666667 * sp[521] + 0.1666666666666667 * sp[527];
    A[161] = -0.1666666666666667 * sp[513] + 0.008333333333333293 * sp[539] + -0.1666666666666667 * sp[514] + -0.1666666666666667 * sp[515];
    A[162] = -0.1666666666666667 * sp[519] + 0.008333333333333299 * sp[539] + -0.1666666666666667 * sp[520] + -0.1666666666666667 * sp[521];
    A[163] = -0.1666666666666667 * sp[525] + 0.008333333333333297 * sp[539] + -0.1666666666666667 * sp[526] + -0.1666666666666667 * sp[527];
    A[164] = 0.1666666666666667 * sp[528] + 0.1666666666666667 * sp[531] + 0.1666666666666667 * sp[534] + 0.01666666666666656 * sp[542] + 0.1666666666666667 * sp[529] + 0.1666666666666667 * sp[532] + 0.1666666666666667 * sp[535] + 0.1666666666666667 * sp[530] + 0.1666666666666667 * sp[533] + 0.1666666666666667 * sp[536];
    A[165] = -0.1666666666666667 * sp[528] + 0.008333333333333293 * sp[542] + -0.1666666666666667 * sp[529] + -0.1666666666666667 * sp[530];
    A[166] = -0.1666666666666667 * sp[531] + 0.008333333333333299 * sp[542] + -0.1666666666666667 * sp[532] + -0.1666666666666667 * sp[533];
    A[167] = -0.1666666666666667 * sp[534] + 0.008333333333333297 * sp[542] + -0.1666666666666667 * sp[535] + -0.1666666666666667 * sp[536];
    A[168] = 0.01666666666666656 * sp[545];
    A[169] = 0.008333333333333293 * sp[545];
    A[170] = 0.008333333333333299 * sp[545];
    A[171] = 0.008333333333333297 * sp[545];
    A[172] = -0.04166666666666644 * sp[507] + -0.04166666666666644 * sp[508] + -0.04166666666666644 * sp[509];
    A[173] = -0.04166666666666674 * sp[507] + -0.04166666666666674 * sp[508] + -0.04166666666666674 * sp[509];
    A[174] = -0.04166666666666675 * sp[507] + -0.04166666666666675 * sp[508] + -0.04166666666666675 * sp[509];
    A[175] = -0.04166666666666674 * sp[507] + -0.04166666666666674 * sp[508] + -0.04166666666666674 * sp[509];
    std::fill(&A[176], &A[180], 0.0);
    A[180] = -0.1666666666666667 * sp[513] + -0.1666666666666667 * sp[519] + -0.1666666666666667 * sp[525] + 0.008333333333333293 * sp[539];
    A[181] = 0.1666666666666667 * sp[513] + 0.0166666666666667 * sp[539];
    A[182] = 0.1666666666666667 * sp[519] + 0.008333333333333373 * sp[539];
    A[183] = 0.1666666666666667 * sp[525] + 0.008333333333333371 * sp[539];
    A[184] = -0.1666666666666667 * sp[528] + -0.1666666666666667 * sp[531] + -0.1666666666666667 * sp[534] + 0.008333333333333293 * sp[542];
    A[185] = 0.1666666666666667 * sp[528] + 0.0166666666666667 * sp[542];
    A[186] = 0.1666666666666667 * sp[531] + 0.008333333333333373 * sp[542];
    A[187] = 0.1666666666666667 * sp[534] + 0.008333333333333371 * sp[542];
    A[188] = 0.008333333333333293 * sp[545];
    A[189] = 0.0166666666666667 * sp[545];
    A[190] = 0.008333333333333373 * sp[545];
    A[191] = 0.008333333333333371 * sp[545];
    A[192] = 0.04166666666666644 * sp[507];
    A[193] = 0.04166666666666674 * sp[507];
    A[194] = 0.04166666666666675 * sp[507];
    A[195] = 0.04166666666666674 * sp[507];
    std::fill(&A[196], &A[200], 0.0);
    A[200] = 0.008333333333333299 * sp[539] + -0.1666666666666667 * sp[514] + -0.1666666666666667 * sp[520] + -0.1666666666666667 * sp[526];
    A[201] = 0.008333333333333373 * sp[539] + 0.1666666666666667 * sp[514];
    A[202] = 0.01666666666666671 * sp[539] + 0.1666666666666667 * sp[520];
    A[203] = 0.008333333333333373 * sp[539] + 0.1666666666666667 * sp[526];
    A[204] = 0.008333333333333299 * sp[542] + -0.1666666666666667 * sp[529] + -0.1666666666666667 * sp[532] + -0.1666666666666667 * sp[535];
    A[205] = 0.008333333333333373 * sp[542] + 0.1666666666666667 * sp[529];
    A[206] = 0.01666666666666671 * sp[542] + 0.1666666666666667 * sp[532];
    A[207] = 0.008333333333333373 * sp[542] + 0.1666666666666667 * sp[535];
    A[208] = 0.008333333333333299 * sp[545];
    A[209] = 0.008333333333333373 * sp[545];
    A[210] = 0.01666666666666671 * sp[545];
    A[211] = 0.008333333333333373 * sp[545];
    A[212] = 0.04166666666666644 * sp[508];
    A[213] = 0.04166666666666674 * sp[508];
    A[214] = 0.04166666666666675 * sp[508];
    A[215] = 0.04166666666666674 * sp[508];
    std::fill(&A[216], &A[220], 0.0);
    A[220] = 0.008333333333333297 * sp[539] + -0.1666666666666667 * sp[515] + -0.1666666666666667 * sp[521] + -0.1666666666666667 * sp[527];
    A[221] = 0.008333333333333371 * sp[539] + 0.1666666666666667 * sp[515];
    A[222] = 0.008333333333333373 * sp[539] + 0.1666666666666667 * sp[521];
    A[223] = 0.01666666666666671 * sp[539] + 0.1666666666666667 * sp[527];
    A[224] = 0.008333333333333297 * sp[542] + -0.1666666666666667 * sp[530] + -0.1666666666666667 * sp[533] + -0.1666666666666667 * sp[536];
    A[225] = 0.008333333333333371 * sp[542] + 0.1666666666666667 * sp[530];
    A[226] = 0.008333333333333373 * sp[542] + 0.1666666666666667 * sp[533];
    A[227] = 0.01666666666666671 * sp[542] + 0.1666666666666667 * sp[536];
    A[228] = 0.008333333333333297 * sp[545];
    A[229] = 0.008333333333333371 * sp[545];
    A[230] = 0.008333333333333373 * sp[545];
    A[231] = 0.01666666666666671 * sp[545];
    A[232] = 0.04166666666666644 * sp[509];
    A[233] = 0.04166666666666674 * sp[509];
    A[234] = 0.04166666666666675 * sp[509];
    A[235] = 0.04166666666666674 * sp[509];
    std::fill(&A[236], &A[240], 0.0);
    A[240] = -0.04166666666666644 * sp[501] + -0.04166666666666644 * sp[502] + -0.04166666666666644 * sp[503];
    A[241] = 0.04166666666666644 * sp[501];
    A[242] = 0.04166666666666644 * sp[502];
    A[243] = 0.04166666666666644 * sp[503];
    A[244] = -0.04166666666666644 * sp[504] + -0.04166666666666644 * sp[505] + -0.04166666666666644 * sp[506];
    A[245] = 0.04166666666666644 * sp[504];
    A[246] = 0.04166666666666644 * sp[505];
    A[247] = 0.04166666666666644 * sp[506];
    A[248] = -0.04166666666666644 * sp[507] + -0.04166666666666644 * sp[508] + -0.04166666666666644 * sp[509];
    A[249] = 0.04166666666666644 * sp[507];
    A[250] = 0.04166666666666644 * sp[508];
    A[251] = 0.04166666666666644 * sp[509];
    A[252] = 0.1666666666666667 * sp[546] + 0.1666666666666667 * sp[547] + 0.1666666666666667 * sp[548] + 0.1666666666666667 * sp[547] + 0.1666666666666667 * sp[549] + 0.1666666666666667 * sp[550] + 0.1666666666666667 * sp[548] + 0.1666666666666667 * sp[550] + 0.1666666666666667 * sp[551];
    A[253] = -0.1666666666666667 * sp[546] + -0.1666666666666667 * sp[547] + -0.1666666666666667 * sp[548];
    A[254] = -0.1666666666666667 * sp[547] + -0.1666666666666667 * sp[549] + -0.1666666666666667 * sp[550];
    A[255] = -0.1666666666666667 * sp[548] + -0.1666666666666667 * sp[550] + -0.1666666666666667 * sp[551];
    std::fill(&A[256], &A[260], 0.0);
    A[260] = -0.04166666666666674 * sp[501] + -0.04166666666666674 * sp[502] + -0.04166666666666674 * sp[503];
    A[261] = 0.04166666666666674 * sp[501];
    A[262] = 0.04166666666666674 * sp[502];
    A[263] = 0.04166666666666674 * sp[503];
    A[264] = -0.04166666666666674 * sp[504] + -0.04166666666666674 * sp[505] + -0.04166666666666674 * sp[506];
    A[265] = 0.04166666666666674 * sp[504];
    A[266] = 0.04166666666666674 * sp[505];
    A[267] = 0.04166666666666674 * sp[506];
    A[268] = -0.04166666666666674 * sp[507] + -0.04166666666666674 * sp[508] + -0.04166666666666674 * sp[509];
    A[269] = 0.04166666666666674 * sp[507];
    A[270] = 0.04166666666666674 * sp[508];
    A[271] = 0.04166666666666674 * sp[509];
    A[272] = -0.1666666666666667 * sp[546] + -0.1666666666666667 * sp[547] + -0.1666666666666667 * sp[548];
    A[273] = 0.1666666666666667 * sp[546];
    A[274] = 0.1666666666666667 * sp[547];
    A[275] = 0.1666666666666667 * sp[548];
    std::fill(&A[276], &A[280], 0.0);
    A[280] = -0.04166666666666675 * sp[501] + -0.04166666666666675 * sp[502] + -0.04166666666666675 * sp[503];
    A[281] = 0.04166666666666675 * sp[501];
    A[282] = 0.04166666666666675 * sp[502];
    A[283] = 0.04166666666666675 * sp[503];
    A[284] = -0.04166666666666675 * sp[504] + -0.04166666666666675 * sp[505] + -0.04166666666666675 * sp[506];
    A[285] = 0.04166666666666675 * sp[504];
    A[286] = 0.04166666666666675 * sp[505];
    A[287] = 0.04166666666666675 * sp[506];
    A[288] = -0.04166666666666675 * sp[507] + -0.04166666666666675 * sp[508] + -0.04166666666666675 * sp[509];
    A[289] = 0.04166666666666675 * sp[507];
    A[290] = 0.04166666666666675 * sp[508];
    A[291] = 0.04166666666666675 * sp[509];
    A[292] = -0.1666666666666667 * sp[547] + -0.1666666666666667 * sp[549] + -0.1666666666666667 * sp[550];
    A[293] = 0.1666666666666667 * sp[547];
    A[294] = 0.1666666666666667 * sp[549];
    A[295] = 0.1666666666666667 * sp[550];
    std::fill(&A[296], &A[300], 0.0);
    A[300] = -0.04166666666666674 * sp[501] + -0.04166666666666674 * sp[502] + -0.04166666666666674 * sp[503];
    A[301] = 0.04166666666666674 * sp[501];
    A[302] = 0.04166666666666674 * sp[502];
    A[303] = 0.04166666666666674 * sp[503];
    A[304] = -0.04166666666666674 * sp[504] + -0.04166666666666674 * sp[505] + -0.04166666666666674 * sp[506];
    A[305] = 0.04166666666666674 * sp[504];
    A[306] = 0.04166666666666674 * sp[505];
    A[307] = 0.04166666666666674 * sp[506];
    A[308] = -0.04166666666666674 * sp[507] + -0.04166666666666674 * sp[508] + -0.04166666666666674 * sp[509];
    A[309] = 0.04166666666666674 * sp[507];
    A[310] = 0.04166666666666674 * sp[508];
    A[311] = 0.04166666666666674 * sp[509];
    A[312] = -0.1666666666666667 * sp[548] + -0.1666666666666667 * sp[550] + -0.1666666666666667 * sp[551];
    A[313] = 0.1666666666666667 * sp[548];
    A[314] = 0.1666666666666667 * sp[550];
    A[315] = 0.1666666666666667 * sp[551];
    std::fill(&A[316], &A[400], 0.0);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + j] += FE43_C0_D001_Q4[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * i + j] += FE43_C0_D001_Q4[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM0[j]] += FE43_C0_D001_Q4[0][0][i] * TP2[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM1[j]] += FE43_C0_D001_Q4[0][0][i] * TP3[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * i + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP4[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * i + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP5[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + j] += FE43_C0_D001_Q4[0][0][j] * TP6[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM0[j]] += FE43_C0_D001_Q4[0][0][j] * TP7[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM1[j]] += FE43_C0_D001_Q4[0][0][j] * TP8[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP9[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM0[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + DM0[j]] += FE43_C0_D001_Q4[0][0][i] * TP11[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + DM1[j]] += FE43_C0_D001_Q4[0][0][i] * TP12[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM0[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP13[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM0[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP14[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP15[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM1[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP16[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + DM0[j]] += FE43_C0_D001_Q4[0][0][i] * TP17[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + DM1[j]] += FE43_C0_D001_Q4[0][0][i] * TP18[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM1[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP19[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM1[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP20[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 4) + j] += FE43_C0_D001_Q4[0][0][i] * TP21[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP22[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 4) + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP23[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM2[j]] += FE43_C0_D001_Q4[0][0][i] * TP24[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM3[j]] += FE43_C0_D001_Q4[0][0][i] * TP25[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 4) + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP26[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + (j + 4)] += FE43_C0_D001_Q4[0][0][j] * TP6[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM2[j]] += FE43_C0_D001_Q4[0][0][j] * TP7[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM3[j]] += FE43_C0_D001_Q4[0][0][j] * TP8[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM2[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP27[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP28[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM2[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP29[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + DM2[j]] += FE43_C0_D001_Q4[0][0][i] * TP30[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + DM3[j]] += FE43_C0_D001_Q4[0][0][i] * TP31[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM2[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP32[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM3[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP33[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP34[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM3[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP35[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + DM2[j]] += FE43_C0_D001_Q4[0][0][i] * TP36[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + DM3[j]] += FE43_C0_D001_Q4[0][0][i] * TP37[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM3[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP38[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 8) + j] += FE43_C0_D001_Q4[0][0][i] * TP39[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 8) + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP40[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP41[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 8) + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP42[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM4[j]] += FE43_C0_D001_Q4[0][0][i] * TP43[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM5[j]] += FE43_C0_D001_Q4[0][0][i] * TP44[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + (j + 8)] += FE43_C0_D001_Q4[0][0][j] * TP6[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM4[j]] += FE43_C0_D001_Q4[0][0][j] * TP7[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM5[j]] += FE43_C0_D001_Q4[0][0][j] * TP8[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM4[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP45[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM4[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP46[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP47[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM4[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP48[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + DM4[j]] += FE43_C0_D001_Q4[0][0][i] * TP49[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + DM5[j]] += FE43_C0_D001_Q4[0][0][i] * TP50[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM5[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP51[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM5[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP52[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP53[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM5[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP54[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + DM4[j]] += FE43_C0_D001_Q4[0][0][i] * TP55[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + DM5[j]] += FE43_C0_D001_Q4[0][0][i] * TP56[j];
  }

};


class fluid3dp1p1_cell_integral_1_214: public ufc::cell_integral
{
public:

  fluid3dp1p1_cell_integral_1_214() : ufc::cell_integral()
  {

  }

  ~fluid3dp1p1_cell_integral_1_214() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 2
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           2
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.04166666666666666, 0.04166666666666666, 0.04166666666666666, 0.04166666666666666 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE43_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE43_C0_Q4[1][4][4] =
        { { { 0.1381966011250091, 0.585410196624969, 0.138196601125011, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.585410196624969, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.138196601125011, 0.585410196624969 },
            { 0.5854101966249672, 0.1381966011250109, 0.138196601125011, 0.138196601125011 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE43_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE43_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE43_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE43_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE43_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE43_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE43_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE43_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE43_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE43_C0_D001_Q4[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE43_C0_D001_Q4[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE43_C0_D001_Q4[0][0][0] + w[0][2] * FE43_C0_D001_Q4[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE43_C0_D001_Q4[0][0][0] + w[0][3] * FE43_C0_D001_Q4[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE43_C0_D001_Q4[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE43_C0_D001_Q4[0][0][0] + w[0][6] * FE43_C0_D001_Q4[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE43_C0_D001_Q4[0][0][0] + w[0][7] * FE43_C0_D001_Q4[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE43_C0_D001_Q4[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE43_C0_D001_Q4[0][0][0] + w[0][10] * FE43_C0_D001_Q4[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE43_C0_D001_Q4[0][0][0] + w[0][11] * FE43_C0_D001_Q4[0][0][1];
    alignas(32) double sp[552];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = sp[14] * w[3][0];
    sp[44] = sp[17] * w[3][0];
    sp[45] = sp[18] * w[3][0];
    sp[46] = w0_d0_c0 * sp[14];
    sp[47] = w0_d1_c0 * sp[17];
    sp[48] = sp[46] + sp[47];
    sp[49] = w0_d2_c0 * sp[18];
    sp[50] = sp[48] + sp[49];
    sp[51] = sp[50] * w[3][0];
    sp[52] = sp[22] * w[3][0];
    sp[53] = sp[26] * w[3][0];
    sp[54] = sp[30] * w[3][0];
    sp[55] = w0_d0_c0 * sp[22];
    sp[56] = w0_d1_c0 * sp[26];
    sp[57] = sp[55] + sp[56];
    sp[58] = w0_d2_c0 * sp[30];
    sp[59] = sp[57] + sp[58];
    sp[60] = sp[59] * w[3][0];
    sp[61] = sp[34] * w[3][0];
    sp[62] = sp[38] * w[3][0];
    sp[63] = sp[42] * w[3][0];
    sp[64] = w0_d0_c0 * sp[34];
    sp[65] = w0_d1_c0 * sp[38];
    sp[66] = sp[64] + sp[65];
    sp[67] = w0_d2_c0 * sp[42];
    sp[68] = sp[66] + sp[67];
    sp[69] = sp[68] * w[3][0];
    sp[70] = w0_d0_c1 * sp[14];
    sp[71] = w0_d1_c1 * sp[17];
    sp[72] = sp[70] + sp[71];
    sp[73] = w0_d2_c1 * sp[18];
    sp[74] = sp[72] + sp[73];
    sp[75] = sp[74] * w[3][0];
    sp[76] = w0_d0_c1 * sp[22];
    sp[77] = w0_d1_c1 * sp[26];
    sp[78] = sp[76] + sp[77];
    sp[79] = w0_d2_c1 * sp[30];
    sp[80] = sp[78] + sp[79];
    sp[81] = sp[80] * w[3][0];
    sp[82] = w0_d0_c1 * sp[34];
    sp[83] = w0_d1_c1 * sp[38];
    sp[84] = sp[82] + sp[83];
    sp[85] = w0_d2_c1 * sp[42];
    sp[86] = sp[84] + sp[85];
    sp[87] = sp[86] * w[3][0];
    sp[88] = w0_d0_c2 * sp[14];
    sp[89] = w0_d1_c2 * sp[17];
    sp[90] = sp[88] + sp[89];
    sp[91] = w0_d2_c2 * sp[18];
    sp[92] = sp[90] + sp[91];
    sp[93] = sp[92] * w[3][0];
    sp[94] = w0_d0_c2 * sp[22];
    sp[95] = w0_d1_c2 * sp[26];
    sp[96] = sp[94] + sp[95];
    sp[97] = w0_d2_c2 * sp[30];
    sp[98] = sp[96] + sp[97];
    sp[99] = sp[98] * w[3][0];
    sp[100] = w0_d0_c2 * sp[34];
    sp[101] = w0_d1_c2 * sp[38];
    sp[102] = sp[100] + sp[101];
    sp[103] = w0_d2_c2 * sp[42];
    sp[104] = sp[102] + sp[103];
    sp[105] = sp[104] * w[3][0];
    sp[106] = sp[14] * sp[14];
    sp[107] = sp[14] * sp[17];
    sp[108] = sp[18] * sp[14];
    sp[109] = sp[17] * sp[17];
    sp[110] = sp[18] * sp[17];
    sp[111] = sp[18] * sp[18];
    sp[112] = sp[22] * sp[22];
    sp[113] = sp[22] * sp[26];
    sp[114] = sp[22] * sp[30];
    sp[115] = sp[26] * sp[26];
    sp[116] = sp[26] * sp[30];
    sp[117] = sp[30] * sp[30];
    sp[118] = sp[112] + sp[106];
    sp[119] = sp[113] + sp[107];
    sp[120] = sp[114] + sp[108];
    sp[121] = sp[115] + sp[109];
    sp[122] = sp[116] + sp[110];
    sp[123] = sp[111] + sp[117];
    sp[124] = sp[34] * sp[34];
    sp[125] = sp[34] * sp[38];
    sp[126] = sp[42] * sp[34];
    sp[127] = sp[38] * sp[38];
    sp[128] = sp[42] * sp[38];
    sp[129] = sp[42] * sp[42];
    sp[130] = sp[118] + sp[124];
    sp[131] = sp[119] + sp[125];
    sp[132] = sp[120] + sp[126];
    sp[133] = sp[121] + sp[127];
    sp[134] = sp[122] + sp[128];
    sp[135] = sp[123] + sp[129];
    sp[136] = J_c0 * tetrahedron_reference_edge_vectors[0][0];
    sp[137] = J_c1 * tetrahedron_reference_edge_vectors[0][1];
    sp[138] = sp[136] + sp[137];
    sp[139] = J_c2 * tetrahedron_reference_edge_vectors[0][2];
    sp[140] = sp[138] + sp[139];
    sp[141] = sp[140] * sp[140];
    sp[142] = tetrahedron_reference_edge_vectors[0][0] * J_c3;
    sp[143] = tetrahedron_reference_edge_vectors[0][1] * J_c4;
    sp[144] = sp[142] + sp[143];
    sp[145] = tetrahedron_reference_edge_vectors[0][2] * J_c5;
    sp[146] = sp[144] + sp[145];
    sp[147] = sp[146] * sp[146];
    sp[148] = sp[141] + sp[147];
    sp[149] = tetrahedron_reference_edge_vectors[0][0] * J_c6;
    sp[150] = tetrahedron_reference_edge_vectors[0][1] * J_c7;
    sp[151] = sp[149] + sp[150];
    sp[152] = tetrahedron_reference_edge_vectors[0][2] * J_c8;
    sp[153] = sp[151] + sp[152];
    sp[154] = sp[153] * sp[153];
    sp[155] = sp[148] + sp[154];
    sp[156] = std::sqrt(sp[155]);
    sp[157] = J_c0 * tetrahedron_reference_edge_vectors[5][0];
    sp[158] = J_c1 * tetrahedron_reference_edge_vectors[5][1];
    sp[159] = sp[157] + sp[158];
    sp[160] = J_c2 * tetrahedron_reference_edge_vectors[5][2];
    sp[161] = sp[159] + sp[160];
    sp[162] = sp[161] * sp[161];
    sp[163] = J_c3 * tetrahedron_reference_edge_vectors[5][0];
    sp[164] = J_c4 * tetrahedron_reference_edge_vectors[5][1];
    sp[165] = sp[163] + sp[164];
    sp[166] = J_c5 * tetrahedron_reference_edge_vectors[5][2];
    sp[167] = sp[165] + sp[166];
    sp[168] = sp[167] * sp[167];
    sp[169] = sp[162] + sp[168];
    sp[170] = J_c6 * tetrahedron_reference_edge_vectors[5][0];
    sp[171] = J_c7 * tetrahedron_reference_edge_vectors[5][1];
    sp[172] = sp[170] + sp[171];
    sp[173] = J_c8 * tetrahedron_reference_edge_vectors[5][2];
    sp[174] = sp[172] + sp[173];
    sp[175] = sp[174] * sp[174];
    sp[176] = sp[169] + sp[175];
    sp[177] = std::sqrt(sp[176]);
    sp[178] = sp[156] * sp[177];
    sp[179] = J_c0 * tetrahedron_reference_edge_vectors[2][0];
    sp[180] = J_c1 * tetrahedron_reference_edge_vectors[2][1];
    sp[181] = sp[179] + sp[180];
    sp[182] = J_c2 * tetrahedron_reference_edge_vectors[2][2];
    sp[183] = sp[181] + sp[182];
    sp[184] = sp[183] * sp[183];
    sp[185] = J_c3 * tetrahedron_reference_edge_vectors[2][0];
    sp[186] = J_c4 * tetrahedron_reference_edge_vectors[2][1];
    sp[187] = sp[185] + sp[186];
    sp[188] = J_c5 * tetrahedron_reference_edge_vectors[2][2];
    sp[189] = sp[187] + sp[188];
    sp[190] = sp[189] * sp[189];
    sp[191] = sp[184] + sp[190];
    sp[192] = J_c6 * tetrahedron_reference_edge_vectors[2][0];
    sp[193] = J_c7 * tetrahedron_reference_edge_vectors[2][1];
    sp[194] = sp[192] + sp[193];
    sp[195] = J_c8 * tetrahedron_reference_edge_vectors[2][2];
    sp[196] = sp[194] + sp[195];
    sp[197] = sp[196] * sp[196];
    sp[198] = sp[191] + sp[197];
    sp[199] = std::sqrt(sp[198]);
    sp[200] = J_c0 * tetrahedron_reference_edge_vectors[3][0];
    sp[201] = J_c1 * tetrahedron_reference_edge_vectors[3][1];
    sp[202] = sp[200] + sp[201];
    sp[203] = J_c2 * tetrahedron_reference_edge_vectors[3][2];
    sp[204] = sp[202] + sp[203];
    sp[205] = sp[204] * sp[204];
    sp[206] = J_c3 * tetrahedron_reference_edge_vectors[3][0];
    sp[207] = J_c4 * tetrahedron_reference_edge_vectors[3][1];
    sp[208] = sp[206] + sp[207];
    sp[209] = J_c5 * tetrahedron_reference_edge_vectors[3][2];
    sp[210] = sp[208] + sp[209];
    sp[211] = sp[210] * sp[210];
    sp[212] = sp[205] + sp[211];
    sp[213] = J_c6 * tetrahedron_reference_edge_vectors[3][0];
    sp[214] = J_c7 * tetrahedron_reference_edge_vectors[3][1];
    sp[215] = sp[213] + sp[214];
    sp[216] = J_c8 * tetrahedron_reference_edge_vectors[3][2];
    sp[217] = sp[215] + sp[216];
    sp[218] = sp[217] * sp[217];
    sp[219] = sp[212] + sp[218];
    sp[220] = std::sqrt(sp[219]);
    sp[221] = sp[199] * sp[220];
    sp[222] = J_c0 * tetrahedron_reference_edge_vectors[1][0];
    sp[223] = J_c1 * tetrahedron_reference_edge_vectors[1][1];
    sp[224] = sp[222] + sp[223];
    sp[225] = J_c2 * tetrahedron_reference_edge_vectors[1][2];
    sp[226] = sp[224] + sp[225];
    sp[227] = sp[226] * sp[226];
    sp[228] = J_c3 * tetrahedron_reference_edge_vectors[1][0];
    sp[229] = J_c4 * tetrahedron_reference_edge_vectors[1][1];
    sp[230] = sp[228] + sp[229];
    sp[231] = J_c5 * tetrahedron_reference_edge_vectors[1][2];
    sp[232] = sp[230] + sp[231];
    sp[233] = sp[232] * sp[232];
    sp[234] = sp[227] + sp[233];
    sp[235] = tetrahedron_reference_edge_vectors[1][0] * J_c6;
    sp[236] = tetrahedron_reference_edge_vectors[1][1] * J_c7;
    sp[237] = sp[235] + sp[236];
    sp[238] = tetrahedron_reference_edge_vectors[1][2] * J_c8;
    sp[239] = sp[237] + sp[238];
    sp[240] = sp[239] * sp[239];
    sp[241] = sp[234] + sp[240];
    sp[242] = std::sqrt(sp[241]);
    sp[243] = J_c0 * tetrahedron_reference_edge_vectors[4][0];
    sp[244] = J_c1 * tetrahedron_reference_edge_vectors[4][1];
    sp[245] = sp[243] + sp[244];
    sp[246] = J_c2 * tetrahedron_reference_edge_vectors[4][2];
    sp[247] = sp[245] + sp[246];
    sp[248] = sp[247] * sp[247];
    sp[249] = J_c3 * tetrahedron_reference_edge_vectors[4][0];
    sp[250] = J_c4 * tetrahedron_reference_edge_vectors[4][1];
    sp[251] = sp[249] + sp[250];
    sp[252] = J_c5 * tetrahedron_reference_edge_vectors[4][2];
    sp[253] = sp[251] + sp[252];
    sp[254] = sp[253] * sp[253];
    sp[255] = sp[248] + sp[254];
    sp[256] = J_c6 * tetrahedron_reference_edge_vectors[4][0];
    sp[257] = J_c7 * tetrahedron_reference_edge_vectors[4][1];
    sp[258] = sp[256] + sp[257];
    sp[259] = J_c8 * tetrahedron_reference_edge_vectors[4][2];
    sp[260] = sp[258] + sp[259];
    sp[261] = sp[260] * sp[260];
    sp[262] = sp[255] + sp[261];
    sp[263] = std::sqrt(sp[262]);
    sp[264] = sp[242] * sp[263];
    sp[265] = sp[221] + sp[264];
    sp[266] = sp[265] + sp[178];
    sp[267] = -1 * sp[178] + sp[266] / 2;
    sp[268] = -1 * sp[264] + sp[266] / 2;
    sp[269] = -1 * sp[221] + sp[266] / 2;
    sp[270] = sp[269] * (sp[266] / 2);
    sp[271] = sp[268] * sp[270];
    sp[272] = sp[267] * sp[271];
    sp[273] = std::sqrt(sp[272]);
    sp[274] = tetrahedron_reference_cell_volume * sp[13];
    sp[275] = std::abs(sp[274]);
    sp[276] = sp[273] / (6.0 * sp[275]);
    sp[277] = 2.0 * sp[276] * (2.0 * sp[276]);
    sp[278] = sp[277] / w[4][0];
    sp[279] = sp[278] * w[6][0];
    sp[280] = sp[130] * sp[279];
    sp[281] = sp[131] * sp[279];
    sp[282] = sp[132] * sp[279];
    sp[283] = sp[133] * sp[279];
    sp[284] = sp[134] * sp[279];
    sp[285] = sp[135] * sp[279];
    sp[286] = 3.0 / (2 * w[5][0]) * w[3][0];
    sp[287] = sp[51] + sp[286];
    sp[288] = sp[81] + sp[286];
    sp[289] = sp[105] + sp[286];
    sp[290] = sp[14] + sp[14];
    sp[291] = sp[17] + sp[17];
    sp[292] = sp[18] + sp[18];
    sp[293] = 0.5 * sp[290] * (0.5 * sp[290]);
    sp[294] = 0.5 * sp[290] * (0.5 * sp[291]);
    sp[295] = 0.5 * sp[292] * (0.5 * sp[290]);
    sp[296] = 0.5 * sp[291] * (0.5 * sp[291]);
    sp[297] = 0.5 * sp[292] * (0.5 * sp[291]);
    sp[298] = 0.5 * sp[292] * (0.5 * sp[292]);
    sp[299] = 0.5 * sp[22] * (0.5 * sp[22]);
    sp[300] = 0.5 * sp[22] * (0.5 * sp[26]);
    sp[301] = 0.5 * sp[22] * (0.5 * sp[30]);
    sp[302] = 0.5 * sp[22] * (0.5 * sp[14]);
    sp[303] = 0.5 * sp[22] * (0.5 * sp[17]);
    sp[304] = 0.5 * sp[22] * (0.5 * sp[18]);
    sp[305] = 0.5 * sp[26] * (0.5 * sp[26]);
    sp[306] = 0.5 * sp[26] * (0.5 * sp[30]);
    sp[307] = 0.5 * sp[26] * (0.5 * sp[14]);
    sp[308] = 0.5 * sp[26] * (0.5 * sp[17]);
    sp[309] = 0.5 * sp[26] * (0.5 * sp[18]);
    sp[310] = 0.5 * sp[30] * (0.5 * sp[30]);
    sp[311] = 0.5 * sp[30] * (0.5 * sp[14]);
    sp[312] = 0.5 * sp[30] * (0.5 * sp[17]);
    sp[313] = 0.5 * sp[18] * (0.5 * sp[30]);
    sp[314] = 0.5 * sp[14] * (0.5 * sp[14]);
    sp[315] = 0.5 * sp[14] * (0.5 * sp[17]);
    sp[316] = 0.5 * sp[18] * (0.5 * sp[14]);
    sp[317] = 0.5 * sp[17] * (0.5 * sp[17]);
    sp[318] = 0.5 * sp[18] * (0.5 * sp[17]);
    sp[319] = 0.5 * sp[18] * (0.5 * sp[18]);
    sp[320] = sp[293] + sp[299];
    sp[321] = sp[294] + sp[300];
    sp[322] = sp[295] + sp[301];
    sp[323] = sp[296] + sp[305];
    sp[324] = sp[297] + sp[306];
    sp[325] = sp[298] + sp[310];
    sp[326] = 0.5 * sp[34] * (0.5 * sp[34]);
    sp[327] = 0.5 * sp[34] * (0.5 * sp[38]);
    sp[328] = 0.5 * sp[42] * (0.5 * sp[34]);
    sp[329] = 0.5 * sp[34] * (0.5 * sp[14]);
    sp[330] = 0.5 * sp[34] * (0.5 * sp[17]);
    sp[331] = 0.5 * sp[34] * (0.5 * sp[18]);
    sp[332] = 0.5 * sp[38] * (0.5 * sp[38]);
    sp[333] = 0.5 * sp[42] * (0.5 * sp[38]);
    sp[334] = 0.5 * sp[38] * (0.5 * sp[14]);
    sp[335] = 0.5 * sp[38] * (0.5 * sp[17]);
    sp[336] = 0.5 * sp[38] * (0.5 * sp[18]);
    sp[337] = 0.5 * sp[42] * (0.5 * sp[42]);
    sp[338] = 0.5 * sp[42] * (0.5 * sp[14]);
    sp[339] = 0.5 * sp[42] * (0.5 * sp[17]);
    sp[340] = 0.5 * sp[42] * (0.5 * sp[18]);
    sp[341] = sp[320] + sp[326];
    sp[342] = sp[321] + sp[327];
    sp[343] = sp[322] + sp[328];
    sp[344] = sp[323] + sp[332];
    sp[345] = sp[324] + sp[333];
    sp[346] = sp[325] + sp[337];
    sp[347] = sp[22] + sp[22];
    sp[348] = sp[26] + sp[26];
    sp[349] = sp[30] + sp[30];
    sp[350] = 0.5 * sp[347] * (0.5 * sp[347]);
    sp[351] = 0.5 * sp[347] * (0.5 * sp[348]);
    sp[352] = 0.5 * sp[347] * (0.5 * sp[349]);
    sp[353] = 0.5 * sp[348] * (0.5 * sp[348]);
    sp[354] = 0.5 * sp[348] * (0.5 * sp[349]);
    sp[355] = 0.5 * sp[349] * (0.5 * sp[349]);
    sp[356] = sp[350] + sp[314];
    sp[357] = sp[351] + sp[315];
    sp[358] = sp[352] + sp[316];
    sp[359] = sp[353] + sp[317];
    sp[360] = sp[354] + sp[318];
    sp[361] = sp[355] + sp[319];
    sp[362] = 0.5 * sp[22] * (0.5 * sp[34]);
    sp[363] = 0.5 * sp[26] * (0.5 * sp[34]);
    sp[364] = 0.5 * sp[34] * (0.5 * sp[30]);
    sp[365] = 0.5 * sp[22] * (0.5 * sp[38]);
    sp[366] = 0.5 * sp[26] * (0.5 * sp[38]);
    sp[367] = 0.5 * sp[38] * (0.5 * sp[30]);
    sp[368] = 0.5 * sp[22] * (0.5 * sp[42]);
    sp[369] = 0.5 * sp[26] * (0.5 * sp[42]);
    sp[370] = 0.5 * sp[42] * (0.5 * sp[30]);
    sp[371] = sp[356] + sp[326];
    sp[372] = sp[357] + sp[327];
    sp[373] = sp[358] + sp[328];
    sp[374] = sp[359] + sp[332];
    sp[375] = sp[360] + sp[333];
    sp[376] = sp[361] + sp[337];
    sp[377] = sp[341] + sp[299];
    sp[378] = sp[342] + sp[300];
    sp[379] = sp[343] + sp[301];
    sp[380] = sp[302] + sp[302];
    sp[381] = sp[303] + sp[303];
    sp[382] = sp[304] + sp[304];
    sp[383] = sp[344] + sp[305];
    sp[384] = sp[345] + sp[306];
    sp[385] = sp[307] + sp[307];
    sp[386] = sp[308] + sp[308];
    sp[387] = sp[309] + sp[309];
    sp[388] = sp[346] + sp[310];
    sp[389] = sp[311] + sp[311];
    sp[390] = sp[312] + sp[312];
    sp[391] = sp[313] + sp[313];
    sp[392] = sp[371] + sp[314];
    sp[393] = sp[372] + sp[315];
    sp[394] = sp[373] + sp[316];
    sp[395] = sp[374] + sp[317];
    sp[396] = sp[375] + sp[318];
    sp[397] = sp[376] + sp[319];
    sp[398] = sp[299] + sp[314];
    sp[399] = sp[300] + sp[315];
    sp[400] = sp[301] + sp[316];
    sp[401] = sp[305] + sp[317];
    sp[402] = sp[306] + sp[318];
    sp[403] = sp[319] + sp[310];
    sp[404] = sp[34] + sp[34];
    sp[405] = sp[38] + sp[38];
    sp[406] = sp[42] + sp[42];
    sp[407] = 0.5 * sp[404] * (0.5 * sp[404]);
    sp[408] = 0.5 * sp[404] * (0.5 * sp[405]);
    sp[409] = 0.5 * sp[406] * (0.5 * sp[404]);
    sp[410] = 0.5 * sp[405] * (0.5 * sp[405]);
    sp[411] = 0.5 * sp[406] * (0.5 * sp[405]);
    sp[412] = 0.5 * sp[406] * (0.5 * sp[406]);
    sp[413] = sp[398] + sp[407];
    sp[414] = sp[399] + sp[408];
    sp[415] = sp[400] + sp[409];
    sp[416] = sp[401] + sp[410];
    sp[417] = sp[402] + sp[411];
    sp[418] = sp[403] + sp[412];
    sp[419] = sp[377] + sp[326];
    sp[420] = sp[378] + sp[327];
    sp[421] = sp[379] + sp[328];
    sp[422] = sp[329] + sp[329];
    sp[423] = sp[330] + sp[330];
    sp[424] = sp[331] + sp[331];
    sp[425] = sp[383] + sp[332];
    sp[426] = sp[384] + sp[333];
    sp[427] = sp[334] + sp[334];
    sp[428] = sp[335] + sp[335];
    sp[429] = sp[336] + sp[336];
    sp[430] = sp[388] + sp[337];
    sp[431] = sp[338] + sp[338];
    sp[432] = sp[339] + sp[339];
    sp[433] = sp[340] + sp[340];
    sp[434] = sp[392] + sp[326];
    sp[435] = sp[393] + sp[327];
    sp[436] = sp[394] + sp[328];
    sp[437] = sp[362] + sp[362];
    sp[438] = sp[363] + sp[363];
    sp[439] = sp[364] + sp[364];
    sp[440] = sp[395] + sp[332];
    sp[441] = sp[396] + sp[333];
    sp[442] = sp[365] + sp[365];
    sp[443] = sp[366] + sp[366];
    sp[444] = sp[367] + sp[367];
    sp[445] = sp[397] + sp[337];
    sp[446] = sp[368] + sp[368];
    sp[447] = sp[369] + sp[369];
    sp[448] = sp[370] + sp[370];
    sp[449] = sp[413] + sp[398];
    sp[450] = sp[414] + sp[399];
    sp[451] = sp[415] + sp[400];
    sp[452] = sp[416] + sp[401];
    sp[453] = sp[417] + sp[402];
    sp[454] = sp[418] + sp[403];
    sp[455] = sp[419] * (2.0 * w[4][0]);
    sp[456] = sp[420] * (2.0 * w[4][0]);
    sp[457] = sp[421] * (2.0 * w[4][0]);
    sp[458] = sp[380] * (2.0 * w[4][0]);
    sp[459] = sp[381] * (2.0 * w[4][0]);
    sp[460] = sp[382] * (2.0 * w[4][0]);
    sp[461] = sp[422] * (2.0 * w[4][0]);
    sp[462] = sp[423] * (2.0 * w[4][0]);
    sp[463] = sp[424] * (2.0 * w[4][0]);
    sp[464] = sp[425] * (2.0 * w[4][0]);
    sp[465] = sp[426] * (2.0 * w[4][0]);
    sp[466] = sp[385] * (2.0 * w[4][0]);
    sp[467] = sp[386] * (2.0 * w[4][0]);
    sp[468] = sp[387] * (2.0 * w[4][0]);
    sp[469] = sp[427] * (2.0 * w[4][0]);
    sp[470] = sp[428] * (2.0 * w[4][0]);
    sp[471] = sp[429] * (2.0 * w[4][0]);
    sp[472] = sp[430] * (2.0 * w[4][0]);
    sp[473] = sp[389] * (2.0 * w[4][0]);
    sp[474] = sp[390] * (2.0 * w[4][0]);
    sp[475] = sp[391] * (2.0 * w[4][0]);
    sp[476] = sp[431] * (2.0 * w[4][0]);
    sp[477] = sp[432] * (2.0 * w[4][0]);
    sp[478] = sp[433] * (2.0 * w[4][0]);
    sp[479] = sp[434] * (2.0 * w[4][0]);
    sp[480] = sp[435] * (2.0 * w[4][0]);
    sp[481] = sp[436] * (2.0 * w[4][0]);
    sp[482] = sp[437] * (2.0 * w[4][0]);
    sp[483] = sp[438] * (2.0 * w[4][0]);
    sp[484] = sp[439] * (2.0 * w[4][0]);
    sp[485] = sp[440] * (2.0 * w[4][0]);
    sp[486] = sp[441] * (2.0 * w[4][0]);
    sp[487] = sp[442] * (2.0 * w[4][0]);
    sp[488] = sp[443] * (2.0 * w[4][0]);
    sp[489] = sp[444] * (2.0 * w[4][0]);
    sp[490] = sp[445] * (2.0 * w[4][0]);
    sp[491] = sp[446] * (2.0 * w[4][0]);
    sp[492] = sp[447] * (2.0 * w[4][0]);
    sp[493] = sp[448] * (2.0 * w[4][0]);
    sp[494] = sp[449] * (2.0 * w[4][0]);
    sp[495] = sp[450] * (2.0 * w[4][0]);
    sp[496] = sp[451] * (2.0 * w[4][0]);
    sp[497] = sp[452] * (2.0 * w[4][0]);
    sp[498] = sp[453] * (2.0 * w[4][0]);
    sp[499] = sp[454] * (2.0 * w[4][0]);
    sp[500] = std::abs(sp[13]);
    sp[501] = -1 * sp[14] * sp[500];
    sp[502] = -1 * sp[17] * sp[500];
    sp[503] = -1 * sp[18] * sp[500];
    sp[504] = -1 * sp[22] * sp[500];
    sp[505] = -1 * sp[26] * sp[500];
    sp[506] = -1 * sp[30] * sp[500];
    sp[507] = -1 * sp[34] * sp[500];
    sp[508] = -1 * sp[38] * sp[500];
    sp[509] = -1 * sp[42] * sp[500];
    sp[510] = sp[458] * sp[500];
    sp[511] = sp[459] * sp[500];
    sp[512] = sp[460] * sp[500];
    sp[513] = sp[461] * sp[500];
    sp[514] = sp[462] * sp[500];
    sp[515] = sp[463] * sp[500];
    sp[516] = sp[466] * sp[500];
    sp[517] = sp[467] * sp[500];
    sp[518] = sp[468] * sp[500];
    sp[519] = sp[469] * sp[500];
    sp[520] = sp[470] * sp[500];
    sp[521] = sp[471] * sp[500];
    sp[522] = sp[473] * sp[500];
    sp[523] = sp[474] * sp[500];
    sp[524] = sp[475] * sp[500];
    sp[525] = sp[476] * sp[500];
    sp[526] = sp[477] * sp[500];
    sp[527] = sp[478] * sp[500];
    sp[528] = sp[482] * sp[500];
    sp[529] = sp[483] * sp[500];
    sp[530] = sp[484] * sp[500];
    sp[531] = sp[487] * sp[500];
    sp[532] = sp[488] * sp[500];
    sp[533] = sp[489] * sp[500];
    sp[534] = sp[491] * sp[500];
    sp[535] = sp[492] * sp[500];
    sp[536] = sp[493] * sp[500];
    sp[537] = sp[287] * sp[500];
    sp[538] = sp[75] * sp[500];
    sp[539] = sp[93] * sp[500];
    sp[540] = sp[60] * sp[500];
    sp[541] = sp[288] * sp[500];
    sp[542] = sp[99] * sp[500];
    sp[543] = sp[69] * sp[500];
    sp[544] = sp[87] * sp[500];
    sp[545] = sp[289] * sp[500];
    sp[546] = sp[280] * sp[500];
    sp[547] = sp[281] * sp[500];
    sp[548] = sp[282] * sp[500];
    sp[549] = sp[283] * sp[500];
    sp[550] = sp[284] * sp[500];
    sp[551] = sp[285] * sp[500];
    alignas(32) double TP0[2] = {};
    alignas(32) double TP1[4] = {};
    alignas(32) double TP2[2] = {};
    alignas(32) double TP3[2] = {};
    alignas(32) double TP4[4] = {};
    alignas(32) double TP5[4] = {};
    alignas(32) double TP6[4] = {};
    alignas(32) double TP7[4] = {};
    alignas(32) double TP8[4] = {};
    alignas(32) double TP9[2] = {};
    alignas(32) double TP10[4] = {};
    alignas(32) double TP11[2] = {};
    alignas(32) double TP12[2] = {};
    alignas(32) double TP13[4] = {};
    alignas(32) double TP14[4] = {};
    alignas(32) double TP15[2] = {};
    alignas(32) double TP16[4] = {};
    alignas(32) double TP17[2] = {};
    alignas(32) double TP18[2] = {};
    alignas(32) double TP19[4] = {};
    alignas(32) double TP20[4] = {};
    alignas(32) double TP21[4] = {};
    alignas(32) double TP22[2] = {};
    alignas(32) double TP23[4] = {};
    alignas(32) double TP24[2] = {};
    alignas(32) double TP25[2] = {};
    alignas(32) double TP26[4] = {};
    alignas(32) double TP27[4] = {};
    alignas(32) double TP28[2] = {};
    alignas(32) double TP29[4] = {};
    alignas(32) double TP30[2] = {};
    alignas(32) double TP31[2] = {};
    alignas(32) double TP32[4] = {};
    alignas(32) double TP33[4] = {};
    alignas(32) double TP34[2] = {};
    alignas(32) double TP35[4] = {};
    alignas(32) double TP36[2] = {};
    alignas(32) double TP37[2] = {};
    alignas(32) double TP38[4] = {};
    alignas(32) double TP39[4] = {};
    alignas(32) double TP40[4] = {};
    alignas(32) double TP41[2] = {};
    alignas(32) double TP42[4] = {};
    alignas(32) double TP43[2] = {};
    alignas(32) double TP44[2] = {};
    alignas(32) double TP45[4] = {};
    alignas(32) double TP46[4] = {};
    alignas(32) double TP47[2] = {};
    alignas(32) double TP48[4] = {};
    alignas(32) double TP49[2] = {};
    alignas(32) double TP50[2] = {};
    alignas(32) double TP51[4] = {};
    alignas(32) double TP52[4] = {};
    alignas(32) double TP53[2] = {};
    alignas(32) double TP54[4] = {};
    alignas(32) double TP55[2] = {};
    alignas(32) double TP56[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c0 += w[0][ic] * FE43_C0_Q4[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c0 += w[1][ic] * FE43_C0_Q4[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c1 += w[0][ic + 4] * FE43_C0_Q4[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c1 += w[1][ic + 4] * FE43_C0_Q4[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c2 += w[0][ic + 8] * FE43_C0_Q4[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c2 += w[1][ic + 8] * FE43_C0_Q4[0][iq][ic];
        alignas(32) double sv4[261];
        sv4[0] = w0_c0 + -1 * w1_c0;
        sv4[1] = sv4[0] * sp[43];
        sv4[2] = sv4[0] * sp[44];
        sv4[3] = sv4[0] * sp[45];
        sv4[4] = w0_c1 + -1 * w1_c1;
        sv4[5] = sv4[4] * sp[52];
        sv4[6] = sv4[4] * sp[53];
        sv4[7] = sv4[4] * sp[54];
        sv4[8] = sv4[5] + sv4[1];
        sv4[9] = sv4[6] + sv4[2];
        sv4[10] = sv4[3] + sv4[7];
        sv4[11] = w0_c2 + -1 * w1_c2;
        sv4[12] = sv4[11] * sp[61];
        sv4[13] = sv4[11] * sp[62];
        sv4[14] = sv4[11] * sp[63];
        sv4[15] = sv4[8] + sv4[12];
        sv4[16] = sv4[9] + sv4[13];
        sv4[17] = sv4[10] + sv4[14];
        sv4[18] = sv4[0] * sp[14];
        sv4[19] = sv4[0] * sp[17];
        sv4[20] = sv4[0] * sp[18];
        sv4[21] = sv4[4] * sp[22];
        sv4[22] = sv4[4] * sp[26];
        sv4[23] = sv4[4] * sp[30];
        sv4[24] = sv4[21] + sv4[18];
        sv4[25] = sv4[22] + sv4[19];
        sv4[26] = sv4[20] + sv4[23];
        sv4[27] = sv4[11] * sp[34];
        sv4[28] = sv4[11] * sp[38];
        sv4[29] = sv4[11] * sp[42];
        sv4[30] = sv4[24] + sv4[27];
        sv4[31] = sv4[25] + sv4[28];
        sv4[32] = sv4[26] + sv4[29];
        sv4[33] = sv4[15] * sv4[30];
        sv4[34] = sv4[15] * sv4[31];
        sv4[35] = sv4[15] * sv4[32];
        sv4[36] = sv4[16] * sv4[30];
        sv4[37] = sv4[16] * sv4[31];
        sv4[38] = sv4[16] * sv4[32];
        sv4[39] = sv4[17] * sv4[30];
        sv4[40] = sv4[17] * sv4[31];
        sv4[41] = sv4[17] * sv4[32];
        sv4[42] = sv4[30] * sp[51];
        sv4[43] = sv4[31] * sp[51];
        sv4[44] = sv4[32] * sp[51];
        sv4[45] = sv4[30] * sp[60];
        sv4[46] = sv4[31] * sp[60];
        sv4[47] = sv4[32] * sp[60];
        sv4[48] = sv4[30] * sp[69];
        sv4[49] = sv4[31] * sp[69];
        sv4[50] = sv4[32] * sp[69];
        sv4[51] = sv4[0] * sp[51];
        sv4[52] = sv4[4] * sp[60];
        sv4[53] = sv4[51] + sv4[52];
        sv4[54] = sv4[11] * sp[69];
        sv4[55] = sv4[53] + sv4[54];
        sv4[56] = sv4[55] * sp[14];
        sv4[57] = sv4[55] * sp[22];
        sv4[58] = sv4[55] * sp[34];
        sv4[59] = sv4[55] * sp[17];
        sv4[60] = sv4[55] * sp[26];
        sv4[61] = sv4[55] * sp[38];
        sv4[62] = sv4[55] * sp[18];
        sv4[63] = sv4[55] * sp[30];
        sv4[64] = sv4[55] * sp[42];
        sv4[65] = sv4[42] + sv4[56];
        sv4[66] = sv4[45] + sv4[57];
        sv4[67] = sv4[48] + sv4[58];
        sv4[68] = sv4[43] + sv4[59];
        sv4[69] = sv4[46] + sv4[60];
        sv4[70] = sv4[49] + sv4[61];
        sv4[71] = sv4[44] + sv4[62];
        sv4[72] = sv4[47] + sv4[63];
        sv4[73] = sv4[50] + sv4[64];
        sv4[74] = sv4[30] * sp[75];
        sv4[75] = sv4[31] * sp[75];
        sv4[76] = sv4[32] * sp[75];
        sv4[77] = sv4[30] * sp[81];
        sv4[78] = sv4[31] * sp[81];
        sv4[79] = sv4[32] * sp[81];
        sv4[80] = sv4[30] * sp[87];
        sv4[81] = sv4[31] * sp[87];
        sv4[82] = sv4[32] * sp[87];
        sv4[83] = sv4[0] * sp[75];
        sv4[84] = sv4[4] * sp[81];
        sv4[85] = sv4[83] + sv4[84];
        sv4[86] = sv4[11] * sp[87];
        sv4[87] = sv4[85] + sv4[86];
        sv4[88] = sv4[87] * sp[14];
        sv4[89] = sv4[87] * sp[22];
        sv4[90] = sv4[87] * sp[34];
        sv4[91] = sv4[87] * sp[17];
        sv4[92] = sv4[87] * sp[26];
        sv4[93] = sv4[87] * sp[38];
        sv4[94] = sv4[87] * sp[18];
        sv4[95] = sv4[87] * sp[30];
        sv4[96] = sv4[87] * sp[42];
        sv4[97] = sv4[74] + sv4[88];
        sv4[98] = sv4[77] + sv4[89];
        sv4[99] = sv4[80] + sv4[90];
        sv4[100] = sv4[75] + sv4[91];
        sv4[101] = sv4[78] + sv4[92];
        sv4[102] = sv4[81] + sv4[93];
        sv4[103] = sv4[76] + sv4[94];
        sv4[104] = sv4[79] + sv4[95];
        sv4[105] = sv4[82] + sv4[96];
        sv4[106] = sv4[30] * sp[93];
        sv4[107] = sv4[31] * sp[93];
        sv4[108] = sv4[32] * sp[93];
        sv4[109] = sv4[30] * sp[99];
        sv4[110] = sv4[31] * sp[99];
        sv4[111] = sv4[32] * sp[99];
        sv4[112] = sv4[30] * sp[105];
        sv4[113] = sv4[31] * sp[105];
        sv4[114] = sv4[32] * sp[105];
        sv4[115] = sv4[0] * sp[93];
        sv4[116] = sv4[4] * sp[99];
        sv4[117] = sv4[115] + sv4[116];
        sv4[118] = sv4[11] * sp[105];
        sv4[119] = sv4[117] + sv4[118];
        sv4[120] = sv4[119] * sp[14];
        sv4[121] = sv4[119] * sp[22];
        sv4[122] = sv4[119] * sp[34];
        sv4[123] = sv4[119] * sp[17];
        sv4[124] = sv4[119] * sp[26];
        sv4[125] = sv4[119] * sp[38];
        sv4[126] = sv4[119] * sp[18];
        sv4[127] = sv4[119] * sp[30];
        sv4[128] = sv4[119] * sp[42];
        sv4[129] = sv4[106] + sv4[120];
        sv4[130] = sv4[109] + sv4[121];
        sv4[131] = sv4[112] + sv4[122];
        sv4[132] = sv4[107] + sv4[123];
        sv4[133] = sv4[110] + sv4[124];
        sv4[134] = sv4[113] + sv4[125];
        sv4[135] = sv4[108] + sv4[126];
        sv4[136] = sv4[111] + sv4[127];
        sv4[137] = sv4[114] + sv4[128];
        sv4[138] = sv4[33] * w[2][0];
        sv4[139] = sv4[36] * w[2][0];
        sv4[140] = sv4[39] * w[2][0];
        sv4[141] = sv4[65] * w[2][0];
        sv4[142] = sv4[66] * w[2][0];
        sv4[143] = sv4[67] * w[2][0];
        sv4[144] = sv4[34] * w[2][0];
        sv4[145] = sv4[37] * w[2][0];
        sv4[146] = sv4[40] * w[2][0];
        sv4[147] = sv4[68] * w[2][0];
        sv4[148] = sv4[69] * w[2][0];
        sv4[149] = sv4[70] * w[2][0];
        sv4[150] = sv4[35] * w[2][0];
        sv4[151] = sv4[38] * w[2][0];
        sv4[152] = sv4[41] * w[2][0];
        sv4[153] = sv4[71] * w[2][0];
        sv4[154] = sv4[72] * w[2][0];
        sv4[155] = sv4[73] * w[2][0];
        sv4[156] = sv4[97] * w[2][0];
        sv4[157] = sv4[98] * w[2][0];
        sv4[158] = sv4[99] * w[2][0];
        sv4[159] = sv4[100] * w[2][0];
        sv4[160] = sv4[101] * w[2][0];
        sv4[161] = sv4[102] * w[2][0];
        sv4[162] = sv4[103] * w[2][0];
        sv4[163] = sv4[104] * w[2][0];
        sv4[164] = sv4[105] * w[2][0];
        sv4[165] = sv4[129] * w[2][0];
        sv4[166] = sv4[130] * w[2][0];
        sv4[167] = sv4[131] * w[2][0];
        sv4[168] = sv4[132] * w[2][0];
        sv4[169] = sv4[133] * w[2][0];
        sv4[170] = sv4[134] * w[2][0];
        sv4[171] = sv4[135] * w[2][0];
        sv4[172] = sv4[136] * w[2][0];
        sv4[173] = sv4[137] * w[2][0];
        sv4[174] = sv4[30] * w[3][0];
        sv4[175] = sv4[31] * w[3][0];
        sv4[176] = sv4[32] * w[3][0];
        sv4[177] = sp[455] + sv4[138];
        sv4[178] = sp[456] + sv4[139];
        sv4[179] = sp[457] + sv4[140];
        sv4[180] = sp[456] + sv4[144];
        sv4[181] = sp[464] + sv4[145];
        sv4[182] = sp[465] + sv4[146];
        sv4[183] = sp[457] + sv4[150];
        sv4[184] = sp[465] + sv4[151];
        sv4[185] = sp[472] + sv4[152];
        sv4[186] = sp[479] + sv4[138];
        sv4[187] = sp[480] + sv4[139];
        sv4[188] = sp[481] + sv4[140];
        sv4[189] = sp[480] + sv4[144];
        sv4[190] = sp[485] + sv4[145];
        sv4[191] = sp[486] + sv4[146];
        sv4[192] = sp[481] + sv4[150];
        sv4[193] = sp[486] + sv4[151];
        sv4[194] = sp[490] + sv4[152];
        sv4[195] = sp[494] + sv4[138];
        sv4[196] = sp[495] + sv4[139];
        sv4[197] = sp[496] + sv4[140];
        sv4[198] = sp[495] + sv4[144];
        sv4[199] = sp[497] + sv4[145];
        sv4[200] = sp[498] + sv4[146];
        sv4[201] = sp[496] + sv4[150];
        sv4[202] = sp[498] + sv4[151];
        sv4[203] = sp[499] + sv4[152];
        sv4[204] = sv4[177] * sp[500];
        sv4[205] = sv4[178] * sp[500];
        sv4[206] = sv4[179] * sp[500];
        sv4[207] = sv4[141] * sp[500];
        sv4[208] = sv4[142] * sp[500];
        sv4[209] = sv4[143] * sp[500];
        sv4[210] = sv4[180] * sp[500];
        sv4[211] = sv4[181] * sp[500];
        sv4[212] = sv4[182] * sp[500];
        sv4[213] = sv4[147] * sp[500];
        sv4[214] = sv4[148] * sp[500];
        sv4[215] = sv4[149] * sp[500];
        sv4[216] = sv4[183] * sp[500];
        sv4[217] = sv4[184] * sp[500];
        sv4[218] = sv4[185] * sp[500];
        sv4[219] = sv4[153] * sp[500];
        sv4[220] = sv4[154] * sp[500];
        sv4[221] = sv4[155] * sp[500];
        sv4[222] = sv4[186] * sp[500];
        sv4[223] = sv4[187] * sp[500];
        sv4[224] = sv4[188] * sp[500];
        sv4[225] = sv4[156] * sp[500];
        sv4[226] = sv4[157] * sp[500];
        sv4[227] = sv4[158] * sp[500];
        sv4[228] = sv4[189] * sp[500];
        sv4[229] = sv4[190] * sp[500];
        sv4[230] = sv4[191] * sp[500];
        sv4[231] = sv4[159] * sp[500];
        sv4[232] = sv4[160] * sp[500];
        sv4[233] = sv4[161] * sp[500];
        sv4[234] = sv4[192] * sp[500];
        sv4[235] = sv4[193] * sp[500];
        sv4[236] = sv4[194] * sp[500];
        sv4[237] = sv4[162] * sp[500];
        sv4[238] = sv4[163] * sp[500];
        sv4[239] = sv4[164] * sp[500];
        sv4[240] = sv4[195] * sp[500];
        sv4[241] = sv4[196] * sp[500];
        sv4[242] = sv4[197] * sp[500];
        sv4[243] = sv4[165] * sp[500];
        sv4[244] = sv4[166] * sp[500];
        sv4[245] = sv4[167] * sp[500];
        sv4[246] = sv4[198] * sp[500];
        sv4[247] = sv4[199] * sp[500];
        sv4[248] = sv4[200] * sp[500];
        sv4[249] = sv4[168] * sp[500];
        sv4[250] = sv4[169] * sp[500];
        sv4[251] = sv4[170] * sp[500];
        sv4[252] = sv4[201] * sp[500];
        sv4[253] = sv4[202] * sp[500];
        sv4[254] = sv4[203] * sp[500];
        sv4[255] = sv4[171] * sp[500];
        sv4[256] = sv4[172] * sp[500];
        sv4[257] = sv4[173] * sp[500];
        sv4[258] = sv4[174] * sp[500];
        sv4[259] = sv4[175] * sp[500];
        sv4[260] = sv4[176] * sp[500];
        const double fw0 = sv4[204] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP0[j] += fw0 * FE43_C0_D001_Q4[0][0][j];
        const double fw1 = sv4[207] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP1[j] += fw1 * FE43_C0_Q4[0][iq][j];
        const double fw2 = sv4[205] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP2[j] += fw2 * FE43_C0_D001_Q4[0][0][j];
        const double fw3 = sv4[206] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP3[j] += fw3 * FE43_C0_D001_Q4[0][0][j];
        const double fw4 = sv4[208] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP4[j] += fw4 * FE43_C0_Q4[0][iq][j];
        const double fw5 = sv4[209] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP5[j] += fw5 * FE43_C0_Q4[0][iq][j];
        const double fw6 = sv4[258] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            TP6[i] += fw6 * FE43_C0_Q4[0][iq][i];
        const double fw7 = sv4[259] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            TP7[i] += fw7 * FE43_C0_Q4[0][iq][i];
        const double fw8 = sv4[260] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            TP8[i] += fw8 * FE43_C0_Q4[0][iq][i];
        const double fw9 = sv4[210] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP9[j] += fw9 * FE43_C0_D001_Q4[0][0][j];
        const double fw10 = sv4[213] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP10[j] += fw10 * FE43_C0_Q4[0][iq][j];
        const double fw11 = sv4[211] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP11[j] += fw11 * FE43_C0_D001_Q4[0][0][j];
        const double fw12 = sv4[212] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP12[j] += fw12 * FE43_C0_D001_Q4[0][0][j];
        const double fw13 = sv4[214] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP13[j] += fw13 * FE43_C0_Q4[0][iq][j];
        const double fw14 = sv4[215] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP14[j] += fw14 * FE43_C0_Q4[0][iq][j];
        const double fw15 = sv4[216] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP15[j] += fw15 * FE43_C0_D001_Q4[0][0][j];
        const double fw16 = sv4[219] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP16[j] += fw16 * FE43_C0_Q4[0][iq][j];
        const double fw17 = sv4[217] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP17[j] += fw17 * FE43_C0_D001_Q4[0][0][j];
        const double fw18 = sv4[218] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP18[j] += fw18 * FE43_C0_D001_Q4[0][0][j];
        const double fw19 = sv4[220] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP19[j] += fw19 * FE43_C0_Q4[0][iq][j];
        const double fw20 = sv4[221] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP20[j] += fw20 * FE43_C0_Q4[0][iq][j];
        const double fw21 = sv4[225] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP21[j] += fw21 * FE43_C0_Q4[0][iq][j];
        const double fw22 = sv4[222] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP22[j] += fw22 * FE43_C0_D001_Q4[0][0][j];
        const double fw23 = sv4[226] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP23[j] += fw23 * FE43_C0_Q4[0][iq][j];
        const double fw24 = sv4[223] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP24[j] += fw24 * FE43_C0_D001_Q4[0][0][j];
        const double fw25 = sv4[224] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP25[j] += fw25 * FE43_C0_D001_Q4[0][0][j];
        const double fw26 = sv4[227] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP26[j] += fw26 * FE43_C0_Q4[0][iq][j];
        const double fw27 = sv4[231] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP27[j] += fw27 * FE43_C0_Q4[0][iq][j];
        const double fw28 = sv4[228] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP28[j] += fw28 * FE43_C0_D001_Q4[0][0][j];
        const double fw29 = sv4[232] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP29[j] += fw29 * FE43_C0_Q4[0][iq][j];
        const double fw30 = sv4[229] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP30[j] += fw30 * FE43_C0_D001_Q4[0][0][j];
        const double fw31 = sv4[230] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP31[j] += fw31 * FE43_C0_D001_Q4[0][0][j];
        const double fw32 = sv4[233] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP32[j] += fw32 * FE43_C0_Q4[0][iq][j];
        const double fw33 = sv4[237] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP33[j] += fw33 * FE43_C0_Q4[0][iq][j];
        const double fw34 = sv4[234] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP34[j] += fw34 * FE43_C0_D001_Q4[0][0][j];
        const double fw35 = sv4[238] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP35[j] += fw35 * FE43_C0_Q4[0][iq][j];
        const double fw36 = sv4[235] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP36[j] += fw36 * FE43_C0_D001_Q4[0][0][j];
        const double fw37 = sv4[236] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP37[j] += fw37 * FE43_C0_D001_Q4[0][0][j];
        const double fw38 = sv4[239] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP38[j] += fw38 * FE43_C0_Q4[0][iq][j];
        const double fw39 = sv4[243] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP39[j] += fw39 * FE43_C0_Q4[0][iq][j];
        const double fw40 = sv4[244] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP40[j] += fw40 * FE43_C0_Q4[0][iq][j];
        const double fw41 = sv4[240] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP41[j] += fw41 * FE43_C0_D001_Q4[0][0][j];
        const double fw42 = sv4[245] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP42[j] += fw42 * FE43_C0_Q4[0][iq][j];
        const double fw43 = sv4[241] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP43[j] += fw43 * FE43_C0_D001_Q4[0][0][j];
        const double fw44 = sv4[242] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP44[j] += fw44 * FE43_C0_D001_Q4[0][0][j];
        const double fw45 = sv4[249] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP45[j] += fw45 * FE43_C0_Q4[0][iq][j];
        const double fw46 = sv4[250] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP46[j] += fw46 * FE43_C0_Q4[0][iq][j];
        const double fw47 = sv4[246] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP47[j] += fw47 * FE43_C0_D001_Q4[0][0][j];
        const double fw48 = sv4[251] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP48[j] += fw48 * FE43_C0_Q4[0][iq][j];
        const double fw49 = sv4[247] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP49[j] += fw49 * FE43_C0_D001_Q4[0][0][j];
        const double fw50 = sv4[248] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP50[j] += fw50 * FE43_C0_D001_Q4[0][0][j];
        const double fw51 = sv4[255] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP51[j] += fw51 * FE43_C0_Q4[0][iq][j];
        const double fw52 = sv4[256] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP52[j] += fw52 * FE43_C0_Q4[0][iq][j];
        const double fw53 = sv4[252] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP53[j] += fw53 * FE43_C0_D001_Q4[0][0][j];
        const double fw54 = sv4[257] * weights4[iq];
        for (int j = 0; j < 4; ++j)
            TP54[j] += fw54 * FE43_C0_Q4[0][iq][j];
        const double fw55 = sv4[253] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP55[j] += fw55 * FE43_C0_D001_Q4[0][0][j];
        const double fw56 = sv4[254] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP56[j] += fw56 * FE43_C0_D001_Q4[0][0][j];
    }
    A[0] = 0.01666666666666656 * sp[537];
    A[1] = 0.008333333333333293 * sp[537];
    A[2] = 0.008333333333333299 * sp[537];
    A[3] = 0.008333333333333297 * sp[537];
    A[4] = 0.1666666666666667 * sp[510] + 0.1666666666666667 * sp[511] + 0.1666666666666667 * sp[512] + 0.01666666666666656 * sp[540] + 0.1666666666666667 * sp[516] + 0.1666666666666667 * sp[517] + 0.1666666666666667 * sp[518] + 0.1666666666666667 * sp[522] + 0.1666666666666667 * sp[523] + 0.1666666666666667 * sp[524];
    A[5] = -0.1666666666666667 * sp[510] + 0.008333333333333293 * sp[540] + -0.1666666666666667 * sp[516] + -0.1666666666666667 * sp[522];
    A[6] = -0.1666666666666667 * sp[511] + 0.008333333333333299 * sp[540] + -0.1666666666666667 * sp[517] + -0.1666666666666667 * sp[523];
    A[7] = -0.1666666666666667 * sp[512] + 0.008333333333333297 * sp[540] + -0.1666666666666667 * sp[518] + -0.1666666666666667 * sp[524];
    A[8] = 0.1666666666666667 * sp[513] + 0.1666666666666667 * sp[514] + 0.1666666666666667 * sp[515] + 0.01666666666666656 * sp[543] + 0.1666666666666667 * sp[519] + 0.1666666666666667 * sp[520] + 0.1666666666666667 * sp[521] + 0.1666666666666667 * sp[525] + 0.1666666666666667 * sp[526] + 0.1666666666666667 * sp[527];
    A[9] = -0.1666666666666667 * sp[513] + 0.008333333333333293 * sp[543] + -0.1666666666666667 * sp[519] + -0.1666666666666667 * sp[525];
    A[10] = -0.1666666666666667 * sp[514] + 0.008333333333333299 * sp[543] + -0.1666666666666667 * sp[520] + -0.1666666666666667 * sp[526];
    A[11] = -0.1666666666666667 * sp[515] + 0.008333333333333297 * sp[543] + -0.1666666666666667 * sp[521] + -0.1666666666666667 * sp[527];
    A[12] = -0.04166666666666644 * sp[501] + -0.04166666666666644 * sp[502] + -0.04166666666666644 * sp[503];
    A[13] = -0.04166666666666674 * sp[501] + -0.04166666666666674 * sp[502] + -0.04166666666666674 * sp[503];
    A[14] = -0.04166666666666675 * sp[501] + -0.04166666666666675 * sp[502] + -0.04166666666666675 * sp[503];
    A[15] = -0.04166666666666674 * sp[501] + -0.04166666666666674 * sp[502] + -0.04166666666666674 * sp[503];
    std::fill(&A[16], &A[20], 0.0);
    A[20] = 0.008333333333333293 * sp[537];
    A[21] = 0.0166666666666667 * sp[537];
    A[22] = 0.008333333333333373 * sp[537];
    A[23] = 0.008333333333333371 * sp[537];
    A[24] = -0.1666666666666667 * sp[510] + -0.1666666666666667 * sp[511] + -0.1666666666666667 * sp[512] + 0.008333333333333293 * sp[540];
    A[25] = 0.1666666666666667 * sp[510] + 0.0166666666666667 * sp[540];
    A[26] = 0.1666666666666667 * sp[511] + 0.008333333333333373 * sp[540];
    A[27] = 0.1666666666666667 * sp[512] + 0.008333333333333371 * sp[540];
    A[28] = -0.1666666666666667 * sp[513] + -0.1666666666666667 * sp[514] + -0.1666666666666667 * sp[515] + 0.008333333333333293 * sp[543];
    A[29] = 0.1666666666666667 * sp[513] + 0.0166666666666667 * sp[543];
    A[30] = 0.1666666666666667 * sp[514] + 0.008333333333333373 * sp[543];
    A[31] = 0.1666666666666667 * sp[515] + 0.008333333333333371 * sp[543];
    A[32] = 0.04166666666666644 * sp[501];
    A[33] = 0.04166666666666674 * sp[501];
    A[34] = 0.04166666666666675 * sp[501];
    A[35] = 0.04166666666666674 * sp[501];
    std::fill(&A[36], &A[40], 0.0);
    A[40] = 0.008333333333333299 * sp[537];
    A[41] = 0.008333333333333373 * sp[537];
    A[42] = 0.01666666666666671 * sp[537];
    A[43] = 0.008333333333333373 * sp[537];
    A[44] = 0.008333333333333299 * sp[540] + -0.1666666666666667 * sp[516] + -0.1666666666666667 * sp[517] + -0.1666666666666667 * sp[518];
    A[45] = 0.008333333333333373 * sp[540] + 0.1666666666666667 * sp[516];
    A[46] = 0.01666666666666671 * sp[540] + 0.1666666666666667 * sp[517];
    A[47] = 0.008333333333333373 * sp[540] + 0.1666666666666667 * sp[518];
    A[48] = 0.008333333333333299 * sp[543] + -0.1666666666666667 * sp[519] + -0.1666666666666667 * sp[520] + -0.1666666666666667 * sp[521];
    A[49] = 0.008333333333333373 * sp[543] + 0.1666666666666667 * sp[519];
    A[50] = 0.01666666666666671 * sp[543] + 0.1666666666666667 * sp[520];
    A[51] = 0.008333333333333373 * sp[543] + 0.1666666666666667 * sp[521];
    A[52] = 0.04166666666666644 * sp[502];
    A[53] = 0.04166666666666674 * sp[502];
    A[54] = 0.04166666666666675 * sp[502];
    A[55] = 0.04166666666666674 * sp[502];
    std::fill(&A[56], &A[60], 0.0);
    A[60] = 0.008333333333333297 * sp[537];
    A[61] = 0.008333333333333371 * sp[537];
    A[62] = 0.008333333333333373 * sp[537];
    A[63] = 0.01666666666666671 * sp[537];
    A[64] = 0.008333333333333297 * sp[540] + -0.1666666666666667 * sp[522] + -0.1666666666666667 * sp[523] + -0.1666666666666667 * sp[524];
    A[65] = 0.008333333333333371 * sp[540] + 0.1666666666666667 * sp[522];
    A[66] = 0.008333333333333373 * sp[540] + 0.1666666666666667 * sp[523];
    A[67] = 0.01666666666666671 * sp[540] + 0.1666666666666667 * sp[524];
    A[68] = 0.008333333333333297 * sp[543] + -0.1666666666666667 * sp[525] + -0.1666666666666667 * sp[526] + -0.1666666666666667 * sp[527];
    A[69] = 0.008333333333333371 * sp[543] + 0.1666666666666667 * sp[525];
    A[70] = 0.008333333333333373 * sp[543] + 0.1666666666666667 * sp[526];
    A[71] = 0.01666666666666671 * sp[543] + 0.1666666666666667 * sp[527];
    A[72] = 0.04166666666666644 * sp[503];
    A[73] = 0.04166666666666674 * sp[503];
    A[74] = 0.04166666666666675 * sp[503];
    A[75] = 0.04166666666666674 * sp[503];
    std::fill(&A[76], &A[80], 0.0);
    A[80] = 0.1666666666666667 * sp[510] + 0.1666666666666667 * sp[516] + 0.1666666666666667 * sp[522] + 0.01666666666666656 * sp[538] + 0.1666666666666667 * sp[511] + 0.1666666666666667 * sp[517] + 0.1666666666666667 * sp[523] + 0.1666666666666667 * sp[512] + 0.1666666666666667 * sp[518] + 0.1666666666666667 * sp[524];
    A[81] = -0.1666666666666667 * sp[510] + 0.008333333333333293 * sp[538] + -0.1666666666666667 * sp[511] + -0.1666666666666667 * sp[512];
    A[82] = -0.1666666666666667 * sp[516] + 0.008333333333333299 * sp[538] + -0.1666666666666667 * sp[517] + -0.1666666666666667 * sp[518];
    A[83] = -0.1666666666666667 * sp[522] + 0.008333333333333297 * sp[538] + -0.1666666666666667 * sp[523] + -0.1666666666666667 * sp[524];
    A[84] = 0.01666666666666656 * sp[541];
    A[85] = 0.008333333333333293 * sp[541];
    A[86] = 0.008333333333333299 * sp[541];
    A[87] = 0.008333333333333297 * sp[541];
    A[88] = 0.1666666666666667 * sp[528] + 0.1666666666666667 * sp[529] + 0.1666666666666667 * sp[530] + 0.01666666666666656 * sp[544] + 0.1666666666666667 * sp[531] + 0.1666666666666667 * sp[532] + 0.1666666666666667 * sp[533] + 0.1666666666666667 * sp[534] + 0.1666666666666667 * sp[535] + 0.1666666666666667 * sp[536];
    A[89] = -0.1666666666666667 * sp[528] + 0.008333333333333293 * sp[544] + -0.1666666666666667 * sp[531] + -0.1666666666666667 * sp[534];
    A[90] = -0.1666666666666667 * sp[529] + 0.008333333333333299 * sp[544] + -0.1666666666666667 * sp[532] + -0.1666666666666667 * sp[535];
    A[91] = -0.1666666666666667 * sp[530] + 0.008333333333333297 * sp[544] + -0.1666666666666667 * sp[533] + -0.1666666666666667 * sp[536];
    A[92] = -0.04166666666666644 * sp[504] + -0.04166666666666644 * sp[505] + -0.04166666666666644 * sp[506];
    A[93] = -0.04166666666666674 * sp[504] + -0.04166666666666674 * sp[505] + -0.04166666666666674 * sp[506];
    A[94] = -0.04166666666666675 * sp[504] + -0.04166666666666675 * sp[505] + -0.04166666666666675 * sp[506];
    A[95] = -0.04166666666666674 * sp[504] + -0.04166666666666674 * sp[505] + -0.04166666666666674 * sp[506];
    std::fill(&A[96], &A[100], 0.0);
    A[100] = -0.1666666666666667 * sp[510] + -0.1666666666666667 * sp[516] + -0.1666666666666667 * sp[522] + 0.008333333333333293 * sp[538];
    A[101] = 0.1666666666666667 * sp[510] + 0.0166666666666667 * sp[538];
    A[102] = 0.1666666666666667 * sp[516] + 0.008333333333333373 * sp[538];
    A[103] = 0.1666666666666667 * sp[522] + 0.008333333333333371 * sp[538];
    A[104] = 0.008333333333333293 * sp[541];
    A[105] = 0.0166666666666667 * sp[541];
    A[106] = 0.008333333333333373 * sp[541];
    A[107] = 0.008333333333333371 * sp[541];
    A[108] = -0.1666666666666667 * sp[528] + -0.1666666666666667 * sp[529] + -0.1666666666666667 * sp[530] + 0.008333333333333293 * sp[544];
    A[109] = 0.1666666666666667 * sp[528] + 0.0166666666666667 * sp[544];
    A[110] = 0.1666666666666667 * sp[529] + 0.008333333333333373 * sp[544];
    A[111] = 0.1666666666666667 * sp[530] + 0.008333333333333371 * sp[544];
    A[112] = 0.04166666666666644 * sp[504];
    A[113] = 0.04166666666666674 * sp[504];
    A[114] = 0.04166666666666675 * sp[504];
    A[115] = 0.04166666666666674 * sp[504];
    std::fill(&A[116], &A[120], 0.0);
    A[120] = 0.008333333333333299 * sp[538] + -0.1666666666666667 * sp[511] + -0.1666666666666667 * sp[517] + -0.1666666666666667 * sp[523];
    A[121] = 0.008333333333333373 * sp[538] + 0.1666666666666667 * sp[511];
    A[122] = 0.01666666666666671 * sp[538] + 0.1666666666666667 * sp[517];
    A[123] = 0.008333333333333373 * sp[538] + 0.1666666666666667 * sp[523];
    A[124] = 0.008333333333333299 * sp[541];
    A[125] = 0.008333333333333373 * sp[541];
    A[126] = 0.01666666666666671 * sp[541];
    A[127] = 0.008333333333333373 * sp[541];
    A[128] = 0.008333333333333299 * sp[544] + -0.1666666666666667 * sp[531] + -0.1666666666666667 * sp[532] + -0.1666666666666667 * sp[533];
    A[129] = 0.008333333333333373 * sp[544] + 0.1666666666666667 * sp[531];
    A[130] = 0.01666666666666671 * sp[544] + 0.1666666666666667 * sp[532];
    A[131] = 0.008333333333333373 * sp[544] + 0.1666666666666667 * sp[533];
    A[132] = 0.04166666666666644 * sp[505];
    A[133] = 0.04166666666666674 * sp[505];
    A[134] = 0.04166666666666675 * sp[505];
    A[135] = 0.04166666666666674 * sp[505];
    std::fill(&A[136], &A[140], 0.0);
    A[140] = 0.008333333333333297 * sp[538] + -0.1666666666666667 * sp[512] + -0.1666666666666667 * sp[518] + -0.1666666666666667 * sp[524];
    A[141] = 0.008333333333333371 * sp[538] + 0.1666666666666667 * sp[512];
    A[142] = 0.008333333333333373 * sp[538] + 0.1666666666666667 * sp[518];
    A[143] = 0.01666666666666671 * sp[538] + 0.1666666666666667 * sp[524];
    A[144] = 0.008333333333333297 * sp[541];
    A[145] = 0.008333333333333371 * sp[541];
    A[146] = 0.008333333333333373 * sp[541];
    A[147] = 0.01666666666666671 * sp[541];
    A[148] = 0.008333333333333297 * sp[544] + -0.1666666666666667 * sp[534] + -0.1666666666666667 * sp[535] + -0.1666666666666667 * sp[536];
    A[149] = 0.008333333333333371 * sp[544] + 0.1666666666666667 * sp[534];
    A[150] = 0.008333333333333373 * sp[544] + 0.1666666666666667 * sp[535];
    A[151] = 0.01666666666666671 * sp[544] + 0.1666666666666667 * sp[536];
    A[152] = 0.04166666666666644 * sp[506];
    A[153] = 0.04166666666666674 * sp[506];
    A[154] = 0.04166666666666675 * sp[506];
    A[155] = 0.04166666666666674 * sp[506];
    std::fill(&A[156], &A[160], 0.0);
    A[160] = 0.1666666666666667 * sp[513] + 0.1666666666666667 * sp[519] + 0.1666666666666667 * sp[525] + 0.01666666666666656 * sp[539] + 0.1666666666666667 * sp[514] + 0.1666666666666667 * sp[520] + 0.1666666666666667 * sp[526] + 0.1666666666666667 * sp[515] + 0.1666666666666667 * sp[521] + 0.1666666666666667 * sp[527];
    A[161] = -0.1666666666666667 * sp[513] + 0.008333333333333293 * sp[539] + -0.1666666666666667 * sp[514] + -0.1666666666666667 * sp[515];
    A[162] = -0.1666666666666667 * sp[519] + 0.008333333333333299 * sp[539] + -0.1666666666666667 * sp[520] + -0.1666666666666667 * sp[521];
    A[163] = -0.1666666666666667 * sp[525] + 0.008333333333333297 * sp[539] + -0.1666666666666667 * sp[526] + -0.1666666666666667 * sp[527];
    A[164] = 0.1666666666666667 * sp[528] + 0.1666666666666667 * sp[531] + 0.1666666666666667 * sp[534] + 0.01666666666666656 * sp[542] + 0.1666666666666667 * sp[529] + 0.1666666666666667 * sp[532] + 0.1666666666666667 * sp[535] + 0.1666666666666667 * sp[530] + 0.1666666666666667 * sp[533] + 0.1666666666666667 * sp[536];
    A[165] = -0.1666666666666667 * sp[528] + 0.008333333333333293 * sp[542] + -0.1666666666666667 * sp[529] + -0.1666666666666667 * sp[530];
    A[166] = -0.1666666666666667 * sp[531] + 0.008333333333333299 * sp[542] + -0.1666666666666667 * sp[532] + -0.1666666666666667 * sp[533];
    A[167] = -0.1666666666666667 * sp[534] + 0.008333333333333297 * sp[542] + -0.1666666666666667 * sp[535] + -0.1666666666666667 * sp[536];
    A[168] = 0.01666666666666656 * sp[545];
    A[169] = 0.008333333333333293 * sp[545];
    A[170] = 0.008333333333333299 * sp[545];
    A[171] = 0.008333333333333297 * sp[545];
    A[172] = -0.04166666666666644 * sp[507] + -0.04166666666666644 * sp[508] + -0.04166666666666644 * sp[509];
    A[173] = -0.04166666666666674 * sp[507] + -0.04166666666666674 * sp[508] + -0.04166666666666674 * sp[509];
    A[174] = -0.04166666666666675 * sp[507] + -0.04166666666666675 * sp[508] + -0.04166666666666675 * sp[509];
    A[175] = -0.04166666666666674 * sp[507] + -0.04166666666666674 * sp[508] + -0.04166666666666674 * sp[509];
    std::fill(&A[176], &A[180], 0.0);
    A[180] = -0.1666666666666667 * sp[513] + -0.1666666666666667 * sp[519] + -0.1666666666666667 * sp[525] + 0.008333333333333293 * sp[539];
    A[181] = 0.1666666666666667 * sp[513] + 0.0166666666666667 * sp[539];
    A[182] = 0.1666666666666667 * sp[519] + 0.008333333333333373 * sp[539];
    A[183] = 0.1666666666666667 * sp[525] + 0.008333333333333371 * sp[539];
    A[184] = -0.1666666666666667 * sp[528] + -0.1666666666666667 * sp[531] + -0.1666666666666667 * sp[534] + 0.008333333333333293 * sp[542];
    A[185] = 0.1666666666666667 * sp[528] + 0.0166666666666667 * sp[542];
    A[186] = 0.1666666666666667 * sp[531] + 0.008333333333333373 * sp[542];
    A[187] = 0.1666666666666667 * sp[534] + 0.008333333333333371 * sp[542];
    A[188] = 0.008333333333333293 * sp[545];
    A[189] = 0.0166666666666667 * sp[545];
    A[190] = 0.008333333333333373 * sp[545];
    A[191] = 0.008333333333333371 * sp[545];
    A[192] = 0.04166666666666644 * sp[507];
    A[193] = 0.04166666666666674 * sp[507];
    A[194] = 0.04166666666666675 * sp[507];
    A[195] = 0.04166666666666674 * sp[507];
    std::fill(&A[196], &A[200], 0.0);
    A[200] = 0.008333333333333299 * sp[539] + -0.1666666666666667 * sp[514] + -0.1666666666666667 * sp[520] + -0.1666666666666667 * sp[526];
    A[201] = 0.008333333333333373 * sp[539] + 0.1666666666666667 * sp[514];
    A[202] = 0.01666666666666671 * sp[539] + 0.1666666666666667 * sp[520];
    A[203] = 0.008333333333333373 * sp[539] + 0.1666666666666667 * sp[526];
    A[204] = 0.008333333333333299 * sp[542] + -0.1666666666666667 * sp[529] + -0.1666666666666667 * sp[532] + -0.1666666666666667 * sp[535];
    A[205] = 0.008333333333333373 * sp[542] + 0.1666666666666667 * sp[529];
    A[206] = 0.01666666666666671 * sp[542] + 0.1666666666666667 * sp[532];
    A[207] = 0.008333333333333373 * sp[542] + 0.1666666666666667 * sp[535];
    A[208] = 0.008333333333333299 * sp[545];
    A[209] = 0.008333333333333373 * sp[545];
    A[210] = 0.01666666666666671 * sp[545];
    A[211] = 0.008333333333333373 * sp[545];
    A[212] = 0.04166666666666644 * sp[508];
    A[213] = 0.04166666666666674 * sp[508];
    A[214] = 0.04166666666666675 * sp[508];
    A[215] = 0.04166666666666674 * sp[508];
    std::fill(&A[216], &A[220], 0.0);
    A[220] = 0.008333333333333297 * sp[539] + -0.1666666666666667 * sp[515] + -0.1666666666666667 * sp[521] + -0.1666666666666667 * sp[527];
    A[221] = 0.008333333333333371 * sp[539] + 0.1666666666666667 * sp[515];
    A[222] = 0.008333333333333373 * sp[539] + 0.1666666666666667 * sp[521];
    A[223] = 0.01666666666666671 * sp[539] + 0.1666666666666667 * sp[527];
    A[224] = 0.008333333333333297 * sp[542] + -0.1666666666666667 * sp[530] + -0.1666666666666667 * sp[533] + -0.1666666666666667 * sp[536];
    A[225] = 0.008333333333333371 * sp[542] + 0.1666666666666667 * sp[530];
    A[226] = 0.008333333333333373 * sp[542] + 0.1666666666666667 * sp[533];
    A[227] = 0.01666666666666671 * sp[542] + 0.1666666666666667 * sp[536];
    A[228] = 0.008333333333333297 * sp[545];
    A[229] = 0.008333333333333371 * sp[545];
    A[230] = 0.008333333333333373 * sp[545];
    A[231] = 0.01666666666666671 * sp[545];
    A[232] = 0.04166666666666644 * sp[509];
    A[233] = 0.04166666666666674 * sp[509];
    A[234] = 0.04166666666666675 * sp[509];
    A[235] = 0.04166666666666674 * sp[509];
    std::fill(&A[236], &A[240], 0.0);
    A[240] = -0.04166666666666644 * sp[501] + -0.04166666666666644 * sp[502] + -0.04166666666666644 * sp[503];
    A[241] = 0.04166666666666644 * sp[501];
    A[242] = 0.04166666666666644 * sp[502];
    A[243] = 0.04166666666666644 * sp[503];
    A[244] = -0.04166666666666644 * sp[504] + -0.04166666666666644 * sp[505] + -0.04166666666666644 * sp[506];
    A[245] = 0.04166666666666644 * sp[504];
    A[246] = 0.04166666666666644 * sp[505];
    A[247] = 0.04166666666666644 * sp[506];
    A[248] = -0.04166666666666644 * sp[507] + -0.04166666666666644 * sp[508] + -0.04166666666666644 * sp[509];
    A[249] = 0.04166666666666644 * sp[507];
    A[250] = 0.04166666666666644 * sp[508];
    A[251] = 0.04166666666666644 * sp[509];
    A[252] = 0.1666666666666667 * sp[546] + 0.1666666666666667 * sp[547] + 0.1666666666666667 * sp[548] + 0.1666666666666667 * sp[547] + 0.1666666666666667 * sp[549] + 0.1666666666666667 * sp[550] + 0.1666666666666667 * sp[548] + 0.1666666666666667 * sp[550] + 0.1666666666666667 * sp[551];
    A[253] = -0.1666666666666667 * sp[546] + -0.1666666666666667 * sp[547] + -0.1666666666666667 * sp[548];
    A[254] = -0.1666666666666667 * sp[547] + -0.1666666666666667 * sp[549] + -0.1666666666666667 * sp[550];
    A[255] = -0.1666666666666667 * sp[548] + -0.1666666666666667 * sp[550] + -0.1666666666666667 * sp[551];
    std::fill(&A[256], &A[260], 0.0);
    A[260] = -0.04166666666666674 * sp[501] + -0.04166666666666674 * sp[502] + -0.04166666666666674 * sp[503];
    A[261] = 0.04166666666666674 * sp[501];
    A[262] = 0.04166666666666674 * sp[502];
    A[263] = 0.04166666666666674 * sp[503];
    A[264] = -0.04166666666666674 * sp[504] + -0.04166666666666674 * sp[505] + -0.04166666666666674 * sp[506];
    A[265] = 0.04166666666666674 * sp[504];
    A[266] = 0.04166666666666674 * sp[505];
    A[267] = 0.04166666666666674 * sp[506];
    A[268] = -0.04166666666666674 * sp[507] + -0.04166666666666674 * sp[508] + -0.04166666666666674 * sp[509];
    A[269] = 0.04166666666666674 * sp[507];
    A[270] = 0.04166666666666674 * sp[508];
    A[271] = 0.04166666666666674 * sp[509];
    A[272] = -0.1666666666666667 * sp[546] + -0.1666666666666667 * sp[547] + -0.1666666666666667 * sp[548];
    A[273] = 0.1666666666666667 * sp[546];
    A[274] = 0.1666666666666667 * sp[547];
    A[275] = 0.1666666666666667 * sp[548];
    std::fill(&A[276], &A[280], 0.0);
    A[280] = -0.04166666666666675 * sp[501] + -0.04166666666666675 * sp[502] + -0.04166666666666675 * sp[503];
    A[281] = 0.04166666666666675 * sp[501];
    A[282] = 0.04166666666666675 * sp[502];
    A[283] = 0.04166666666666675 * sp[503];
    A[284] = -0.04166666666666675 * sp[504] + -0.04166666666666675 * sp[505] + -0.04166666666666675 * sp[506];
    A[285] = 0.04166666666666675 * sp[504];
    A[286] = 0.04166666666666675 * sp[505];
    A[287] = 0.04166666666666675 * sp[506];
    A[288] = -0.04166666666666675 * sp[507] + -0.04166666666666675 * sp[508] + -0.04166666666666675 * sp[509];
    A[289] = 0.04166666666666675 * sp[507];
    A[290] = 0.04166666666666675 * sp[508];
    A[291] = 0.04166666666666675 * sp[509];
    A[292] = -0.1666666666666667 * sp[547] + -0.1666666666666667 * sp[549] + -0.1666666666666667 * sp[550];
    A[293] = 0.1666666666666667 * sp[547];
    A[294] = 0.1666666666666667 * sp[549];
    A[295] = 0.1666666666666667 * sp[550];
    std::fill(&A[296], &A[300], 0.0);
    A[300] = -0.04166666666666674 * sp[501] + -0.04166666666666674 * sp[502] + -0.04166666666666674 * sp[503];
    A[301] = 0.04166666666666674 * sp[501];
    A[302] = 0.04166666666666674 * sp[502];
    A[303] = 0.04166666666666674 * sp[503];
    A[304] = -0.04166666666666674 * sp[504] + -0.04166666666666674 * sp[505] + -0.04166666666666674 * sp[506];
    A[305] = 0.04166666666666674 * sp[504];
    A[306] = 0.04166666666666674 * sp[505];
    A[307] = 0.04166666666666674 * sp[506];
    A[308] = -0.04166666666666674 * sp[507] + -0.04166666666666674 * sp[508] + -0.04166666666666674 * sp[509];
    A[309] = 0.04166666666666674 * sp[507];
    A[310] = 0.04166666666666674 * sp[508];
    A[311] = 0.04166666666666674 * sp[509];
    A[312] = -0.1666666666666667 * sp[548] + -0.1666666666666667 * sp[550] + -0.1666666666666667 * sp[551];
    A[313] = 0.1666666666666667 * sp[548];
    A[314] = 0.1666666666666667 * sp[550];
    A[315] = 0.1666666666666667 * sp[551];
    std::fill(&A[316], &A[400], 0.0);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + j] += FE43_C0_D001_Q4[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * i + j] += FE43_C0_D001_Q4[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM0[j]] += FE43_C0_D001_Q4[0][0][i] * TP2[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM1[j]] += FE43_C0_D001_Q4[0][0][i] * TP3[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * i + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP4[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * i + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP5[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + j] += FE43_C0_D001_Q4[0][0][j] * TP6[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM0[j]] += FE43_C0_D001_Q4[0][0][j] * TP7[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM1[j]] += FE43_C0_D001_Q4[0][0][j] * TP8[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP9[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM0[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + DM0[j]] += FE43_C0_D001_Q4[0][0][i] * TP11[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + DM1[j]] += FE43_C0_D001_Q4[0][0][i] * TP12[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM0[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP13[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM0[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP14[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP15[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM1[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP16[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + DM0[j]] += FE43_C0_D001_Q4[0][0][i] * TP17[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + DM1[j]] += FE43_C0_D001_Q4[0][0][i] * TP18[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM1[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP19[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM1[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP20[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 4) + j] += FE43_C0_D001_Q4[0][0][i] * TP21[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP22[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 4) + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP23[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM2[j]] += FE43_C0_D001_Q4[0][0][i] * TP24[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM3[j]] += FE43_C0_D001_Q4[0][0][i] * TP25[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 4) + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP26[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + (j + 4)] += FE43_C0_D001_Q4[0][0][j] * TP6[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM2[j]] += FE43_C0_D001_Q4[0][0][j] * TP7[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM3[j]] += FE43_C0_D001_Q4[0][0][j] * TP8[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM2[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP27[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP28[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM2[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP29[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + DM2[j]] += FE43_C0_D001_Q4[0][0][i] * TP30[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + DM3[j]] += FE43_C0_D001_Q4[0][0][i] * TP31[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM2[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP32[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM3[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP33[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP34[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM3[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP35[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + DM2[j]] += FE43_C0_D001_Q4[0][0][i] * TP36[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + DM3[j]] += FE43_C0_D001_Q4[0][0][i] * TP37[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM3[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP38[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 8) + j] += FE43_C0_D001_Q4[0][0][i] * TP39[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 8) + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP40[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP41[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * (i + 8) + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP42[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM4[j]] += FE43_C0_D001_Q4[0][0][i] * TP43[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM5[j]] += FE43_C0_D001_Q4[0][0][i] * TP44[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + (j + 8)] += FE43_C0_D001_Q4[0][0][j] * TP6[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM4[j]] += FE43_C0_D001_Q4[0][0][j] * TP7[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM5[j]] += FE43_C0_D001_Q4[0][0][j] * TP8[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM4[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP45[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM4[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP46[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP47[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM4[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP48[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + DM4[j]] += FE43_C0_D001_Q4[0][0][i] * TP49[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + DM5[j]] += FE43_C0_D001_Q4[0][0][i] * TP50[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM5[i] + j] += FE43_C0_D001_Q4[0][0][i] * TP51[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM5[i] + (j + 4)] += FE43_C0_D001_Q4[0][0][i] * TP52[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP53[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[20 * DM5[i] + (j + 8)] += FE43_C0_D001_Q4[0][0][i] * TP54[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + DM4[j]] += FE43_C0_D001_Q4[0][0][i] * TP55[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + DM5[j]] += FE43_C0_D001_Q4[0][0][i] * TP56[j];
  }

};


class fluid3dp1p1_exterior_facet_integral_1_203: public ufc::exterior_facet_integral
{
public:

  fluid3dp1p1_exterior_facet_integral_1_203() : ufc::exterior_facet_integral()
  {

  }

  ~fluid3dp1p1_exterior_facet_integral_1_203() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, false, false, false, true, false, false});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 1
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 1
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           1
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE11_C0_D001_F_Q1[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[4][4][2] =
        { { { 0.0, 0.0 },
            { -0.1666666666666666, 0.1666666666666666 },
            { -0.1666666666666667, 0.1666666666666667 },
            { -0.1666666666666667, 0.1666666666666667 } },
          { { -0.1666666666666667, 0.1666666666666667 },
            { 0.0, 0.0 },
            { -0.1666666666666667, 0.1666666666666667 },
            { -0.1666666666666667, 0.1666666666666667 } },
          { { -0.1666666666666667, 0.1666666666666667 },
            { -0.1666666666666667, 0.1666666666666667 },
            { 0.0, 0.0 },
            { -0.1666666666666667, 0.1666666666666667 } },
          { { -0.1666666666666667, 0.1666666666666667 },
            { -0.1666666666666666, 0.1666666666666666 },
            { -0.1666666666666667, 0.1666666666666667 },
            { 0.0, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[7] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[11] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[10] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[8] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[3] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[6] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[5] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[4] * FE11_C0_D001_F_Q1[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE11_C0_D001_F_Q1[0][0][0] + coordinate_dofs[9] * FE11_C0_D001_F_Q1[0][0][1];
    alignas(32) double sp[193];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = tetrahedron_reference_facet_normals[facet][0] * sp[14];
    sp[20] = tetrahedron_reference_facet_normals[facet][1] * sp[17];
    sp[21] = sp[19] + sp[20];
    sp[22] = tetrahedron_reference_facet_normals[facet][2] * sp[18];
    sp[23] = sp[21] + sp[22];
    sp[24] = sp[23] * sp[23];
    sp[25] = J_c2 * J_c7;
    sp[26] = J_c8 * (-1 * J_c1);
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] / sp[13];
    sp[29] = tetrahedron_reference_facet_normals[facet][0] * sp[28];
    sp[30] = J_c0 * J_c8;
    sp[31] = J_c6 * (-1 * J_c2);
    sp[32] = sp[30] + sp[31];
    sp[33] = sp[32] / sp[13];
    sp[34] = tetrahedron_reference_facet_normals[facet][1] * sp[33];
    sp[35] = sp[29] + sp[34];
    sp[36] = J_c1 * J_c6;
    sp[37] = J_c0 * J_c7;
    sp[38] = sp[36] + -1 * sp[37];
    sp[39] = sp[38] / sp[13];
    sp[40] = tetrahedron_reference_facet_normals[facet][2] * sp[39];
    sp[41] = sp[35] + sp[40];
    sp[42] = sp[41] * sp[41];
    sp[43] = sp[24] + sp[42];
    sp[44] = J_c1 * J_c5;
    sp[45] = J_c2 * J_c4;
    sp[46] = sp[44] + -1 * sp[45];
    sp[47] = sp[46] / sp[13];
    sp[48] = tetrahedron_reference_facet_normals[facet][0] * sp[47];
    sp[49] = J_c2 * J_c3;
    sp[50] = J_c0 * J_c5;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = tetrahedron_reference_facet_normals[facet][1] * sp[52];
    sp[54] = sp[48] + sp[53];
    sp[55] = J_c0 * J_c4;
    sp[56] = J_c1 * J_c3;
    sp[57] = sp[55] + -1 * sp[56];
    sp[58] = sp[57] / sp[13];
    sp[59] = tetrahedron_reference_facet_normals[facet][2] * sp[58];
    sp[60] = sp[54] + sp[59];
    sp[61] = sp[60] * sp[60];
    sp[62] = sp[43] + sp[61];
    sp[63] = std::sqrt(sp[62]);
    sp[64] = sp[23] / sp[63];
    sp[65] = sp[14] * sp[64];
    sp[66] = sp[17] * sp[64];
    sp[67] = sp[18] * sp[64];
    sp[68] = sp[41] / sp[63];
    sp[69] = sp[14] * sp[68];
    sp[70] = sp[17] * sp[68];
    sp[71] = sp[18] * sp[68];
    sp[72] = sp[60] / sp[63];
    sp[73] = sp[14] * sp[72];
    sp[74] = sp[17] * sp[72];
    sp[75] = sp[18] * sp[72];
    sp[76] = sp[28] * sp[64];
    sp[77] = sp[33] * sp[64];
    sp[78] = sp[39] * sp[64];
    sp[79] = sp[28] * sp[68];
    sp[80] = sp[33] * sp[68];
    sp[81] = sp[39] * sp[68];
    sp[82] = sp[28] * sp[72];
    sp[83] = sp[33] * sp[72];
    sp[84] = sp[39] * sp[72];
    sp[85] = sp[47] * sp[64];
    sp[86] = sp[52] * sp[64];
    sp[87] = sp[58] * sp[64];
    sp[88] = sp[47] * sp[68];
    sp[89] = sp[52] * sp[68];
    sp[90] = sp[58] * sp[68];
    sp[91] = sp[47] * sp[72];
    sp[92] = sp[52] * sp[72];
    sp[93] = sp[58] * sp[72];
    sp[94] = sp[65] * w[4][0];
    sp[95] = sp[66] * w[4][0];
    sp[96] = sp[67] * w[4][0];
    sp[97] = sp[69] * w[4][0];
    sp[98] = sp[70] * w[4][0];
    sp[99] = sp[71] * w[4][0];
    sp[100] = sp[73] * w[4][0];
    sp[101] = sp[74] * w[4][0];
    sp[102] = sp[75] * w[4][0];
    sp[103] = sp[76] * w[4][0];
    sp[104] = sp[85] * w[4][0];
    sp[105] = sp[77] * w[4][0];
    sp[106] = sp[86] * w[4][0];
    sp[107] = sp[78] * w[4][0];
    sp[108] = sp[87] * w[4][0];
    sp[109] = sp[79] * w[4][0];
    sp[110] = sp[88] * w[4][0];
    sp[111] = sp[80] * w[4][0];
    sp[112] = sp[89] * w[4][0];
    sp[113] = sp[81] * w[4][0];
    sp[114] = sp[90] * w[4][0];
    sp[115] = sp[82] * w[4][0];
    sp[116] = sp[91] * w[4][0];
    sp[117] = sp[83] * w[4][0];
    sp[118] = sp[92] * w[4][0];
    sp[119] = sp[84] * w[4][0];
    sp[120] = sp[93] * w[4][0];
    sp[121] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c3;
    sp[122] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c4;
    sp[123] = sp[121] + sp[122];
    sp[124] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[125] = sp[123] + sp[124];
    sp[126] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c6;
    sp[127] = tetrahedron_reference_facet_jacobian[facet][1][1] * J_c7;
    sp[128] = sp[126] + sp[127];
    sp[129] = tetrahedron_reference_facet_jacobian[facet][2][1] * J_c8;
    sp[130] = sp[128] + sp[129];
    sp[131] = sp[125] * sp[130];
    sp[132] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c3;
    sp[133] = J_c4 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[134] = sp[132] + sp[133];
    sp[135] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[136] = sp[134] + sp[135];
    sp[137] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c6;
    sp[138] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c7;
    sp[139] = sp[137] + sp[138];
    sp[140] = tetrahedron_reference_facet_jacobian[facet][2][0] * J_c8;
    sp[141] = sp[139] + sp[140];
    sp[142] = sp[136] * sp[141];
    sp[143] = sp[131] + -1 * sp[142];
    sp[144] = sp[143] * sp[143];
    sp[145] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][1];
    sp[146] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[147] = sp[145] + sp[146];
    sp[148] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[149] = sp[147] + sp[148];
    sp[150] = sp[149] * sp[141];
    sp[151] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][0];
    sp[152] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][0];
    sp[153] = sp[151] + sp[152];
    sp[154] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[155] = sp[153] + sp[154];
    sp[156] = sp[155] * sp[130];
    sp[157] = sp[150] + -1 * sp[156];
    sp[158] = sp[157] * sp[157];
    sp[159] = sp[144] + sp[158];
    sp[160] = sp[155] * sp[136];
    sp[161] = sp[125] * sp[149];
    sp[162] = sp[160] + -1 * sp[161];
    sp[163] = sp[162] * sp[162];
    sp[164] = sp[159] + sp[163];
    sp[165] = std::sqrt(sp[164]);
    sp[166] = -1 * sp[94] * sp[165];
    sp[167] = -1 * sp[95] * sp[165];
    sp[168] = -1 * sp[96] * sp[165];
    sp[169] = -1 * sp[97] * sp[165];
    sp[170] = -1 * sp[98] * sp[165];
    sp[171] = -1 * sp[99] * sp[165];
    sp[172] = -1 * sp[100] * sp[165];
    sp[173] = -1 * sp[101] * sp[165];
    sp[174] = -1 * sp[102] * sp[165];
    sp[175] = -1 * sp[103] * sp[165];
    sp[176] = -1 * sp[104] * sp[165];
    sp[177] = -1 * sp[105] * sp[165];
    sp[178] = -1 * sp[106] * sp[165];
    sp[179] = -1 * sp[107] * sp[165];
    sp[180] = -1 * sp[108] * sp[165];
    sp[181] = -1 * sp[109] * sp[165];
    sp[182] = -1 * sp[110] * sp[165];
    sp[183] = -1 * sp[111] * sp[165];
    sp[184] = -1 * sp[112] * sp[165];
    sp[185] = -1 * sp[113] * sp[165];
    sp[186] = -1 * sp[114] * sp[165];
    sp[187] = -1 * sp[115] * sp[165];
    sp[188] = -1 * sp[116] * sp[165];
    sp[189] = -1 * sp[117] * sp[165];
    sp[190] = -1 * sp[118] * sp[165];
    sp[191] = -1 * sp[119] * sp[165];
    sp[192] = -1 * sp[120] * sp[165];
    A[0] = sp[166] * PI0[facet][0][0] + sp[167] * PI0[facet][0][0] + sp[168] * PI0[facet][0][0];
    A[1] = sp[166] * PI0[facet][0][1];
    A[2] = sp[167] * PI0[facet][0][1];
    A[3] = sp[168] * PI0[facet][0][1];
    A[4] = sp[169] * PI0[facet][0][0] + sp[170] * PI0[facet][0][0] + sp[171] * PI0[facet][0][0];
    A[5] = sp[169] * PI0[facet][0][1];
    A[6] = sp[170] * PI0[facet][0][1];
    A[7] = sp[171] * PI0[facet][0][1];
    A[8] = sp[172] * PI0[facet][0][0] + sp[173] * PI0[facet][0][0] + sp[174] * PI0[facet][0][0];
    A[9] = sp[172] * PI0[facet][0][1];
    A[10] = sp[173] * PI0[facet][0][1];
    A[11] = sp[174] * PI0[facet][0][1];
    std::fill(&A[12], &A[20], 0.0);
    A[20] = sp[166] * PI0[facet][1][0] + sp[167] * PI0[facet][1][0] + sp[168] * PI0[facet][1][0];
    A[21] = sp[166] * PI0[facet][1][1];
    A[22] = sp[167] * PI0[facet][1][1];
    A[23] = sp[168] * PI0[facet][1][1];
    A[24] = sp[169] * PI0[facet][1][0] + sp[170] * PI0[facet][1][0] + sp[171] * PI0[facet][1][0];
    A[25] = sp[169] * PI0[facet][1][1];
    A[26] = sp[170] * PI0[facet][1][1];
    A[27] = sp[171] * PI0[facet][1][1];
    A[28] = sp[172] * PI0[facet][1][0] + sp[173] * PI0[facet][1][0] + sp[174] * PI0[facet][1][0];
    A[29] = sp[172] * PI0[facet][1][1];
    A[30] = sp[173] * PI0[facet][1][1];
    A[31] = sp[174] * PI0[facet][1][1];
    std::fill(&A[32], &A[40], 0.0);
    A[40] = sp[166] * PI0[facet][2][0] + sp[167] * PI0[facet][2][0] + sp[168] * PI0[facet][2][0];
    A[41] = sp[166] * PI0[facet][2][1];
    A[42] = sp[167] * PI0[facet][2][1];
    A[43] = sp[168] * PI0[facet][2][1];
    A[44] = sp[169] * PI0[facet][2][0] + sp[170] * PI0[facet][2][0] + sp[171] * PI0[facet][2][0];
    A[45] = sp[169] * PI0[facet][2][1];
    A[46] = sp[170] * PI0[facet][2][1];
    A[47] = sp[171] * PI0[facet][2][1];
    A[48] = sp[172] * PI0[facet][2][0] + sp[173] * PI0[facet][2][0] + sp[174] * PI0[facet][2][0];
    A[49] = sp[172] * PI0[facet][2][1];
    A[50] = sp[173] * PI0[facet][2][1];
    A[51] = sp[174] * PI0[facet][2][1];
    std::fill(&A[52], &A[60], 0.0);
    A[60] = sp[166] * PI0[facet][3][0] + sp[167] * PI0[facet][3][0] + sp[168] * PI0[facet][3][0];
    A[61] = sp[166] * PI0[facet][3][1];
    A[62] = sp[167] * PI0[facet][3][1];
    A[63] = sp[168] * PI0[facet][3][1];
    A[64] = sp[169] * PI0[facet][3][0] + sp[170] * PI0[facet][3][0] + sp[171] * PI0[facet][3][0];
    A[65] = sp[169] * PI0[facet][3][1];
    A[66] = sp[170] * PI0[facet][3][1];
    A[67] = sp[171] * PI0[facet][3][1];
    A[68] = sp[172] * PI0[facet][3][0] + sp[173] * PI0[facet][3][0] + sp[174] * PI0[facet][3][0];
    A[69] = sp[172] * PI0[facet][3][1];
    A[70] = sp[173] * PI0[facet][3][1];
    A[71] = sp[174] * PI0[facet][3][1];
    std::fill(&A[72], &A[80], 0.0);
    A[80] = sp[175] * PI0[facet][0][0] + sp[177] * PI0[facet][0][0] + sp[179] * PI0[facet][0][0];
    A[81] = sp[175] * PI0[facet][0][1];
    A[82] = sp[177] * PI0[facet][0][1];
    A[83] = sp[179] * PI0[facet][0][1];
    A[84] = sp[181] * PI0[facet][0][0] + sp[183] * PI0[facet][0][0] + sp[185] * PI0[facet][0][0];
    A[85] = sp[181] * PI0[facet][0][1];
    A[86] = sp[183] * PI0[facet][0][1];
    A[87] = sp[185] * PI0[facet][0][1];
    A[88] = sp[187] * PI0[facet][0][0] + sp[189] * PI0[facet][0][0] + sp[191] * PI0[facet][0][0];
    A[89] = sp[187] * PI0[facet][0][1];
    A[90] = sp[189] * PI0[facet][0][1];
    A[91] = sp[191] * PI0[facet][0][1];
    std::fill(&A[92], &A[100], 0.0);
    A[100] = sp[175] * PI0[facet][1][0] + sp[177] * PI0[facet][1][0] + sp[179] * PI0[facet][1][0];
    A[101] = sp[175] * PI0[facet][1][1];
    A[102] = sp[177] * PI0[facet][1][1];
    A[103] = sp[179] * PI0[facet][1][1];
    A[104] = sp[181] * PI0[facet][1][0] + sp[183] * PI0[facet][1][0] + sp[185] * PI0[facet][1][0];
    A[105] = sp[181] * PI0[facet][1][1];
    A[106] = sp[183] * PI0[facet][1][1];
    A[107] = sp[185] * PI0[facet][1][1];
    A[108] = sp[187] * PI0[facet][1][0] + sp[189] * PI0[facet][1][0] + sp[191] * PI0[facet][1][0];
    A[109] = sp[187] * PI0[facet][1][1];
    A[110] = sp[189] * PI0[facet][1][1];
    A[111] = sp[191] * PI0[facet][1][1];
    std::fill(&A[112], &A[120], 0.0);
    A[120] = sp[175] * PI0[facet][2][0] + sp[177] * PI0[facet][2][0] + sp[179] * PI0[facet][2][0];
    A[121] = sp[175] * PI0[facet][2][1];
    A[122] = sp[177] * PI0[facet][2][1];
    A[123] = sp[179] * PI0[facet][2][1];
    A[124] = sp[181] * PI0[facet][2][0] + sp[183] * PI0[facet][2][0] + sp[185] * PI0[facet][2][0];
    A[125] = sp[181] * PI0[facet][2][1];
    A[126] = sp[183] * PI0[facet][2][1];
    A[127] = sp[185] * PI0[facet][2][1];
    A[128] = sp[187] * PI0[facet][2][0] + sp[189] * PI0[facet][2][0] + sp[191] * PI0[facet][2][0];
    A[129] = sp[187] * PI0[facet][2][1];
    A[130] = sp[189] * PI0[facet][2][1];
    A[131] = sp[191] * PI0[facet][2][1];
    std::fill(&A[132], &A[140], 0.0);
    A[140] = sp[175] * PI0[facet][3][0] + sp[177] * PI0[facet][3][0] + sp[179] * PI0[facet][3][0];
    A[141] = sp[175] * PI0[facet][3][1];
    A[142] = sp[177] * PI0[facet][3][1];
    A[143] = sp[179] * PI0[facet][3][1];
    A[144] = sp[181] * PI0[facet][3][0] + sp[183] * PI0[facet][3][0] + sp[185] * PI0[facet][3][0];
    A[145] = sp[181] * PI0[facet][3][1];
    A[146] = sp[183] * PI0[facet][3][1];
    A[147] = sp[185] * PI0[facet][3][1];
    A[148] = sp[187] * PI0[facet][3][0] + sp[189] * PI0[facet][3][0] + sp[191] * PI0[facet][3][0];
    A[149] = sp[187] * PI0[facet][3][1];
    A[150] = sp[189] * PI0[facet][3][1];
    A[151] = sp[191] * PI0[facet][3][1];
    std::fill(&A[152], &A[160], 0.0);
    A[160] = sp[176] * PI0[facet][0][0] + sp[178] * PI0[facet][0][0] + sp[180] * PI0[facet][0][0];
    A[161] = sp[176] * PI0[facet][0][1];
    A[162] = sp[178] * PI0[facet][0][1];
    A[163] = sp[180] * PI0[facet][0][1];
    A[164] = sp[182] * PI0[facet][0][0] + sp[184] * PI0[facet][0][0] + sp[186] * PI0[facet][0][0];
    A[165] = sp[182] * PI0[facet][0][1];
    A[166] = sp[184] * PI0[facet][0][1];
    A[167] = sp[186] * PI0[facet][0][1];
    A[168] = sp[188] * PI0[facet][0][0] + sp[190] * PI0[facet][0][0] + sp[192] * PI0[facet][0][0];
    A[169] = sp[188] * PI0[facet][0][1];
    A[170] = sp[190] * PI0[facet][0][1];
    A[171] = sp[192] * PI0[facet][0][1];
    std::fill(&A[172], &A[180], 0.0);
    A[180] = sp[176] * PI0[facet][1][0] + sp[178] * PI0[facet][1][0] + sp[180] * PI0[facet][1][0];
    A[181] = sp[176] * PI0[facet][1][1];
    A[182] = sp[178] * PI0[facet][1][1];
    A[183] = sp[180] * PI0[facet][1][1];
    A[184] = sp[182] * PI0[facet][1][0] + sp[184] * PI0[facet][1][0] + sp[186] * PI0[facet][1][0];
    A[185] = sp[182] * PI0[facet][1][1];
    A[186] = sp[184] * PI0[facet][1][1];
    A[187] = sp[186] * PI0[facet][1][1];
    A[188] = sp[188] * PI0[facet][1][0] + sp[190] * PI0[facet][1][0] + sp[192] * PI0[facet][1][0];
    A[189] = sp[188] * PI0[facet][1][1];
    A[190] = sp[190] * PI0[facet][1][1];
    A[191] = sp[192] * PI0[facet][1][1];
    std::fill(&A[192], &A[200], 0.0);
    A[200] = sp[176] * PI0[facet][2][0] + sp[178] * PI0[facet][2][0] + sp[180] * PI0[facet][2][0];
    A[201] = sp[176] * PI0[facet][2][1];
    A[202] = sp[178] * PI0[facet][2][1];
    A[203] = sp[180] * PI0[facet][2][1];
    A[204] = sp[182] * PI0[facet][2][0] + sp[184] * PI0[facet][2][0] + sp[186] * PI0[facet][2][0];
    A[205] = sp[182] * PI0[facet][2][1];
    A[206] = sp[184] * PI0[facet][2][1];
    A[207] = sp[186] * PI0[facet][2][1];
    A[208] = sp[188] * PI0[facet][2][0] + sp[190] * PI0[facet][2][0] + sp[192] * PI0[facet][2][0];
    A[209] = sp[188] * PI0[facet][2][1];
    A[210] = sp[190] * PI0[facet][2][1];
    A[211] = sp[192] * PI0[facet][2][1];
    std::fill(&A[212], &A[220], 0.0);
    A[220] = sp[176] * PI0[facet][3][0] + sp[178] * PI0[facet][3][0] + sp[180] * PI0[facet][3][0];
    A[221] = sp[176] * PI0[facet][3][1];
    A[222] = sp[178] * PI0[facet][3][1];
    A[223] = sp[180] * PI0[facet][3][1];
    A[224] = sp[182] * PI0[facet][3][0] + sp[184] * PI0[facet][3][0] + sp[186] * PI0[facet][3][0];
    A[225] = sp[182] * PI0[facet][3][1];
    A[226] = sp[184] * PI0[facet][3][1];
    A[227] = sp[186] * PI0[facet][3][1];
    A[228] = sp[188] * PI0[facet][3][0] + sp[190] * PI0[facet][3][0] + sp[192] * PI0[facet][3][0];
    A[229] = sp[188] * PI0[facet][3][1];
    A[230] = sp[190] * PI0[facet][3][1];
    A[231] = sp[192] * PI0[facet][3][1];
    std::fill(&A[232], &A[400], 0.0);
  }

};


class fluid3dp1p1_form_0: public ufc::form
{
public:

  fluid3dp1p1_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~fluid3dp1p1_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "236ea016bfffad7113db0c45493f111636b0dfc5153b324e1e4f51190b11604c02fe90567d2dc41255c72f004a33ccb62892b95f8dffbbc0c8d2a022ca786412";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 9;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7, 8});
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new fluid3dp1p1_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new fluid3dp1p1_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return nullptr;
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new fluid3dp1p1_finite_element_2();
        break;
      }
    case 1:
      {
        return new fluid3dp1p1_finite_element_2();
        break;
      }
    case 2:
      {
        return new fluid3dp1p1_finite_element_1();
        break;
      }
    case 3:
      {
        return new fluid3dp1p1_finite_element_1();
        break;
      }
    case 4:
      {
        return new fluid3dp1p1_finite_element_1();
        break;
      }
    case 5:
      {
        return new fluid3dp1p1_finite_element_4();
        break;
      }
    case 6:
      {
        return new fluid3dp1p1_finite_element_3();
        break;
      }
    case 7:
      {
        return new fluid3dp1p1_finite_element_3();
        break;
      }
    case 8:
      {
        return new fluid3dp1p1_finite_element_3();
        break;
      }
    case 9:
      {
        return new fluid3dp1p1_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new fluid3dp1p1_dofmap_2();
        break;
      }
    case 1:
      {
        return new fluid3dp1p1_dofmap_2();
        break;
      }
    case 2:
      {
        return new fluid3dp1p1_dofmap_1();
        break;
      }
    case 3:
      {
        return new fluid3dp1p1_dofmap_1();
        break;
      }
    case 4:
      {
        return new fluid3dp1p1_dofmap_1();
        break;
      }
    case 5:
      {
        return new fluid3dp1p1_dofmap_4();
        break;
      }
    case 6:
      {
        return new fluid3dp1p1_dofmap_3();
        break;
      }
    case 7:
      {
        return new fluid3dp1p1_dofmap_3();
        break;
      }
    case 8:
      {
        return new fluid3dp1p1_dofmap_3();
        break;
      }
    case 9:
      {
        return new fluid3dp1p1_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 215;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 204;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 204:
      {
        return new fluid3dp1p1_cell_integral_0_204();
        break;
      }
    case 210:
      {
        return new fluid3dp1p1_cell_integral_0_210();
        break;
      }
    case 214:
      {
        return new fluid3dp1p1_cell_integral_0_214();
        break;
      }
    }
    
    return 0;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 203:
      {
        return new fluid3dp1p1_exterior_facet_integral_0_203();
        break;
      }
    }
    
    return 0;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return 0;
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return 0;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return 0;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return 0;
  }

};


class fluid3dp1p1_form_1: public ufc::form
{
public:

  fluid3dp1p1_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~fluid3dp1p1_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "500723f8256e4fb0b9c4edd45ebed3c153152105d7bad4fb19d1ae791bad29d535728a62ee88399cfe0ff861811f2010d5d35064f01fc2086dfe3c4895b93cb0";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 7;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    static const std::vector<std::size_t> position({0, 3, 4, 5, 6, 7, 8});
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new fluid3dp1p1_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new fluid3dp1p1_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return nullptr;
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new fluid3dp1p1_finite_element_2();
        break;
      }
    case 1:
      {
        return new fluid3dp1p1_finite_element_2();
        break;
      }
    case 2:
      {
        return new fluid3dp1p1_finite_element_2();
        break;
      }
    case 3:
      {
        return new fluid3dp1p1_finite_element_1();
        break;
      }
    case 4:
      {
        return new fluid3dp1p1_finite_element_4();
        break;
      }
    case 5:
      {
        return new fluid3dp1p1_finite_element_3();
        break;
      }
    case 6:
      {
        return new fluid3dp1p1_finite_element_3();
        break;
      }
    case 7:
      {
        return new fluid3dp1p1_finite_element_3();
        break;
      }
    case 8:
      {
        return new fluid3dp1p1_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new fluid3dp1p1_dofmap_2();
        break;
      }
    case 1:
      {
        return new fluid3dp1p1_dofmap_2();
        break;
      }
    case 2:
      {
        return new fluid3dp1p1_dofmap_2();
        break;
      }
    case 3:
      {
        return new fluid3dp1p1_dofmap_1();
        break;
      }
    case 4:
      {
        return new fluid3dp1p1_dofmap_4();
        break;
      }
    case 5:
      {
        return new fluid3dp1p1_dofmap_3();
        break;
      }
    case 6:
      {
        return new fluid3dp1p1_dofmap_3();
        break;
      }
    case 7:
      {
        return new fluid3dp1p1_dofmap_3();
        break;
      }
    case 8:
      {
        return new fluid3dp1p1_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 215;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 204;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 204:
      {
        return new fluid3dp1p1_cell_integral_1_204();
        break;
      }
    case 210:
      {
        return new fluid3dp1p1_cell_integral_1_210();
        break;
      }
    case 214:
      {
        return new fluid3dp1p1_cell_integral_1_214();
        break;
      }
    }
    
    return 0;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 203:
      {
        return new fluid3dp1p1_exterior_facet_integral_1_203();
        break;
      }
    }
    
    return 0;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return 0;
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return 0;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return 0;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace Fluid3DP1P1
{

class CoefficientSpace_alpha1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_alpha1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_alpha1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_delta_SUPG: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_delta_SUPG(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_delta_SUPG(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_dt: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_dt(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_dt(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_mu_f: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_mu_f(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_mu_f(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_rho_f: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_rho_f(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_rho_f(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_v0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_v0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_v0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_v1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_v1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_v1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_v_p_p: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_v_p_p(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_v_p_p(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_vm: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_vm(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_vm(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_F_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_F_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_v_p_p Form_F_FunctionSpace_1;

typedef CoefficientSpace_v0 Form_F_FunctionSpace_2;

typedef CoefficientSpace_v1 Form_F_FunctionSpace_3;

typedef CoefficientSpace_vm Form_F_FunctionSpace_4;

typedef CoefficientSpace_delta_SUPG Form_F_FunctionSpace_5;

typedef CoefficientSpace_rho_f Form_F_FunctionSpace_6;

typedef CoefficientSpace_mu_f Form_F_FunctionSpace_7;

typedef CoefficientSpace_dt Form_F_FunctionSpace_8;

typedef CoefficientSpace_alpha1 Form_F_FunctionSpace_9;

class Form_F: public dolfin::Form
{
public:

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 9), v_p_p(*this, 0), v0(*this, 1), v1(*this, 2), vm(*this, 3), delta_SUPG(*this, 4), rho_f(*this, 5), mu_f(*this, 6), dt(*this, 7), alpha1(*this, 8)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const fluid3dp1p1_form_0>();
  }

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> v1, std::shared_ptr<const dolfin::GenericFunction> vm, std::shared_ptr<const dolfin::GenericFunction> delta_SUPG, std::shared_ptr<const dolfin::GenericFunction> rho_f, std::shared_ptr<const dolfin::GenericFunction> mu_f, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> alpha1):
    dolfin::Form(1, 9), v_p_p(*this, 0), v0(*this, 1), v1(*this, 2), vm(*this, 3), delta_SUPG(*this, 4), rho_f(*this, 5), mu_f(*this, 6), dt(*this, 7), alpha1(*this, 8)
  {
    _function_spaces[0] = V0;

    this->v_p_p = v_p_p;
    this->v0 = v0;
    this->v1 = v1;
    this->vm = vm;
    this->delta_SUPG = delta_SUPG;
    this->rho_f = rho_f;
    this->mu_f = mu_f;
    this->dt = dt;
    this->alpha1 = alpha1;

    _ufc_form = std::make_shared<const fluid3dp1p1_form_0>();
  }

  // Destructor
  ~Form_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "v1")
      return 2;
    else if (name == "vm")
      return 3;
    else if (name == "delta_SUPG")
      return 4;
    else if (name == "rho_f")
      return 5;
    else if (name == "mu_f")
      return 6;
    else if (name == "dt")
      return 7;
    else if (name == "alpha1")
      return 8;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p_p";
    case 1:
      return "v0";
    case 2:
      return "v1";
    case 3:
      return "vm";
    case 4:
      return "delta_SUPG";
    case 5:
      return "rho_f";
    case 6:
      return "mu_f";
    case 7:
      return "dt";
    case 8:
      return "alpha1";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_v_p_p;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_v0;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_v1;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_vm;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_delta_SUPG;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_rho_f;
  typedef Form_F_FunctionSpace_7 CoefficientSpace_mu_f;
  typedef Form_F_FunctionSpace_8 CoefficientSpace_dt;
  typedef Form_F_FunctionSpace_9 CoefficientSpace_alpha1;

  // Coefficients
  dolfin::CoefficientAssigner v_p_p;
  dolfin::CoefficientAssigner v0;
  dolfin::CoefficientAssigner v1;
  dolfin::CoefficientAssigner vm;
  dolfin::CoefficientAssigner delta_SUPG;
  dolfin::CoefficientAssigner rho_f;
  dolfin::CoefficientAssigner mu_f;
  dolfin::CoefficientAssigner dt;
  dolfin::CoefficientAssigner alpha1;
};

class MultiMeshForm_F: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), v_p_p(*this, 0), v0(*this, 1), v1(*this, 2), vm(*this, 3), delta_SUPG(*this, 4), rho_f(*this, 5), mu_f(*this, 6), dt(*this, 7), alpha1(*this, 8)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> v1, std::shared_ptr<const dolfin::GenericFunction> vm, std::shared_ptr<const dolfin::GenericFunction> delta_SUPG, std::shared_ptr<const dolfin::GenericFunction> rho_f, std::shared_ptr<const dolfin::GenericFunction> mu_f, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> alpha1):
    dolfin::MultiMeshForm(V0), v_p_p(*this, 0), v0(*this, 1), v1(*this, 2), vm(*this, 3), delta_SUPG(*this, 4), rho_f(*this, 5), mu_f(*this, 6), dt(*this, 7), alpha1(*this, 8)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->v_p_p = v_p_p;
    this->v0 = v0;
    this->v1 = v1;
    this->vm = vm;
    this->delta_SUPG = delta_SUPG;
    this->rho_f = rho_f;
    this->mu_f = mu_f;
    this->dt = dt;
    this->alpha1 = alpha1;

  }

  // Destructor
  ~MultiMeshForm_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "v1")
      return 2;
    else if (name == "vm")
      return 3;
    else if (name == "delta_SUPG")
      return 4;
    else if (name == "rho_f")
      return 5;
    else if (name == "mu_f")
      return 6;
    else if (name == "dt")
      return 7;
    else if (name == "alpha1")
      return 8;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p_p";
    case 1:
      return "v0";
    case 2:
      return "v1";
    case 3:
      return "vm";
    case 4:
      return "delta_SUPG";
    case 5:
      return "rho_f";
    case 6:
      return "mu_f";
    case 7:
      return "dt";
    case 8:
      return "alpha1";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_v_p_p;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_v0;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_v1;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_vm;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_delta_SUPG;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_rho_f;
  typedef Form_F_FunctionSpace_7 CoefficientSpace_mu_f;
  typedef Form_F_FunctionSpace_8 CoefficientSpace_dt;
  typedef Form_F_FunctionSpace_9 CoefficientSpace_alpha1;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner v_p_p;
  dolfin::MultiMeshCoefficientAssigner v0;
  dolfin::MultiMeshCoefficientAssigner v1;
  dolfin::MultiMeshCoefficientAssigner vm;
  dolfin::MultiMeshCoefficientAssigner delta_SUPG;
  dolfin::MultiMeshCoefficientAssigner rho_f;
  dolfin::MultiMeshCoefficientAssigner mu_f;
  dolfin::MultiMeshCoefficientAssigner dt;
  dolfin::MultiMeshCoefficientAssigner alpha1;
};

class Form_J_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<fluid3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<fluid3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_J_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_v_p_p Form_J_FunctionSpace_2;

typedef CoefficientSpace_vm Form_J_FunctionSpace_3;

typedef CoefficientSpace_delta_SUPG Form_J_FunctionSpace_4;

typedef CoefficientSpace_rho_f Form_J_FunctionSpace_5;

typedef CoefficientSpace_mu_f Form_J_FunctionSpace_6;

typedef CoefficientSpace_dt Form_J_FunctionSpace_7;

typedef CoefficientSpace_alpha1 Form_J_FunctionSpace_8;

class Form_J: public dolfin::Form
{
public:

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 7), v_p_p(*this, 0), vm(*this, 1), delta_SUPG(*this, 2), rho_f(*this, 3), mu_f(*this, 4), dt(*this, 5), alpha1(*this, 6)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const fluid3dp1p1_form_1>();
  }

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p_p, std::shared_ptr<const dolfin::GenericFunction> vm, std::shared_ptr<const dolfin::GenericFunction> delta_SUPG, std::shared_ptr<const dolfin::GenericFunction> rho_f, std::shared_ptr<const dolfin::GenericFunction> mu_f, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> alpha1):
    dolfin::Form(2, 7), v_p_p(*this, 0), vm(*this, 1), delta_SUPG(*this, 2), rho_f(*this, 3), mu_f(*this, 4), dt(*this, 5), alpha1(*this, 6)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->v_p_p = v_p_p;
    this->vm = vm;
    this->delta_SUPG = delta_SUPG;
    this->rho_f = rho_f;
    this->mu_f = mu_f;
    this->dt = dt;
    this->alpha1 = alpha1;

    _ufc_form = std::make_shared<const fluid3dp1p1_form_1>();
  }

  // Destructor
  ~Form_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p_p")
      return 0;
    else if (name == "vm")
      return 1;
    else if (name == "delta_SUPG")
      return 2;
    else if (name == "rho_f")
      return 3;
    else if (name == "mu_f")
      return 4;
    else if (name == "dt")
      return 5;
    else if (name == "alpha1")
      return 6;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p_p";
    case 1:
      return "vm";
    case 2:
      return "delta_SUPG";
    case 3:
      return "rho_f";
    case 4:
      return "mu_f";
    case 5:
      return "dt";
    case 6:
      return "alpha1";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_v_p_p;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_vm;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_delta_SUPG;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_rho_f;
  typedef Form_J_FunctionSpace_6 CoefficientSpace_mu_f;
  typedef Form_J_FunctionSpace_7 CoefficientSpace_dt;
  typedef Form_J_FunctionSpace_8 CoefficientSpace_alpha1;

  // Coefficients
  dolfin::CoefficientAssigner v_p_p;
  dolfin::CoefficientAssigner vm;
  dolfin::CoefficientAssigner delta_SUPG;
  dolfin::CoefficientAssigner rho_f;
  dolfin::CoefficientAssigner mu_f;
  dolfin::CoefficientAssigner dt;
  dolfin::CoefficientAssigner alpha1;
};

class MultiMeshForm_J: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), v_p_p(*this, 0), vm(*this, 1), delta_SUPG(*this, 2), rho_f(*this, 3), mu_f(*this, 4), dt(*this, 5), alpha1(*this, 6)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p_p, std::shared_ptr<const dolfin::GenericFunction> vm, std::shared_ptr<const dolfin::GenericFunction> delta_SUPG, std::shared_ptr<const dolfin::GenericFunction> rho_f, std::shared_ptr<const dolfin::GenericFunction> mu_f, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> alpha1):
    dolfin::MultiMeshForm(V1, V0), v_p_p(*this, 0), vm(*this, 1), delta_SUPG(*this, 2), rho_f(*this, 3), mu_f(*this, 4), dt(*this, 5), alpha1(*this, 6)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->v_p_p = v_p_p;
    this->vm = vm;
    this->delta_SUPG = delta_SUPG;
    this->rho_f = rho_f;
    this->mu_f = mu_f;
    this->dt = dt;
    this->alpha1 = alpha1;

  }

  // Destructor
  ~MultiMeshForm_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p_p")
      return 0;
    else if (name == "vm")
      return 1;
    else if (name == "delta_SUPG")
      return 2;
    else if (name == "rho_f")
      return 3;
    else if (name == "mu_f")
      return 4;
    else if (name == "dt")
      return 5;
    else if (name == "alpha1")
      return 6;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p_p";
    case 1:
      return "vm";
    case 2:
      return "delta_SUPG";
    case 3:
      return "rho_f";
    case 4:
      return "mu_f";
    case 5:
      return "dt";
    case 6:
      return "alpha1";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_v_p_p;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_vm;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_delta_SUPG;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_rho_f;
  typedef Form_J_FunctionSpace_6 CoefficientSpace_mu_f;
  typedef Form_J_FunctionSpace_7 CoefficientSpace_dt;
  typedef Form_J_FunctionSpace_8 CoefficientSpace_alpha1;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner v_p_p;
  dolfin::MultiMeshCoefficientAssigner vm;
  dolfin::MultiMeshCoefficientAssigner delta_SUPG;
  dolfin::MultiMeshCoefficientAssigner rho_f;
  dolfin::MultiMeshCoefficientAssigner mu_f;
  dolfin::MultiMeshCoefficientAssigner dt;
  dolfin::MultiMeshCoefficientAssigner alpha1;
};

// Class typedefs
typedef Form_J BilinearForm;
typedef MultiMeshForm_J MultiMeshBilinearForm;
typedef Form_J JacobianForm;
typedef MultiMeshForm_J MultiMeshJacobianForm;
typedef Form_F LinearForm;
typedef MultiMeshForm_F MultiMeshLinearForm;
typedef Form_F ResidualForm;
typedef MultiMeshForm_F MultiMeshResidualForm;
typedef Form_F::TestSpace FunctionSpace;
typedef Form_F::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
