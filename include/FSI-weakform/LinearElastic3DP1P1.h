// This code conforms with the UFC specification version 2017.1.0
// and was automatically generated by FFC version 2017.1.0.post2.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   add_tabulate_tensor_timing:     False
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   generate_dummy_tabulate_tensor: False
//   max_signature_length:           0
//   optimize:                       True
//   precision:                      None
//   quadrature_degree:              None
//   quadrature_rule:                None
//   representation:                 'auto'
//   split:                          False

#ifndef __LINEARELASTIC3DP1P1_H
#define __LINEARELASTIC3DP1P1_H
#include <algorithm>
#include <cmath>
#include <stdexcept>
#include <ufc.h>

class linearelastic3dp1p1_finite_element_0: public ufc::finite_element
{
public:

  linearelastic3dp1p1_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new linearelastic3dp1p1_finite_element_0();
  }

};


class linearelastic3dp1p1_finite_element_1: public ufc::finite_element
{
public:

  linearelastic3dp1p1_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[4] = vals[1];
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[5] = vals[1];
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[6] = vals[1];
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[7] = vals[1];
    values[11] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = coordinate_dofs[6];
    dof_coordinates[19] = coordinate_dofs[7];
    dof_coordinates[20] = coordinate_dofs[8];
    dof_coordinates[21] = coordinate_dofs[9];
    dof_coordinates[22] = coordinate_dofs[10];
    dof_coordinates[23] = coordinate_dofs[11];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[6];
    dof_coordinates[31] = coordinate_dofs[7];
    dof_coordinates[32] = coordinate_dofs[8];
    dof_coordinates[33] = coordinate_dofs[9];
    dof_coordinates[34] = coordinate_dofs[10];
    dof_coordinates[35] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_finite_element_0();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_finite_element_0();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new linearelastic3dp1p1_finite_element_1();
  }

};


class linearelastic3dp1p1_finite_element_2: public ufc::finite_element
{
public:

  linearelastic3dp1p1_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3), FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 20;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 5;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 5;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 5;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 5;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    values[4] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 20; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 5; s++)
      {
        values[r*5 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 5*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[4*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[4*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[4*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[4*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 20; r++)
    {
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[15];
    for (unsigned int r = 0; r < 15; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 20; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 12:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 13:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 14:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 15:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 16:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 17:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 18:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 19:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[4] = vals[1];
    values[8] = vals[2];
    values[12] = vals[3];
    values[16] = vals[4];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[5] = vals[1];
    values[9] = vals[2];
    values[13] = vals[3];
    values[17] = vals[4];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[6] = vals[1];
    values[10] = vals[2];
    values[14] = vals[3];
    values[18] = vals[4];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[7] = vals[1];
    values[11] = vals[2];
    values[15] = vals[3];
    values[19] = vals[4];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[5] = dof_values[1];
    vertex_values[10] = dof_values[2];
    vertex_values[15] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[6] = dof_values[5];
    vertex_values[11] = dof_values[6];
    vertex_values[16] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[7] = dof_values[9];
    vertex_values[12] = dof_values[10];
    vertex_values[17] = dof_values[11];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[12];
    vertex_values[8] = dof_values[13];
    vertex_values[13] = dof_values[14];
    vertex_values[18] = dof_values[15];
    // Evaluate function and change variables
    vertex_values[4] = dof_values[16];
    vertex_values[9] = dof_values[17];
    vertex_values[14] = dof_values[18];
    vertex_values[19] = dof_values[19];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = coordinate_dofs[6];
    dof_coordinates[19] = coordinate_dofs[7];
    dof_coordinates[20] = coordinate_dofs[8];
    dof_coordinates[21] = coordinate_dofs[9];
    dof_coordinates[22] = coordinate_dofs[10];
    dof_coordinates[23] = coordinate_dofs[11];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[6];
    dof_coordinates[31] = coordinate_dofs[7];
    dof_coordinates[32] = coordinate_dofs[8];
    dof_coordinates[33] = coordinate_dofs[9];
    dof_coordinates[34] = coordinate_dofs[10];
    dof_coordinates[35] = coordinate_dofs[11];
    dof_coordinates[36] = coordinate_dofs[0];
    dof_coordinates[37] = coordinate_dofs[1];
    dof_coordinates[38] = coordinate_dofs[2];
    dof_coordinates[39] = coordinate_dofs[3];
    dof_coordinates[40] = coordinate_dofs[4];
    dof_coordinates[41] = coordinate_dofs[5];
    dof_coordinates[42] = coordinate_dofs[6];
    dof_coordinates[43] = coordinate_dofs[7];
    dof_coordinates[44] = coordinate_dofs[8];
    dof_coordinates[45] = coordinate_dofs[9];
    dof_coordinates[46] = coordinate_dofs[10];
    dof_coordinates[47] = coordinate_dofs[11];
    dof_coordinates[48] = coordinate_dofs[0];
    dof_coordinates[49] = coordinate_dofs[1];
    dof_coordinates[50] = coordinate_dofs[2];
    dof_coordinates[51] = coordinate_dofs[3];
    dof_coordinates[52] = coordinate_dofs[4];
    dof_coordinates[53] = coordinate_dofs[5];
    dof_coordinates[54] = coordinate_dofs[6];
    dof_coordinates[55] = coordinate_dofs[7];
    dof_coordinates[56] = coordinate_dofs[8];
    dof_coordinates[57] = coordinate_dofs[9];
    dof_coordinates[58] = coordinate_dofs[10];
    dof_coordinates[59] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_finite_element_1();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_finite_element_0();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new linearelastic3dp1p1_finite_element_2();
  }

};


class linearelastic3dp1p1_finite_element_3: public ufc::finite_element
{
public:

  linearelastic3dp1p1_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', tetrahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    dof_coordinates[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    dof_coordinates[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new linearelastic3dp1p1_finite_element_3();
  }

};


class linearelastic3dp1p1_finite_element_4: public ufc::finite_element
{
public:

  linearelastic3dp1p1_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Discontinuous Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Discontinuous Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051664, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943223, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new linearelastic3dp1p1_finite_element_4();
  }

};


class linearelastic3dp1p1_dofmap_0: public ufc::dofmap
{
public:

  linearelastic3dp1p1_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 3;
        break;
      }
    case 3:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new linearelastic3dp1p1_dofmap_0();
  }

};


class linearelastic3dp1p1_dofmap_1: public ufc::dofmap
{
public:

  linearelastic3dp1p1_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3*num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 6;
        break;
      }
    case 2:
      {
        return 9;
        break;
      }
    case 3:
      {
        return 12;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        dofs[4] = 10;
        dofs[5] = 11;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        dofs[4] = 9;
        dofs[5] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 9;
        dofs[5] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 4;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 11;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        dofs[4] = 8;
        dofs[5] = 9;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_dofmap_0();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_dofmap_0();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new linearelastic3dp1p1_dofmap_1();
  }

};


class linearelastic3dp1p1_dofmap_2: public ufc::dofmap
{
public:

  linearelastic3dp1p1_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3), FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 5*num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 20;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 15;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 5;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 5;
        break;
      }
    case 1:
      {
        return 10;
        break;
      }
    case 2:
      {
        return 15;
        break;
      }
    case 3:
      {
        return 20;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[12] = offset + entity_indices[0][0];
    dofs[13] = offset + entity_indices[0][1];
    dofs[14] = offset + entity_indices[0][2];
    dofs[15] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[16] = offset + entity_indices[0][0];
    dofs[17] = offset + entity_indices[0][1];
    dofs[18] = offset + entity_indices[0][2];
    dofs[19] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 13;
      dofs[10] = 14;
      dofs[11] = 15;
      dofs[12] = 17;
      dofs[13] = 18;
      dofs[14] = 19;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 14;
      dofs[11] = 15;
      dofs[12] = 16;
      dofs[13] = 18;
      dofs[14] = 19;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 15;
      dofs[12] = 16;
      dofs[13] = 17;
      dofs[14] = 19;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 14;
      dofs[12] = 16;
      dofs[13] = 17;
      dofs[14] = 18;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
        dofs[3] = 12;
        dofs[4] = 16;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
        dofs[3] = 13;
        dofs[4] = 17;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
        dofs[3] = 14;
        dofs[4] = 18;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
        dofs[3] = 15;
        dofs[4] = 19;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
        dofs[3] = 12;
        dofs[4] = 16;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
        dofs[3] = 13;
        dofs[4] = 17;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
        dofs[3] = 14;
        dofs[4] = 18;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
        dofs[3] = 15;
        dofs[4] = 19;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        dofs[4] = 10;
        dofs[5] = 11;
        dofs[6] = 14;
        dofs[7] = 15;
        dofs[8] = 18;
        dofs[9] = 19;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        dofs[4] = 9;
        dofs[5] = 11;
        dofs[6] = 13;
        dofs[7] = 15;
        dofs[8] = 17;
        dofs[9] = 19;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 9;
        dofs[5] = 10;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 17;
        dofs[9] = 18;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 4;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 11;
        dofs[6] = 12;
        dofs[7] = 15;
        dofs[8] = 16;
        dofs[9] = 19;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        dofs[6] = 12;
        dofs[7] = 14;
        dofs[8] = 16;
        dofs[9] = 18;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 12;
        dofs[7] = 13;
        dofs[8] = 16;
        dofs[9] = 17;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        dofs[9] = 13;
        dofs[10] = 14;
        dofs[11] = 15;
        dofs[12] = 17;
        dofs[13] = 18;
        dofs[14] = 19;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        dofs[9] = 12;
        dofs[10] = 14;
        dofs[11] = 15;
        dofs[12] = 16;
        dofs[13] = 18;
        dofs[14] = 19;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        dofs[9] = 12;
        dofs[10] = 13;
        dofs[11] = 15;
        dofs[12] = 16;
        dofs[13] = 17;
        dofs[14] = 19;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        dofs[9] = 12;
        dofs[10] = 13;
        dofs[11] = 14;
        dofs[12] = 16;
        dofs[13] = 17;
        dofs[14] = 18;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
      dofs[12] = 12;
      dofs[13] = 13;
      dofs[14] = 14;
      dofs[15] = 15;
      dofs[16] = 16;
      dofs[17] = 17;
      dofs[18] = 18;
      dofs[19] = 19;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_dofmap_1();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_dofmap_0();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new linearelastic3dp1p1_dofmap_2();
  }

};


class linearelastic3dp1p1_dofmap_3: public ufc::dofmap
{
public:

  linearelastic3dp1p1_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', tetrahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      case 4:
        {
          
          break;
        }
      case 5:
        {
          
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new linearelastic3dp1p1_dofmap_3();
  }

};


class linearelastic3dp1p1_dofmap_4: public ufc::dofmap
{
public:

  linearelastic3dp1p1_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 4*num_global_entities[3];
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 4*entity_indices[3][0];
    dofs[1] = 4*entity_indices[3][0] + 1;
    dofs[2] = 4*entity_indices[3][0] + 2;
    dofs[3] = 4*entity_indices[3][0] + 3;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      case 4:
        {
          
          break;
        }
      case 5:
        {
          
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new linearelastic3dp1p1_dofmap_4();
  }

};


class linearelastic3dp1p1_cell_integral_0_210: public ufc::cell_integral
{
public:

  linearelastic3dp1p1_cell_integral_0_210() : ufc::cell_integral()
  {

  }

  ~linearelastic3dp1p1_cell_integral_0_210() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 2
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           2
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.04166666666666666, 0.04166666666666666, 0.04166666666666666, 0.04166666666666666 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE23_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE23_C0_Q4[1][4][4] =
        { { { 0.1381966011250091, 0.585410196624969, 0.138196601125011, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.585410196624969, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.138196601125011, 0.585410196624969 },
            { 0.5854101966249672, 0.1381966011250109, 0.138196601125011, 0.138196601125011 } } };
    // Unstructured piecewise computations
    double w2_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c1 += w[2][ic + 4] * FE23_C0_D001_Q4[0][0][ic];
    const double J_c4 = coordinate_dofs[1] * FE23_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE23_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE23_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE23_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE23_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE23_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE23_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE23_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE23_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE23_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE23_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE23_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE23_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE23_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE23_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE23_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE23_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE23_C0_D001_Q4[0][0][1];
    const double w2_d1_c1 = w[2][4] * FE23_C0_D001_Q4[0][0][0] + w[2][6] * FE23_C0_D001_Q4[0][0][1];
    const double w2_d2_c1 = w[2][4] * FE23_C0_D001_Q4[0][0][0] + w[2][7] * FE23_C0_D001_Q4[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE23_C0_D001_Q4[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE23_C0_D001_Q4[0][0][0] + w[0][6] * FE23_C0_D001_Q4[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE23_C0_D001_Q4[0][0][0] + w[0][7] * FE23_C0_D001_Q4[0][0][1];
    double w1_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c1 += w[1][ic + 4] * FE23_C0_D001_Q4[0][0][ic];
    const double w1_d1_c1 = w[1][4] * FE23_C0_D001_Q4[0][0][0] + w[1][6] * FE23_C0_D001_Q4[0][0][1];
    const double w1_d2_c1 = w[1][4] * FE23_C0_D001_Q4[0][0][0] + w[1][7] * FE23_C0_D001_Q4[0][0][1];
    double w2_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c0 += w[2][ic] * FE23_C0_D001_Q4[0][0][ic];
    const double w2_d1_c0 = w[2][0] * FE23_C0_D001_Q4[0][0][0] + w[2][2] * FE23_C0_D001_Q4[0][0][1];
    const double w2_d2_c0 = w[2][0] * FE23_C0_D001_Q4[0][0][0] + w[2][3] * FE23_C0_D001_Q4[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE23_C0_D001_Q4[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE23_C0_D001_Q4[0][0][0] + w[0][2] * FE23_C0_D001_Q4[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE23_C0_D001_Q4[0][0][0] + w[0][3] * FE23_C0_D001_Q4[0][0][1];
    double w1_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c0 += w[1][ic] * FE23_C0_D001_Q4[0][0][ic];
    const double w1_d1_c0 = w[1][0] * FE23_C0_D001_Q4[0][0][0] + w[1][2] * FE23_C0_D001_Q4[0][0][1];
    const double w1_d2_c0 = w[1][0] * FE23_C0_D001_Q4[0][0][0] + w[1][3] * FE23_C0_D001_Q4[0][0][1];
    double w2_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c2 += w[2][ic + 8] * FE23_C0_D001_Q4[0][0][ic];
    const double w2_d1_c2 = w[2][8] * FE23_C0_D001_Q4[0][0][0] + w[2][10] * FE23_C0_D001_Q4[0][0][1];
    const double w2_d2_c2 = w[2][8] * FE23_C0_D001_Q4[0][0][0] + w[2][11] * FE23_C0_D001_Q4[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE23_C0_D001_Q4[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE23_C0_D001_Q4[0][0][0] + w[0][10] * FE23_C0_D001_Q4[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE23_C0_D001_Q4[0][0][0] + w[0][11] * FE23_C0_D001_Q4[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 8] * FE23_C0_D001_Q4[0][0][ic];
    const double w1_d1_c2 = w[1][8] * FE23_C0_D001_Q4[0][0][0] + w[1][10] * FE23_C0_D001_Q4[0][0][1];
    const double w1_d2_c2 = w[1][8] * FE23_C0_D001_Q4[0][0][0] + w[1][11] * FE23_C0_D001_Q4[0][0][1];
    alignas(32) double sp[257];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = w2_d0_c1 * sp[14];
    sp[16] = J_c3 * (-1 * J_c8);
    sp[17] = sp[4] + sp[16];
    sp[18] = sp[17] / sp[13];
    sp[19] = w2_d1_c1 * sp[18];
    sp[20] = sp[15] + sp[19];
    sp[21] = sp[11] / sp[13];
    sp[22] = w2_d2_c1 * sp[21];
    sp[23] = sp[20] + sp[22];
    sp[24] = w0_d0_c1 * sp[14];
    sp[25] = w0_d1_c1 * sp[18];
    sp[26] = sp[24] + sp[25];
    sp[27] = w0_d2_c1 * sp[21];
    sp[28] = sp[26] + sp[27];
    sp[29] = w1_d0_c1 * sp[14];
    sp[30] = w1_d1_c1 * sp[18];
    sp[31] = sp[29] + sp[30];
    sp[32] = w1_d2_c1 * sp[21];
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[28] + sp[33];
    sp[35] = sp[34] * w[3][0];
    sp[36] = sp[23] + 0.5 * sp[35];
    sp[37] = J_c2 * J_c7;
    sp[38] = J_c8 * (-1 * J_c1);
    sp[39] = sp[37] + sp[38];
    sp[40] = sp[39] / sp[13];
    sp[41] = w2_d0_c0 * sp[40];
    sp[42] = J_c0 * J_c8;
    sp[43] = J_c6 * (-1 * J_c2);
    sp[44] = sp[42] + sp[43];
    sp[45] = sp[44] / sp[13];
    sp[46] = w2_d1_c0 * sp[45];
    sp[47] = sp[41] + sp[46];
    sp[48] = J_c1 * J_c6;
    sp[49] = J_c0 * J_c7;
    sp[50] = sp[48] + -1 * sp[49];
    sp[51] = sp[50] / sp[13];
    sp[52] = w2_d2_c0 * sp[51];
    sp[53] = sp[47] + sp[52];
    sp[54] = w0_d0_c0 * sp[40];
    sp[55] = w0_d1_c0 * sp[45];
    sp[56] = sp[54] + sp[55];
    sp[57] = w0_d2_c0 * sp[51];
    sp[58] = sp[56] + sp[57];
    sp[59] = w1_d0_c0 * sp[40];
    sp[60] = w1_d1_c0 * sp[45];
    sp[61] = sp[59] + sp[60];
    sp[62] = w1_d2_c0 * sp[51];
    sp[63] = sp[61] + sp[62];
    sp[64] = sp[58] + sp[63];
    sp[65] = sp[64] * w[3][0];
    sp[66] = sp[53] + 0.5 * sp[65];
    sp[67] = sp[36] + sp[66];
    sp[68] = J_c1 * J_c5;
    sp[69] = J_c2 * J_c4;
    sp[70] = sp[68] + -1 * sp[69];
    sp[71] = sp[70] / sp[13];
    sp[72] = w2_d0_c0 * sp[71];
    sp[73] = J_c2 * J_c3;
    sp[74] = J_c0 * J_c5;
    sp[75] = sp[73] + -1 * sp[74];
    sp[76] = sp[75] / sp[13];
    sp[77] = w2_d1_c0 * sp[76];
    sp[78] = sp[72] + sp[77];
    sp[79] = J_c0 * J_c4;
    sp[80] = J_c1 * J_c3;
    sp[81] = sp[79] + -1 * sp[80];
    sp[82] = sp[81] / sp[13];
    sp[83] = w2_d2_c0 * sp[82];
    sp[84] = sp[78] + sp[83];
    sp[85] = w0_d0_c0 * sp[71];
    sp[86] = w0_d1_c0 * sp[76];
    sp[87] = sp[85] + sp[86];
    sp[88] = w0_d2_c0 * sp[82];
    sp[89] = sp[87] + sp[88];
    sp[90] = w1_d0_c0 * sp[71];
    sp[91] = w1_d1_c0 * sp[76];
    sp[92] = sp[90] + sp[91];
    sp[93] = w1_d2_c0 * sp[82];
    sp[94] = sp[92] + sp[93];
    sp[95] = sp[89] + sp[94];
    sp[96] = sp[95] * w[3][0];
    sp[97] = sp[84] + 0.5 * sp[96];
    sp[98] = w2_d0_c2 * sp[40];
    sp[99] = w2_d1_c2 * sp[45];
    sp[100] = sp[98] + sp[99];
    sp[101] = w2_d2_c2 * sp[51];
    sp[102] = sp[100] + sp[101];
    sp[103] = w0_d0_c2 * sp[40];
    sp[104] = w0_d1_c2 * sp[45];
    sp[105] = sp[103] + sp[104];
    sp[106] = w0_d2_c2 * sp[51];
    sp[107] = sp[105] + sp[106];
    sp[108] = w1_d0_c2 * sp[40];
    sp[109] = w1_d1_c2 * sp[45];
    sp[110] = sp[108] + sp[109];
    sp[111] = w1_d2_c2 * sp[51];
    sp[112] = sp[110] + sp[111];
    sp[113] = sp[107] + sp[112];
    sp[114] = sp[113] * w[3][0];
    sp[115] = sp[102] + 0.5 * sp[114];
    sp[116] = sp[97] * sp[115];
    sp[117] = w2_d0_c2 * sp[71];
    sp[118] = w2_d1_c2 * sp[76];
    sp[119] = sp[117] + sp[118];
    sp[120] = w2_d2_c2 * sp[82];
    sp[121] = sp[119] + sp[120];
    sp[122] = w0_d0_c2 * sp[71];
    sp[123] = w0_d1_c2 * sp[76];
    sp[124] = sp[122] + sp[123];
    sp[125] = w0_d2_c2 * sp[82];
    sp[126] = sp[124] + sp[125];
    sp[127] = w1_d0_c2 * sp[71];
    sp[128] = w1_d1_c2 * sp[76];
    sp[129] = sp[127] + sp[128];
    sp[130] = w1_d2_c2 * sp[82];
    sp[131] = sp[129] + sp[130];
    sp[132] = sp[126] + sp[131];
    sp[133] = sp[132] * w[3][0];
    sp[134] = sp[121] + 0.5 * sp[133];
    sp[135] = (1 + sp[134]) * (-1 * sp[66]);
    sp[136] = sp[116] + sp[135];
    sp[137] = w2_d0_c0 * sp[14];
    sp[138] = w2_d1_c0 * sp[18];
    sp[139] = sp[137] + sp[138];
    sp[140] = w2_d2_c0 * sp[21];
    sp[141] = sp[139] + sp[140];
    sp[142] = w0_d0_c0 * sp[14];
    sp[143] = w0_d1_c0 * sp[18];
    sp[144] = sp[142] + sp[143];
    sp[145] = w0_d2_c0 * sp[21];
    sp[146] = sp[144] + sp[145];
    sp[147] = w1_d0_c0 * sp[14];
    sp[148] = w1_d1_c0 * sp[18];
    sp[149] = sp[147] + sp[148];
    sp[150] = w1_d2_c0 * sp[21];
    sp[151] = sp[149] + sp[150];
    sp[152] = sp[146] + sp[151];
    sp[153] = sp[152] * w[3][0];
    sp[154] = sp[141] + 0.5 * sp[153];
    sp[155] = w2_d0_c1 * sp[40];
    sp[156] = w2_d1_c1 * sp[45];
    sp[157] = sp[155] + sp[156];
    sp[158] = w2_d2_c1 * sp[51];
    sp[159] = sp[157] + sp[158];
    sp[160] = w0_d0_c1 * sp[40];
    sp[161] = w0_d1_c1 * sp[45];
    sp[162] = sp[160] + sp[161];
    sp[163] = w0_d2_c1 * sp[51];
    sp[164] = sp[162] + sp[163];
    sp[165] = w1_d0_c1 * sp[40];
    sp[166] = w1_d1_c1 * sp[45];
    sp[167] = sp[165] + sp[166];
    sp[168] = w1_d2_c1 * sp[51];
    sp[169] = sp[167] + sp[168];
    sp[170] = sp[164] + sp[169];
    sp[171] = sp[170] * w[3][0];
    sp[172] = sp[159] + 0.5 * sp[171];
    sp[173] = (1 + sp[134]) * (1 + sp[172]);
    sp[174] = w2_d0_c1 * sp[71];
    sp[175] = w2_d1_c1 * sp[76];
    sp[176] = sp[174] + sp[175];
    sp[177] = w2_d2_c1 * sp[82];
    sp[178] = sp[176] + sp[177];
    sp[179] = w0_d0_c1 * sp[71];
    sp[180] = w0_d1_c1 * sp[76];
    sp[181] = sp[179] + sp[180];
    sp[182] = w0_d2_c1 * sp[82];
    sp[183] = sp[181] + sp[182];
    sp[184] = w1_d0_c1 * sp[71];
    sp[185] = w1_d1_c1 * sp[76];
    sp[186] = sp[184] + sp[185];
    sp[187] = w1_d2_c1 * sp[82];
    sp[188] = sp[186] + sp[187];
    sp[189] = sp[183] + sp[188];
    sp[190] = sp[189] * w[3][0];
    sp[191] = sp[178] + 0.5 * sp[190];
    sp[192] = sp[191] * sp[115];
    sp[193] = sp[173] + -1 * sp[192];
    sp[194] = (1 + sp[154]) * sp[193];
    sp[195] = w2_d0_c2 * sp[14];
    sp[196] = w2_d1_c2 * sp[18];
    sp[197] = sp[195] + sp[196];
    sp[198] = w2_d2_c2 * sp[21];
    sp[199] = sp[197] + sp[198];
    sp[200] = w0_d0_c2 * sp[14];
    sp[201] = w0_d1_c2 * sp[18];
    sp[202] = sp[200] + sp[201];
    sp[203] = w0_d2_c2 * sp[21];
    sp[204] = sp[202] + sp[203];
    sp[205] = w1_d0_c2 * sp[14];
    sp[206] = w1_d1_c2 * sp[18];
    sp[207] = sp[205] + sp[206];
    sp[208] = w1_d2_c2 * sp[21];
    sp[209] = sp[207] + sp[208];
    sp[210] = sp[204] + sp[209];
    sp[211] = sp[210] * w[3][0];
    sp[212] = sp[199] + 0.5 * sp[211];
    sp[213] = sp[191] * sp[212];
    sp[214] = (1 + sp[134]) * sp[36];
    sp[215] = sp[213] + -1 * sp[214];
    sp[216] = sp[215] * sp[66];
    sp[217] = sp[194] + sp[216];
    sp[218] = sp[36] * sp[115];
    sp[219] = (1 + sp[172]) * sp[212];
    sp[220] = sp[218] + -1 * sp[219];
    sp[221] = sp[220] * sp[97];
    sp[222] = sp[217] + sp[221];
    sp[223] = sp[136] / sp[222];
    sp[224] = sp[154] + sp[154];
    sp[225] = sp[193] / sp[222];
    sp[226] = sp[97] + sp[212];
    sp[227] = sp[191] * sp[66];
    sp[228] = (1 + sp[172]) * sp[97];
    sp[229] = sp[227] + -1 * sp[228];
    sp[230] = sp[229] / sp[222];
    sp[231] = sp[154] + sp[172];
    sp[232] = sp[231] + sp[134];
    sp[233] = sp[172] + sp[172];
    sp[234] = sp[191] + sp[115];
    sp[235] = sp[134] + sp[134];
    sp[236] = sp[36] * (-1 * (1 + sp[134]));
    sp[237] = sp[213] + sp[236];
    sp[238] = sp[237] / sp[222];
    sp[239] = (1 + sp[134]) * (1 + sp[154]);
    sp[240] = sp[212] * (-1 * sp[97]);
    sp[241] = sp[239] + sp[240];
    sp[242] = sp[241] / sp[222];
    sp[243] = sp[97] * sp[36];
    sp[244] = (1 + sp[154]) * sp[191];
    sp[245] = sp[243] + -1 * sp[244];
    sp[246] = sp[245] / sp[222];
    sp[247] = sp[220] / sp[222];
    sp[248] = sp[212] * sp[66];
    sp[249] = (1 + sp[154]) * sp[115];
    sp[250] = sp[248] + -1 * sp[249];
    sp[251] = sp[250] / sp[222];
    sp[252] = (1 + sp[154]) * (1 + sp[172]);
    sp[253] = sp[36] * sp[66];
    sp[254] = sp[252] + -1 * sp[253];
    sp[255] = sp[254] / sp[222];
    sp[256] = std::abs(sp[13]);
    alignas(32) double BF0[2] = {};
    alignas(32) double BF1[4] = {};
    alignas(32) double BF2[2] = {};
    alignas(32) double BF3[2] = {};
    alignas(32) double BF4[2] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[2] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[4] = {};
    alignas(32) double BF10[2] = {};
    alignas(32) double BF11[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w5 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w5 += w[5][ic] * FE23_C0_Q4[0][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c0 += w[0][ic] * FE23_C0_Q4[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c0 += w[1][ic] * FE23_C0_Q4[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c1 += w[0][ic + 4] * FE23_C0_Q4[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c1 += w[1][ic + 4] * FE23_C0_Q4[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c2 += w[0][ic + 8] * FE23_C0_Q4[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c2 += w[1][ic + 8] * FE23_C0_Q4[0][iq][ic];
        alignas(32) double sv4[124];
        sv4[0] = 0.5 * sp[67] * (2 * w5);
        sv4[1] = sv4[0] * sp[223];
        sv4[2] = 0.5 * sp[224] * (2 * w5);
        sv4[3] = sv4[2] * sp[225];
        sv4[4] = sv4[1] + sv4[3];
        sv4[5] = 0.5 * sp[226] * (2 * w5);
        sv4[6] = sv4[5] * sp[230];
        sv4[7] = sv4[4] + sv4[6];
        sv4[8] = 2 * w5 * w[6][0];
        sv4[9] = sv4[8] / (1 + -1 * (2 * w[6][0]));
        sv4[10] = sp[222] * sv4[9];
        sv4[11] = sp[232] * sv4[10];
        sv4[12] = sv4[7] + sv4[11];
        sv4[13] = sv4[12] * sp[14];
        sv4[14] = sv4[12] * sp[18];
        sv4[15] = sv4[12] * sp[21];
        sv4[16] = 0.5 * sp[233] * (2 * w5);
        sv4[17] = sv4[16] * sp[223];
        sv4[18] = sv4[0] * sp[225];
        sv4[19] = sv4[17] + sv4[18];
        sv4[20] = 0.5 * sp[234] * (2 * w5);
        sv4[21] = sv4[20] * sp[230];
        sv4[22] = sv4[19] + sv4[21];
        sv4[23] = sv4[22] * sp[14];
        sv4[24] = sv4[22] * sp[18];
        sv4[25] = sv4[22] * sp[21];
        sv4[26] = sv4[20] * sp[223];
        sv4[27] = sv4[5] * sp[225];
        sv4[28] = sv4[26] + sv4[27];
        sv4[29] = 0.5 * sp[235] * (2 * w5);
        sv4[30] = sv4[29] * sp[230];
        sv4[31] = sv4[28] + sv4[30];
        sv4[32] = sv4[31] * sp[14];
        sv4[33] = sv4[31] * sp[18];
        sv4[34] = sv4[31] * sp[21];
        sv4[35] = sv4[0] * sp[238];
        sv4[36] = sv4[16] * sp[242];
        sv4[37] = sv4[35] + sv4[36];
        sv4[38] = sv4[20] * sp[246];
        sv4[39] = sv4[37] + sv4[38];
        sv4[40] = sv4[39] + sv4[11];
        sv4[41] = sv4[40] * sp[40];
        sv4[42] = sv4[40] * sp[45];
        sv4[43] = sv4[40] * sp[51];
        sv4[44] = sv4[2] * sp[238];
        sv4[45] = sv4[0] * sp[242];
        sv4[46] = sv4[44] + sv4[45];
        sv4[47] = sv4[5] * sp[246];
        sv4[48] = sv4[46] + sv4[47];
        sv4[49] = sv4[48] * sp[40];
        sv4[50] = sv4[48] * sp[45];
        sv4[51] = sv4[48] * sp[51];
        sv4[52] = sv4[5] * sp[238];
        sv4[53] = sv4[20] * sp[242];
        sv4[54] = sv4[52] + sv4[53];
        sv4[55] = sv4[29] * sp[246];
        sv4[56] = sv4[54] + sv4[55];
        sv4[57] = sv4[56] * sp[40];
        sv4[58] = sv4[56] * sp[45];
        sv4[59] = sv4[56] * sp[51];
        sv4[60] = sv4[49] + sv4[13];
        sv4[61] = sv4[50] + sv4[14];
        sv4[62] = sv4[15] + sv4[51];
        sv4[63] = sv4[41] + sv4[23];
        sv4[64] = sv4[42] + sv4[24];
        sv4[65] = sv4[25] + sv4[43];
        sv4[66] = sv4[57] + sv4[32];
        sv4[67] = sv4[58] + sv4[33];
        sv4[68] = sv4[34] + sv4[59];
        sv4[69] = sv4[2] * sp[247];
        sv4[70] = sv4[0] * sp[251];
        sv4[71] = sv4[69] + sv4[70];
        sv4[72] = sv4[5] * sp[255];
        sv4[73] = sv4[71] + sv4[72];
        sv4[74] = sv4[73] * sp[71];
        sv4[75] = sv4[73] * sp[76];
        sv4[76] = sv4[73] * sp[82];
        sv4[77] = sv4[0] * sp[247];
        sv4[78] = sv4[16] * sp[251];
        sv4[79] = sv4[77] + sv4[78];
        sv4[80] = sv4[20] * sp[255];
        sv4[81] = sv4[79] + sv4[80];
        sv4[82] = sv4[81] * sp[71];
        sv4[83] = sv4[81] * sp[76];
        sv4[84] = sv4[81] * sp[82];
        sv4[85] = sv4[5] * sp[247];
        sv4[86] = sv4[20] * sp[251];
        sv4[87] = sv4[85] + sv4[86];
        sv4[88] = sv4[29] * sp[255];
        sv4[89] = sv4[87] + sv4[88];
        sv4[90] = sv4[89] + sv4[11];
        sv4[91] = sv4[90] * sp[71];
        sv4[92] = sv4[90] * sp[76];
        sv4[93] = sv4[90] * sp[82];
        sv4[94] = sv4[60] + sv4[74];
        sv4[95] = sv4[61] + sv4[75];
        sv4[96] = sv4[62] + sv4[76];
        sv4[97] = sv4[63] + sv4[82];
        sv4[98] = sv4[64] + sv4[83];
        sv4[99] = sv4[65] + sv4[84];
        sv4[100] = sv4[66] + sv4[91];
        sv4[101] = sv4[67] + sv4[92];
        sv4[102] = sv4[68] + sv4[93];
        sv4[103] = w0_c0 + -1 * w1_c0;
        sv4[104] = sv4[103] / w[3][0];
        sv4[105] = w0_c1 + -1 * w1_c1;
        sv4[106] = sv4[105] / w[3][0];
        sv4[107] = w0_c2 + -1 * w1_c2;
        sv4[108] = sv4[107] / w[3][0];
        sv4[109] = sv4[104] * w[4][0];
        sv4[110] = sv4[106] * w[4][0];
        sv4[111] = sv4[108] * w[4][0];
        sv4[112] = sv4[94] * sp[256];
        sv4[113] = sv4[95] * sp[256];
        sv4[114] = sv4[96] * sp[256];
        sv4[115] = sv4[97] * sp[256];
        sv4[116] = sv4[98] * sp[256];
        sv4[117] = sv4[99] * sp[256];
        sv4[118] = sv4[100] * sp[256];
        sv4[119] = sv4[101] * sp[256];
        sv4[120] = sv4[102] * sp[256];
        sv4[121] = sv4[109] * sp[256];
        sv4[122] = sv4[110] * sp[256];
        sv4[123] = sv4[111] * sp[256];
        const double fw0 = sv4[112] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF0[i] += fw0 * FE23_C0_D001_Q4[0][0][i];
        const double fw1 = sv4[121] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF1[i] += fw1 * FE23_C0_Q4[0][iq][i];
        const double fw2 = sv4[113] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF2[i] += fw2 * FE23_C0_D001_Q4[0][0][i];
        const double fw3 = sv4[114] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF3[i] += fw3 * FE23_C0_D001_Q4[0][0][i];
        const double fw4 = sv4[115] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF4[i] += fw4 * FE23_C0_D001_Q4[0][0][i];
        const double fw5 = sv4[122] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE23_C0_Q4[0][iq][i];
        const double fw6 = sv4[116] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE23_C0_D001_Q4[0][0][i];
        const double fw7 = sv4[117] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF7[i] += fw7 * FE23_C0_D001_Q4[0][0][i];
        const double fw8 = sv4[118] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE23_C0_D001_Q4[0][0][i];
        const double fw9 = sv4[123] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF9[i] += fw9 * FE23_C0_Q4[0][iq][i];
        const double fw10 = sv4[119] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF10[i] += fw10 * FE23_C0_D001_Q4[0][0][i];
        const double fw11 = sv4[120] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF11[i] += fw11 * FE23_C0_D001_Q4[0][0][i];
    }
    std::fill(&A[0], &A[20], 0.0);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 4; ++i)
        A[i] += BF1[i];
    for (int i = 0; i < 2; ++i)
        A[DM0[i]] += BF2[i];
    for (int i = 0; i < 2; ++i)
        A[DM1[i]] += BF3[i];
    for (int i = 0; i < 2; ++i)
        A[i + 4] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[i + 4] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[DM2[i]] += BF6[i];
    for (int i = 0; i < 2; ++i)
        A[DM3[i]] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[i + 8] += BF8[i];
    for (int i = 0; i < 4; ++i)
        A[i + 8] += BF9[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF10[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF11[i];
  }

};


class linearelastic3dp1p1_cell_integral_1_210: public ufc::cell_integral
{
public:

  linearelastic3dp1p1_cell_integral_1_210() : ufc::cell_integral()
  {

  }

  ~linearelastic3dp1p1_cell_integral_1_210() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 2
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           2
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.04166666666666666, 0.04166666666666666, 0.04166666666666666, 0.04166666666666666 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE32_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE32_C0_Q4[1][4][4] =
        { { { 0.1381966011250091, 0.585410196624969, 0.138196601125011, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.585410196624969, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.138196601125011, 0.585410196624969 },
            { 0.5854101966249672, 0.1381966011250109, 0.138196601125011, 0.138196601125011 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE32_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE32_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE32_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE32_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE32_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE32_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE32_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE32_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE32_C0_D001_Q4[0][0][1];
    double w2_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c0 += w[2][ic] * FE32_C0_D001_Q4[0][0][ic];
    const double w2_d1_c0 = w[2][0] * FE32_C0_D001_Q4[0][0][0] + w[2][2] * FE32_C0_D001_Q4[0][0][1];
    const double w2_d2_c0 = w[2][0] * FE32_C0_D001_Q4[0][0][0] + w[2][3] * FE32_C0_D001_Q4[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE32_C0_D001_Q4[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE32_C0_D001_Q4[0][0][0] + w[0][2] * FE32_C0_D001_Q4[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE32_C0_D001_Q4[0][0][0] + w[0][3] * FE32_C0_D001_Q4[0][0][1];
    double w1_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c0 += w[1][ic] * FE32_C0_D001_Q4[0][0][ic];
    const double w1_d1_c0 = w[1][0] * FE32_C0_D001_Q4[0][0][0] + w[1][2] * FE32_C0_D001_Q4[0][0][1];
    const double w1_d2_c0 = w[1][0] * FE32_C0_D001_Q4[0][0][0] + w[1][3] * FE32_C0_D001_Q4[0][0][1];
    double w2_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c2 += w[2][ic + 8] * FE32_C0_D001_Q4[0][0][ic];
    const double w2_d1_c2 = w[2][8] * FE32_C0_D001_Q4[0][0][0] + w[2][10] * FE32_C0_D001_Q4[0][0][1];
    const double w2_d2_c2 = w[2][8] * FE32_C0_D001_Q4[0][0][0] + w[2][11] * FE32_C0_D001_Q4[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE32_C0_D001_Q4[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE32_C0_D001_Q4[0][0][0] + w[0][10] * FE32_C0_D001_Q4[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE32_C0_D001_Q4[0][0][0] + w[0][11] * FE32_C0_D001_Q4[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 8] * FE32_C0_D001_Q4[0][0][ic];
    const double w1_d1_c2 = w[1][8] * FE32_C0_D001_Q4[0][0][0] + w[1][10] * FE32_C0_D001_Q4[0][0][1];
    const double w1_d2_c2 = w[1][8] * FE32_C0_D001_Q4[0][0][0] + w[1][11] * FE32_C0_D001_Q4[0][0][1];
    double w2_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c1 += w[2][ic + 4] * FE32_C0_D001_Q4[0][0][ic];
    const double w2_d1_c1 = w[2][4] * FE32_C0_D001_Q4[0][0][0] + w[2][6] * FE32_C0_D001_Q4[0][0][1];
    const double w2_d2_c1 = w[2][4] * FE32_C0_D001_Q4[0][0][0] + w[2][7] * FE32_C0_D001_Q4[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE32_C0_D001_Q4[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE32_C0_D001_Q4[0][0][0] + w[0][6] * FE32_C0_D001_Q4[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE32_C0_D001_Q4[0][0][0] + w[0][7] * FE32_C0_D001_Q4[0][0][1];
    double w1_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c1 += w[1][ic + 4] * FE32_C0_D001_Q4[0][0][ic];
    const double w1_d1_c1 = w[1][4] * FE32_C0_D001_Q4[0][0][0] + w[1][6] * FE32_C0_D001_Q4[0][0][1];
    const double w1_d2_c1 = w[1][4] * FE32_C0_D001_Q4[0][0][0] + w[1][7] * FE32_C0_D001_Q4[0][0][1];
    alignas(32) double sp[670];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = sp[14] * w[3][0];
    sp[20] = sp[17] * w[3][0];
    sp[21] = sp[18] * w[3][0];
    sp[22] = J_c2 * J_c7;
    sp[23] = J_c8 * (-1 * J_c1);
    sp[24] = sp[22] + sp[23];
    sp[25] = sp[24] / sp[13];
    sp[26] = J_c0 * J_c8;
    sp[27] = J_c6 * (-1 * J_c2);
    sp[28] = sp[26] + sp[27];
    sp[29] = sp[28] / sp[13];
    sp[30] = J_c1 * J_c6;
    sp[31] = J_c0 * J_c7;
    sp[32] = sp[30] + -1 * sp[31];
    sp[33] = sp[32] / sp[13];
    sp[34] = sp[25] * w[3][0];
    sp[35] = sp[29] * w[3][0];
    sp[36] = sp[33] * w[3][0];
    sp[37] = J_c1 * J_c5;
    sp[38] = J_c2 * J_c4;
    sp[39] = sp[37] + -1 * sp[38];
    sp[40] = sp[39] / sp[13];
    sp[41] = w2_d0_c0 * sp[40];
    sp[42] = J_c2 * J_c3;
    sp[43] = J_c0 * J_c5;
    sp[44] = sp[42] + -1 * sp[43];
    sp[45] = sp[44] / sp[13];
    sp[46] = w2_d1_c0 * sp[45];
    sp[47] = sp[41] + sp[46];
    sp[48] = J_c0 * J_c4;
    sp[49] = J_c1 * J_c3;
    sp[50] = sp[48] + -1 * sp[49];
    sp[51] = sp[50] / sp[13];
    sp[52] = w2_d2_c0 * sp[51];
    sp[53] = sp[47] + sp[52];
    sp[54] = w0_d0_c0 * sp[40];
    sp[55] = w0_d1_c0 * sp[45];
    sp[56] = sp[54] + sp[55];
    sp[57] = w0_d2_c0 * sp[51];
    sp[58] = sp[56] + sp[57];
    sp[59] = w1_d0_c0 * sp[40];
    sp[60] = w1_d1_c0 * sp[45];
    sp[61] = sp[59] + sp[60];
    sp[62] = w1_d2_c0 * sp[51];
    sp[63] = sp[61] + sp[62];
    sp[64] = sp[58] + sp[63];
    sp[65] = sp[64] * w[3][0];
    sp[66] = sp[53] + 0.5 * sp[65];
    sp[67] = w2_d0_c2 * sp[25];
    sp[68] = w2_d1_c2 * sp[29];
    sp[69] = sp[67] + sp[68];
    sp[70] = w2_d2_c2 * sp[33];
    sp[71] = sp[69] + sp[70];
    sp[72] = w0_d0_c2 * sp[25];
    sp[73] = w0_d1_c2 * sp[29];
    sp[74] = sp[72] + sp[73];
    sp[75] = w0_d2_c2 * sp[33];
    sp[76] = sp[74] + sp[75];
    sp[77] = w1_d0_c2 * sp[25];
    sp[78] = w1_d1_c2 * sp[29];
    sp[79] = sp[77] + sp[78];
    sp[80] = w1_d2_c2 * sp[33];
    sp[81] = sp[79] + sp[80];
    sp[82] = sp[76] + sp[81];
    sp[83] = sp[82] * w[3][0];
    sp[84] = sp[71] + 0.5 * sp[83];
    sp[85] = sp[66] * sp[84];
    sp[86] = w2_d0_c2 * sp[40];
    sp[87] = w2_d1_c2 * sp[45];
    sp[88] = sp[86] + sp[87];
    sp[89] = w2_d2_c2 * sp[51];
    sp[90] = sp[88] + sp[89];
    sp[91] = w0_d0_c2 * sp[40];
    sp[92] = w0_d1_c2 * sp[45];
    sp[93] = sp[91] + sp[92];
    sp[94] = w0_d2_c2 * sp[51];
    sp[95] = sp[93] + sp[94];
    sp[96] = w1_d0_c2 * sp[40];
    sp[97] = w1_d1_c2 * sp[45];
    sp[98] = sp[96] + sp[97];
    sp[99] = w1_d2_c2 * sp[51];
    sp[100] = sp[98] + sp[99];
    sp[101] = sp[95] + sp[100];
    sp[102] = sp[101] * w[3][0];
    sp[103] = sp[90] + 0.5 * sp[102];
    sp[104] = w2_d0_c0 * sp[25];
    sp[105] = w2_d1_c0 * sp[29];
    sp[106] = sp[104] + sp[105];
    sp[107] = w2_d2_c0 * sp[33];
    sp[108] = sp[106] + sp[107];
    sp[109] = w0_d0_c0 * sp[25];
    sp[110] = w0_d1_c0 * sp[29];
    sp[111] = sp[109] + sp[110];
    sp[112] = w0_d2_c0 * sp[33];
    sp[113] = sp[111] + sp[112];
    sp[114] = w1_d0_c0 * sp[25];
    sp[115] = w1_d1_c0 * sp[29];
    sp[116] = sp[114] + sp[115];
    sp[117] = w1_d2_c0 * sp[33];
    sp[118] = sp[116] + sp[117];
    sp[119] = sp[113] + sp[118];
    sp[120] = sp[119] * w[3][0];
    sp[121] = sp[108] + 0.5 * sp[120];
    sp[122] = (1 + sp[103]) * (-1 * sp[121]);
    sp[123] = sp[85] + sp[122];
    sp[124] = w2_d0_c0 * sp[14];
    sp[125] = w2_d1_c0 * sp[17];
    sp[126] = sp[124] + sp[125];
    sp[127] = w2_d2_c0 * sp[18];
    sp[128] = sp[126] + sp[127];
    sp[129] = w0_d0_c0 * sp[14];
    sp[130] = w0_d1_c0 * sp[17];
    sp[131] = sp[129] + sp[130];
    sp[132] = w0_d2_c0 * sp[18];
    sp[133] = sp[131] + sp[132];
    sp[134] = w1_d0_c0 * sp[14];
    sp[135] = w1_d1_c0 * sp[17];
    sp[136] = sp[134] + sp[135];
    sp[137] = w1_d2_c0 * sp[18];
    sp[138] = sp[136] + sp[137];
    sp[139] = sp[133] + sp[138];
    sp[140] = sp[139] * w[3][0];
    sp[141] = sp[128] + 0.5 * sp[140];
    sp[142] = w2_d0_c1 * sp[25];
    sp[143] = w2_d1_c1 * sp[29];
    sp[144] = sp[142] + sp[143];
    sp[145] = w2_d2_c1 * sp[33];
    sp[146] = sp[144] + sp[145];
    sp[147] = w0_d0_c1 * sp[25];
    sp[148] = w0_d1_c1 * sp[29];
    sp[149] = sp[147] + sp[148];
    sp[150] = w0_d2_c1 * sp[33];
    sp[151] = sp[149] + sp[150];
    sp[152] = w1_d0_c1 * sp[25];
    sp[153] = w1_d1_c1 * sp[29];
    sp[154] = sp[152] + sp[153];
    sp[155] = w1_d2_c1 * sp[33];
    sp[156] = sp[154] + sp[155];
    sp[157] = sp[151] + sp[156];
    sp[158] = sp[157] * w[3][0];
    sp[159] = sp[146] + 0.5 * sp[158];
    sp[160] = (1 + sp[103]) * (1 + sp[159]);
    sp[161] = w2_d0_c1 * sp[40];
    sp[162] = w2_d1_c1 * sp[45];
    sp[163] = sp[161] + sp[162];
    sp[164] = w2_d2_c1 * sp[51];
    sp[165] = sp[163] + sp[164];
    sp[166] = w0_d0_c1 * sp[40];
    sp[167] = w0_d1_c1 * sp[45];
    sp[168] = sp[166] + sp[167];
    sp[169] = w0_d2_c1 * sp[51];
    sp[170] = sp[168] + sp[169];
    sp[171] = w1_d0_c1 * sp[40];
    sp[172] = w1_d1_c1 * sp[45];
    sp[173] = sp[171] + sp[172];
    sp[174] = w1_d2_c1 * sp[51];
    sp[175] = sp[173] + sp[174];
    sp[176] = sp[170] + sp[175];
    sp[177] = sp[176] * w[3][0];
    sp[178] = sp[165] + 0.5 * sp[177];
    sp[179] = sp[178] * sp[84];
    sp[180] = sp[160] + -1 * sp[179];
    sp[181] = (1 + sp[141]) * sp[180];
    sp[182] = w2_d0_c2 * sp[14];
    sp[183] = w2_d1_c2 * sp[17];
    sp[184] = sp[182] + sp[183];
    sp[185] = w2_d2_c2 * sp[18];
    sp[186] = sp[184] + sp[185];
    sp[187] = w0_d0_c2 * sp[14];
    sp[188] = w0_d1_c2 * sp[17];
    sp[189] = sp[187] + sp[188];
    sp[190] = w0_d2_c2 * sp[18];
    sp[191] = sp[189] + sp[190];
    sp[192] = w1_d0_c2 * sp[14];
    sp[193] = w1_d1_c2 * sp[17];
    sp[194] = sp[192] + sp[193];
    sp[195] = w1_d2_c2 * sp[18];
    sp[196] = sp[194] + sp[195];
    sp[197] = sp[191] + sp[196];
    sp[198] = sp[197] * w[3][0];
    sp[199] = sp[186] + 0.5 * sp[198];
    sp[200] = sp[178] * sp[199];
    sp[201] = w2_d0_c1 * sp[14];
    sp[202] = w2_d1_c1 * sp[17];
    sp[203] = sp[201] + sp[202];
    sp[204] = w2_d2_c1 * sp[18];
    sp[205] = sp[203] + sp[204];
    sp[206] = w0_d0_c1 * sp[14];
    sp[207] = w0_d1_c1 * sp[17];
    sp[208] = sp[206] + sp[207];
    sp[209] = w0_d2_c1 * sp[18];
    sp[210] = sp[208] + sp[209];
    sp[211] = w1_d0_c1 * sp[14];
    sp[212] = w1_d1_c1 * sp[17];
    sp[213] = sp[211] + sp[212];
    sp[214] = w1_d2_c1 * sp[18];
    sp[215] = sp[213] + sp[214];
    sp[216] = sp[210] + sp[215];
    sp[217] = sp[216] * w[3][0];
    sp[218] = sp[205] + 0.5 * sp[217];
    sp[219] = (1 + sp[103]) * sp[218];
    sp[220] = sp[200] + -1 * sp[219];
    sp[221] = sp[220] * sp[121];
    sp[222] = sp[181] + sp[221];
    sp[223] = sp[218] * sp[84];
    sp[224] = (1 + sp[159]) * sp[199];
    sp[225] = sp[223] + -1 * sp[224];
    sp[226] = sp[225] * sp[66];
    sp[227] = sp[222] + sp[226];
    sp[228] = sp[123] / sp[227];
    sp[229] = sp[218] + sp[121];
    sp[230] = (1 + sp[103]) * (-1 * (0.5 * sp[34]));
    sp[231] = (1 + sp[103]) * (-1 * (0.5 * sp[35]));
    sp[232] = (1 + sp[103]) * (-1 * (0.5 * sp[36]));
    sp[233] = sp[40] * w[3][0];
    sp[234] = sp[45] * w[3][0];
    sp[235] = sp[51] * w[3][0];
    sp[236] = -1 * sp[121] * (0.5 * sp[233]);
    sp[237] = -1 * sp[121] * (0.5 * sp[234]);
    sp[238] = -1 * sp[121] * (0.5 * sp[235]);
    sp[239] = sp[84] * (0.5 * sp[233]);
    sp[240] = sp[84] * (0.5 * sp[234]);
    sp[241] = sp[84] * (0.5 * sp[235]);
    sp[242] = sp[66] * (0.5 * sp[34]);
    sp[243] = sp[66] * (0.5 * sp[35]);
    sp[244] = sp[66] * (0.5 * sp[36]);
    sp[245] = sp[230] + sp[239];
    sp[246] = sp[231] + sp[240];
    sp[247] = sp[232] + sp[241];
    sp[248] = sp[242] + sp[236];
    sp[249] = sp[243] + sp[237];
    sp[250] = sp[238] + sp[244];
    sp[251] = (1 + sp[159]) * (0.5 * sp[233]);
    sp[252] = (1 + sp[159]) * (0.5 * sp[234]);
    sp[253] = (1 + sp[159]) * (0.5 * sp[235]);
    sp[254] = (1 + sp[103]) * (0.5 * sp[34]);
    sp[255] = (1 + sp[103]) * (0.5 * sp[35]);
    sp[256] = (1 + sp[103]) * (0.5 * sp[36]);
    sp[257] = sp[178] * (0.5 * sp[34]);
    sp[258] = sp[178] * (0.5 * sp[35]);
    sp[259] = sp[178] * (0.5 * sp[36]);
    sp[260] = -1 * sp[239] + sp[254];
    sp[261] = -1 * sp[240] + sp[255];
    sp[262] = -1 * sp[241] + sp[256];
    sp[263] = -1 * sp[257] + sp[251];
    sp[264] = -1 * sp[258] + sp[252];
    sp[265] = -1 * sp[259] + sp[253];
    sp[266] = (1 + sp[141]) * sp[260];
    sp[267] = (1 + sp[141]) * sp[261];
    sp[268] = (1 + sp[141]) * sp[262];
    sp[269] = (1 + sp[141]) * sp[263];
    sp[270] = (1 + sp[141]) * sp[264];
    sp[271] = (1 + sp[141]) * sp[265];
    sp[272] = sp[180] * (0.5 * sp[19]);
    sp[273] = sp[180] * (0.5 * sp[20]);
    sp[274] = sp[180] * (0.5 * sp[21]);
    sp[275] = sp[199] * (0.5 * sp[233]);
    sp[276] = sp[199] * (0.5 * sp[234]);
    sp[277] = sp[199] * (0.5 * sp[235]);
    sp[278] = sp[178] * (0.5 * sp[19]);
    sp[279] = sp[178] * (0.5 * sp[20]);
    sp[280] = sp[178] * (0.5 * sp[21]);
    sp[281] = sp[218] * (0.5 * sp[233]);
    sp[282] = sp[218] * (0.5 * sp[234]);
    sp[283] = sp[218] * (0.5 * sp[235]);
    sp[284] = (1 + sp[103]) * (0.5 * sp[19]);
    sp[285] = (1 + sp[103]) * (0.5 * sp[20]);
    sp[286] = (1 + sp[103]) * (0.5 * sp[21]);
    sp[287] = -1 * sp[284] + sp[275];
    sp[288] = -1 * sp[285] + sp[276];
    sp[289] = -1 * sp[286] + sp[277];
    sp[290] = -1 * sp[281] + sp[278];
    sp[291] = -1 * sp[282] + sp[279];
    sp[292] = -1 * sp[283] + sp[280];
    sp[293] = sp[287] * sp[121];
    sp[294] = sp[288] * sp[121];
    sp[295] = sp[289] * sp[121];
    sp[296] = sp[290] * sp[121];
    sp[297] = sp[291] * sp[121];
    sp[298] = sp[292] * sp[121];
    sp[299] = sp[220] * (0.5 * sp[34]);
    sp[300] = sp[220] * (0.5 * sp[35]);
    sp[301] = sp[220] * (0.5 * sp[36]);
    sp[302] = sp[266] + sp[293];
    sp[303] = sp[267] + sp[294];
    sp[304] = sp[268] + sp[295];
    sp[305] = sp[299] + sp[272];
    sp[306] = sp[300] + sp[273];
    sp[307] = sp[274] + sp[301];
    sp[308] = sp[269] + sp[296];
    sp[309] = sp[270] + sp[297];
    sp[310] = sp[271] + sp[298];
    sp[311] = sp[84] * (0.5 * sp[19]);
    sp[312] = sp[84] * (0.5 * sp[20]);
    sp[313] = sp[84] * (0.5 * sp[21]);
    sp[314] = sp[218] * (0.5 * sp[34]);
    sp[315] = sp[218] * (0.5 * sp[35]);
    sp[316] = sp[218] * (0.5 * sp[36]);
    sp[317] = (1 + sp[159]) * (0.5 * sp[19]);
    sp[318] = (1 + sp[159]) * (0.5 * sp[20]);
    sp[319] = (1 + sp[159]) * (0.5 * sp[21]);
    sp[320] = sp[199] * (0.5 * sp[34]);
    sp[321] = sp[199] * (0.5 * sp[35]);
    sp[322] = sp[199] * (0.5 * sp[36]);
    sp[323] = -1 * sp[320] + sp[311];
    sp[324] = -1 * sp[321] + sp[312];
    sp[325] = -1 * sp[322] + sp[313];
    sp[326] = -1 * sp[317] + sp[314];
    sp[327] = -1 * sp[318] + sp[315];
    sp[328] = -1 * sp[319] + sp[316];
    sp[329] = sp[323] * sp[66];
    sp[330] = sp[324] * sp[66];
    sp[331] = sp[325] * sp[66];
    sp[332] = sp[326] * sp[66];
    sp[333] = sp[327] * sp[66];
    sp[334] = sp[328] * sp[66];
    sp[335] = sp[225] * (0.5 * sp[233]);
    sp[336] = sp[225] * (0.5 * sp[234]);
    sp[337] = sp[225] * (0.5 * sp[235]);
    sp[338] = sp[302] + sp[329];
    sp[339] = sp[303] + sp[330];
    sp[340] = sp[304] + sp[331];
    sp[341] = sp[305] + sp[335];
    sp[342] = sp[306] + sp[336];
    sp[343] = sp[307] + sp[337];
    sp[344] = sp[308] + sp[332];
    sp[345] = sp[309] + sp[333];
    sp[346] = sp[310] + sp[334];
    sp[347] = sp[338] * sp[228];
    sp[348] = sp[339] * sp[228];
    sp[349] = sp[340] * sp[228];
    sp[350] = sp[341] * sp[228];
    sp[351] = sp[342] * sp[228];
    sp[352] = sp[343] * sp[228];
    sp[353] = sp[344] * sp[228];
    sp[354] = sp[345] * sp[228];
    sp[355] = sp[346] * sp[228];
    sp[356] = sp[245] + -1 * sp[350];
    sp[357] = sp[246] + -1 * sp[351];
    sp[358] = sp[247] + -1 * sp[352];
    sp[359] = sp[248] + -1 * sp[353];
    sp[360] = sp[249] + -1 * sp[354];
    sp[361] = sp[250] + -1 * sp[355];
    sp[362] = -1 * sp[347] / sp[227];
    sp[363] = -1 * sp[348] / sp[227];
    sp[364] = -1 * sp[349] / sp[227];
    sp[365] = sp[356] / sp[227];
    sp[366] = sp[357] / sp[227];
    sp[367] = sp[358] / sp[227];
    sp[368] = sp[359] / sp[227];
    sp[369] = sp[360] / sp[227];
    sp[370] = sp[361] / sp[227];
    sp[371] = 0.5 * sp[19] + 0.5 * sp[19];
    sp[372] = 0.5 * sp[20] + 0.5 * sp[20];
    sp[373] = 0.5 * sp[21] + 0.5 * sp[21];
    sp[374] = sp[180] / sp[227];
    sp[375] = sp[141] + sp[141];
    sp[376] = sp[338] * sp[374];
    sp[377] = sp[339] * sp[374];
    sp[378] = sp[340] * sp[374];
    sp[379] = sp[341] * sp[374];
    sp[380] = sp[342] * sp[374];
    sp[381] = sp[343] * sp[374];
    sp[382] = sp[344] * sp[374];
    sp[383] = sp[345] * sp[374];
    sp[384] = sp[346] * sp[374];
    sp[385] = sp[260] + -1 * sp[376];
    sp[386] = sp[261] + -1 * sp[377];
    sp[387] = sp[262] + -1 * sp[378];
    sp[388] = sp[263] + -1 * sp[382];
    sp[389] = sp[264] + -1 * sp[383];
    sp[390] = sp[265] + -1 * sp[384];
    sp[391] = sp[385] / sp[227];
    sp[392] = sp[386] / sp[227];
    sp[393] = sp[387] / sp[227];
    sp[394] = -1 * sp[379] / sp[227];
    sp[395] = -1 * sp[380] / sp[227];
    sp[396] = -1 * sp[381] / sp[227];
    sp[397] = sp[388] / sp[227];
    sp[398] = sp[389] / sp[227];
    sp[399] = sp[390] / sp[227];
    sp[400] = sp[178] * sp[121];
    sp[401] = (1 + sp[159]) * sp[66];
    sp[402] = sp[400] + -1 * sp[401];
    sp[403] = sp[402] / sp[227];
    sp[404] = sp[66] + sp[199];
    sp[405] = sp[121] * (0.5 * sp[233]);
    sp[406] = sp[121] * (0.5 * sp[234]);
    sp[407] = sp[121] * (0.5 * sp[235]);
    sp[408] = -1 * sp[242] + sp[405];
    sp[409] = -1 * sp[243] + sp[406];
    sp[410] = -1 * sp[244] + sp[407];
    sp[411] = -1 * sp[251] + sp[257];
    sp[412] = -1 * sp[252] + sp[258];
    sp[413] = -1 * sp[253] + sp[259];
    sp[414] = sp[338] * sp[403];
    sp[415] = sp[339] * sp[403];
    sp[416] = sp[340] * sp[403];
    sp[417] = sp[341] * sp[403];
    sp[418] = sp[342] * sp[403];
    sp[419] = sp[343] * sp[403];
    sp[420] = sp[344] * sp[403];
    sp[421] = sp[345] * sp[403];
    sp[422] = sp[346] * sp[403];
    sp[423] = sp[408] + -1 * sp[414];
    sp[424] = sp[409] + -1 * sp[415];
    sp[425] = sp[410] + -1 * sp[416];
    sp[426] = sp[411] + -1 * sp[417];
    sp[427] = sp[412] + -1 * sp[418];
    sp[428] = sp[413] + -1 * sp[419];
    sp[429] = sp[423] / sp[227];
    sp[430] = sp[424] / sp[227];
    sp[431] = sp[425] / sp[227];
    sp[432] = sp[426] / sp[227];
    sp[433] = sp[427] / sp[227];
    sp[434] = sp[428] / sp[227];
    sp[435] = -1 * sp[420] / sp[227];
    sp[436] = -1 * sp[421] / sp[227];
    sp[437] = -1 * sp[422] / sp[227];
    sp[438] = sp[141] + sp[159];
    sp[439] = sp[438] + sp[103];
    sp[440] = 0.5 * sp[34] + 0.5 * sp[34];
    sp[441] = 0.5 * sp[35] + 0.5 * sp[35];
    sp[442] = 0.5 * sp[36] + 0.5 * sp[36];
    sp[443] = sp[159] + sp[159];
    sp[444] = sp[178] + sp[84];
    sp[445] = 0.5 * sp[233] + 0.5 * sp[233];
    sp[446] = 0.5 * sp[234] + 0.5 * sp[234];
    sp[447] = 0.5 * sp[235] + 0.5 * sp[235];
    sp[448] = sp[103] + sp[103];
    sp[449] = sp[218] * (-1 * (1 + sp[103]));
    sp[450] = sp[200] + sp[449];
    sp[451] = sp[450] / sp[227];
    sp[452] = sp[218] * (-1 * (0.5 * sp[233]));
    sp[453] = sp[218] * (-1 * (0.5 * sp[234]));
    sp[454] = sp[218] * (-1 * (0.5 * sp[235]));
    sp[455] = -1 * (1 + sp[103]) * (0.5 * sp[19]);
    sp[456] = -1 * (1 + sp[103]) * (0.5 * sp[20]);
    sp[457] = -1 * (1 + sp[103]) * (0.5 * sp[21]);
    sp[458] = sp[275] + sp[455];
    sp[459] = sp[276] + sp[456];
    sp[460] = sp[277] + sp[457];
    sp[461] = sp[452] + sp[278];
    sp[462] = sp[453] + sp[279];
    sp[463] = sp[454] + sp[280];
    sp[464] = sp[338] * sp[451];
    sp[465] = sp[339] * sp[451];
    sp[466] = sp[340] * sp[451];
    sp[467] = sp[341] * sp[451];
    sp[468] = sp[342] * sp[451];
    sp[469] = sp[343] * sp[451];
    sp[470] = sp[344] * sp[451];
    sp[471] = sp[345] * sp[451];
    sp[472] = sp[346] * sp[451];
    sp[473] = sp[458] + -1 * sp[464];
    sp[474] = sp[459] + -1 * sp[465];
    sp[475] = sp[460] + -1 * sp[466];
    sp[476] = sp[461] + -1 * sp[470];
    sp[477] = sp[462] + -1 * sp[471];
    sp[478] = sp[463] + -1 * sp[472];
    sp[479] = sp[473] / sp[227];
    sp[480] = sp[474] / sp[227];
    sp[481] = sp[475] / sp[227];
    sp[482] = -1 * sp[467] / sp[227];
    sp[483] = -1 * sp[468] / sp[227];
    sp[484] = -1 * sp[469] / sp[227];
    sp[485] = sp[476] / sp[227];
    sp[486] = sp[477] / sp[227];
    sp[487] = sp[478] / sp[227];
    sp[488] = (1 + sp[103]) * (1 + sp[141]);
    sp[489] = sp[199] * (-1 * sp[66]);
    sp[490] = sp[488] + sp[489];
    sp[491] = sp[490] / sp[227];
    sp[492] = (1 + sp[141]) * (0.5 * sp[233]);
    sp[493] = (1 + sp[141]) * (0.5 * sp[234]);
    sp[494] = (1 + sp[141]) * (0.5 * sp[235]);
    sp[495] = sp[199] * (-1 * (0.5 * sp[233]));
    sp[496] = sp[199] * (-1 * (0.5 * sp[234]));
    sp[497] = sp[199] * (-1 * (0.5 * sp[235]));
    sp[498] = -1 * sp[66] * (0.5 * sp[19]);
    sp[499] = -1 * sp[66] * (0.5 * sp[20]);
    sp[500] = -1 * sp[66] * (0.5 * sp[21]);
    sp[501] = sp[495] + sp[284];
    sp[502] = sp[496] + sp[285];
    sp[503] = sp[497] + sp[286];
    sp[504] = sp[492] + sp[498];
    sp[505] = sp[493] + sp[499];
    sp[506] = sp[494] + sp[500];
    sp[507] = sp[338] * sp[491];
    sp[508] = sp[339] * sp[491];
    sp[509] = sp[340] * sp[491];
    sp[510] = sp[341] * sp[491];
    sp[511] = sp[342] * sp[491];
    sp[512] = sp[343] * sp[491];
    sp[513] = sp[344] * sp[491];
    sp[514] = sp[345] * sp[491];
    sp[515] = sp[346] * sp[491];
    sp[516] = sp[501] + -1 * sp[510];
    sp[517] = sp[502] + -1 * sp[511];
    sp[518] = sp[503] + -1 * sp[512];
    sp[519] = sp[504] + -1 * sp[513];
    sp[520] = sp[505] + -1 * sp[514];
    sp[521] = sp[506] + -1 * sp[515];
    sp[522] = -1 * sp[507] / sp[227];
    sp[523] = -1 * sp[508] / sp[227];
    sp[524] = -1 * sp[509] / sp[227];
    sp[525] = sp[516] / sp[227];
    sp[526] = sp[517] / sp[227];
    sp[527] = sp[518] / sp[227];
    sp[528] = sp[519] / sp[227];
    sp[529] = sp[520] / sp[227];
    sp[530] = sp[521] / sp[227];
    sp[531] = sp[66] * sp[218];
    sp[532] = (1 + sp[141]) * sp[178];
    sp[533] = sp[531] + -1 * sp[532];
    sp[534] = sp[533] / sp[227];
    sp[535] = sp[66] * (0.5 * sp[19]);
    sp[536] = sp[66] * (0.5 * sp[20]);
    sp[537] = sp[66] * (0.5 * sp[21]);
    sp[538] = -1 * sp[492] + sp[535];
    sp[539] = -1 * sp[493] + sp[536];
    sp[540] = -1 * sp[494] + sp[537];
    sp[541] = -1 * sp[278] + sp[281];
    sp[542] = -1 * sp[279] + sp[282];
    sp[543] = -1 * sp[280] + sp[283];
    sp[544] = sp[338] * sp[534];
    sp[545] = sp[339] * sp[534];
    sp[546] = sp[340] * sp[534];
    sp[547] = sp[341] * sp[534];
    sp[548] = sp[342] * sp[534];
    sp[549] = sp[343] * sp[534];
    sp[550] = sp[344] * sp[534];
    sp[551] = sp[345] * sp[534];
    sp[552] = sp[346] * sp[534];
    sp[553] = sp[538] + -1 * sp[544];
    sp[554] = sp[539] + -1 * sp[545];
    sp[555] = sp[540] + -1 * sp[546];
    sp[556] = sp[541] + -1 * sp[547];
    sp[557] = sp[542] + -1 * sp[548];
    sp[558] = sp[543] + -1 * sp[549];
    sp[559] = sp[553] / sp[227];
    sp[560] = sp[554] / sp[227];
    sp[561] = sp[555] / sp[227];
    sp[562] = sp[556] / sp[227];
    sp[563] = sp[557] / sp[227];
    sp[564] = sp[558] / sp[227];
    sp[565] = -1 * sp[550] / sp[227];
    sp[566] = -1 * sp[551] / sp[227];
    sp[567] = -1 * sp[552] / sp[227];
    sp[568] = sp[225] / sp[227];
    sp[569] = sp[338] * sp[568];
    sp[570] = sp[339] * sp[568];
    sp[571] = sp[340] * sp[568];
    sp[572] = sp[341] * sp[568];
    sp[573] = sp[342] * sp[568];
    sp[574] = sp[343] * sp[568];
    sp[575] = sp[344] * sp[568];
    sp[576] = sp[345] * sp[568];
    sp[577] = sp[346] * sp[568];
    sp[578] = sp[323] + -1 * sp[569];
    sp[579] = sp[324] + -1 * sp[570];
    sp[580] = sp[325] + -1 * sp[571];
    sp[581] = sp[326] + -1 * sp[575];
    sp[582] = sp[327] + -1 * sp[576];
    sp[583] = sp[328] + -1 * sp[577];
    sp[584] = sp[578] / sp[227];
    sp[585] = sp[579] / sp[227];
    sp[586] = sp[580] / sp[227];
    sp[587] = -1 * sp[572] / sp[227];
    sp[588] = -1 * sp[573] / sp[227];
    sp[589] = -1 * sp[574] / sp[227];
    sp[590] = sp[581] / sp[227];
    sp[591] = sp[582] / sp[227];
    sp[592] = sp[583] / sp[227];
    sp[593] = sp[199] * sp[121];
    sp[594] = (1 + sp[141]) * sp[84];
    sp[595] = sp[593] + -1 * sp[594];
    sp[596] = sp[595] / sp[227];
    sp[597] = sp[121] * (0.5 * sp[19]);
    sp[598] = sp[121] * (0.5 * sp[20]);
    sp[599] = sp[121] * (0.5 * sp[21]);
    sp[600] = (1 + sp[141]) * (0.5 * sp[34]);
    sp[601] = (1 + sp[141]) * (0.5 * sp[35]);
    sp[602] = (1 + sp[141]) * (0.5 * sp[36]);
    sp[603] = -1 * sp[311] + sp[320];
    sp[604] = -1 * sp[312] + sp[321];
    sp[605] = -1 * sp[313] + sp[322];
    sp[606] = -1 * sp[600] + sp[597];
    sp[607] = -1 * sp[601] + sp[598];
    sp[608] = -1 * sp[602] + sp[599];
    sp[609] = sp[338] * sp[596];
    sp[610] = sp[339] * sp[596];
    sp[611] = sp[340] * sp[596];
    sp[612] = sp[341] * sp[596];
    sp[613] = sp[342] * sp[596];
    sp[614] = sp[343] * sp[596];
    sp[615] = sp[344] * sp[596];
    sp[616] = sp[345] * sp[596];
    sp[617] = sp[346] * sp[596];
    sp[618] = sp[603] + -1 * sp[612];
    sp[619] = sp[604] + -1 * sp[613];
    sp[620] = sp[605] + -1 * sp[614];
    sp[621] = sp[606] + -1 * sp[615];
    sp[622] = sp[607] + -1 * sp[616];
    sp[623] = sp[608] + -1 * sp[617];
    sp[624] = -1 * sp[609] / sp[227];
    sp[625] = -1 * sp[610] / sp[227];
    sp[626] = -1 * sp[611] / sp[227];
    sp[627] = sp[618] / sp[227];
    sp[628] = sp[619] / sp[227];
    sp[629] = sp[620] / sp[227];
    sp[630] = sp[621] / sp[227];
    sp[631] = sp[622] / sp[227];
    sp[632] = sp[623] / sp[227];
    sp[633] = (1 + sp[141]) * (1 + sp[159]);
    sp[634] = sp[218] * sp[121];
    sp[635] = sp[633] + -1 * sp[634];
    sp[636] = sp[635] / sp[227];
    sp[637] = -1 * sp[597] + sp[600];
    sp[638] = -1 * sp[598] + sp[601];
    sp[639] = -1 * sp[599] + sp[602];
    sp[640] = -1 * sp[314] + sp[317];
    sp[641] = -1 * sp[315] + sp[318];
    sp[642] = -1 * sp[316] + sp[319];
    sp[643] = sp[338] * sp[636];
    sp[644] = sp[339] * sp[636];
    sp[645] = sp[340] * sp[636];
    sp[646] = sp[341] * sp[636];
    sp[647] = sp[342] * sp[636];
    sp[648] = sp[343] * sp[636];
    sp[649] = sp[344] * sp[636];
    sp[650] = sp[345] * sp[636];
    sp[651] = sp[346] * sp[636];
    sp[652] = sp[637] + -1 * sp[643];
    sp[653] = sp[638] + -1 * sp[644];
    sp[654] = sp[639] + -1 * sp[645];
    sp[655] = sp[640] + -1 * sp[646];
    sp[656] = sp[641] + -1 * sp[647];
    sp[657] = sp[642] + -1 * sp[648];
    sp[658] = sp[652] / sp[227];
    sp[659] = sp[653] / sp[227];
    sp[660] = sp[654] / sp[227];
    sp[661] = sp[655] / sp[227];
    sp[662] = sp[656] / sp[227];
    sp[663] = sp[657] / sp[227];
    sp[664] = -1 * sp[649] / sp[227];
    sp[665] = -1 * sp[650] / sp[227];
    sp[666] = -1 * sp[651] / sp[227];
    sp[667] = 1.0 / w[3][0] * w[4][0];
    sp[668] = std::abs(sp[13]);
    sp[669] = sp[667] * sp[668];
    alignas(32) double TP0[2] = {};
    alignas(32) double TP1[2] = {};
    alignas(32) double TP2[2] = {};
    alignas(32) double TP3[2] = {};
    alignas(32) double TP4[2] = {};
    alignas(32) double TP5[2] = {};
    alignas(32) double TP6[2] = {};
    alignas(32) double TP7[2] = {};
    alignas(32) double TP8[2] = {};
    alignas(32) double TP9[2] = {};
    alignas(32) double TP10[2] = {};
    alignas(32) double TP11[2] = {};
    alignas(32) double TP12[2] = {};
    alignas(32) double TP13[2] = {};
    alignas(32) double TP14[2] = {};
    alignas(32) double TP15[2] = {};
    alignas(32) double TP16[2] = {};
    alignas(32) double TP17[2] = {};
    alignas(32) double TP18[2] = {};
    alignas(32) double TP19[2] = {};
    alignas(32) double TP20[2] = {};
    alignas(32) double TP21[2] = {};
    alignas(32) double TP22[2] = {};
    alignas(32) double TP23[2] = {};
    alignas(32) double TP24[2] = {};
    alignas(32) double TP25[2] = {};
    alignas(32) double TP26[2] = {};
    alignas(32) double TP27[2] = {};
    alignas(32) double TP28[2] = {};
    alignas(32) double TP29[2] = {};
    alignas(32) double TP30[2] = {};
    alignas(32) double TP31[2] = {};
    alignas(32) double TP32[2] = {};
    alignas(32) double TP33[2] = {};
    alignas(32) double TP34[2] = {};
    alignas(32) double TP35[2] = {};
    alignas(32) double TP36[2] = {};
    alignas(32) double TP37[2] = {};
    alignas(32) double TP38[2] = {};
    alignas(32) double TP39[2] = {};
    alignas(32) double TP40[2] = {};
    alignas(32) double TP41[2] = {};
    alignas(32) double TP42[2] = {};
    alignas(32) double TP43[2] = {};
    alignas(32) double TP44[2] = {};
    alignas(32) double TP45[2] = {};
    alignas(32) double TP46[2] = {};
    alignas(32) double TP47[2] = {};
    alignas(32) double TP48[2] = {};
    alignas(32) double TP49[2] = {};
    alignas(32) double TP50[2] = {};
    alignas(32) double TP51[2] = {};
    alignas(32) double TP52[2] = {};
    alignas(32) double TP53[2] = {};
    alignas(32) double TP54[2] = {};
    alignas(32) double TP55[2] = {};
    alignas(32) double TP56[2] = {};
    alignas(32) double TP57[2] = {};
    alignas(32) double TP58[2] = {};
    alignas(32) double TP59[2] = {};
    alignas(32) double TP60[2] = {};
    alignas(32) double TP61[2] = {};
    alignas(32) double TP62[2] = {};
    alignas(32) double TP63[2] = {};
    alignas(32) double TP64[2] = {};
    alignas(32) double TP65[2] = {};
    alignas(32) double TP66[2] = {};
    alignas(32) double TP67[2] = {};
    alignas(32) double TP68[2] = {};
    alignas(32) double TP69[2] = {};
    alignas(32) double TP70[2] = {};
    alignas(32) double TP71[2] = {};
    alignas(32) double TP72[2] = {};
    alignas(32) double TP73[2] = {};
    alignas(32) double TP74[2] = {};
    alignas(32) double TP75[2] = {};
    alignas(32) double TP76[2] = {};
    alignas(32) double TP77[2] = {};
    alignas(32) double TP78[2] = {};
    alignas(32) double TP79[2] = {};
    alignas(32) double TP80[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w5 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w5 += w[5][ic] * FE32_C0_Q4[0][iq][ic];
        alignas(32) double sv4[1224];
        sv4[0] = 0.5 * (0.5 * sp[19]) * (2 * w5);
        sv4[1] = 0.5 * (0.5 * sp[20]) * (2 * w5);
        sv4[2] = 0.5 * (0.5 * sp[21]) * (2 * w5);
        sv4[3] = 0.5 * (0.5 * sp[34]) * (2 * w5);
        sv4[4] = 0.5 * (0.5 * sp[35]) * (2 * w5);
        sv4[5] = 0.5 * (0.5 * sp[36]) * (2 * w5);
        sv4[6] = sv4[0] * sp[228];
        sv4[7] = sv4[1] * sp[228];
        sv4[8] = sv4[2] * sp[228];
        sv4[9] = sv4[3] * sp[228];
        sv4[10] = sv4[4] * sp[228];
        sv4[11] = sv4[5] * sp[228];
        sv4[12] = 0.5 * sp[229] * (2 * w5);
        sv4[13] = sv4[12] * sp[362];
        sv4[14] = sv4[12] * sp[363];
        sv4[15] = sv4[12] * sp[364];
        sv4[16] = sv4[12] * sp[365];
        sv4[17] = sv4[12] * sp[366];
        sv4[18] = sv4[12] * sp[367];
        sv4[19] = sv4[12] * sp[368];
        sv4[20] = sv4[12] * sp[369];
        sv4[21] = sv4[12] * sp[370];
        sv4[22] = sv4[6] + sv4[13];
        sv4[23] = sv4[7] + sv4[14];
        sv4[24] = sv4[8] + sv4[15];
        sv4[25] = sv4[9] + sv4[16];
        sv4[26] = sv4[10] + sv4[17];
        sv4[27] = sv4[11] + sv4[18];
        sv4[28] = 0.5 * sp[371] * (2 * w5);
        sv4[29] = 0.5 * sp[372] * (2 * w5);
        sv4[30] = 0.5 * sp[373] * (2 * w5);
        sv4[31] = sv4[28] * sp[374];
        sv4[32] = sv4[29] * sp[374];
        sv4[33] = sv4[30] * sp[374];
        sv4[34] = 0.5 * sp[375] * (2 * w5);
        sv4[35] = sv4[34] * sp[391];
        sv4[36] = sv4[34] * sp[392];
        sv4[37] = sv4[34] * sp[393];
        sv4[38] = sv4[34] * sp[394];
        sv4[39] = sv4[34] * sp[395];
        sv4[40] = sv4[34] * sp[396];
        sv4[41] = sv4[34] * sp[397];
        sv4[42] = sv4[34] * sp[398];
        sv4[43] = sv4[34] * sp[399];
        sv4[44] = sv4[31] + sv4[38];
        sv4[45] = sv4[32] + sv4[39];
        sv4[46] = sv4[33] + sv4[40];
        sv4[47] = sv4[22] + sv4[35];
        sv4[48] = sv4[23] + sv4[36];
        sv4[49] = sv4[24] + sv4[37];
        sv4[50] = sv4[25] + sv4[44];
        sv4[51] = sv4[26] + sv4[45];
        sv4[52] = sv4[27] + sv4[46];
        sv4[53] = sv4[19] + sv4[41];
        sv4[54] = sv4[20] + sv4[42];
        sv4[55] = sv4[21] + sv4[43];
        sv4[56] = 0.5 * (0.5 * sp[233]) * (2 * w5);
        sv4[57] = 0.5 * (0.5 * sp[234]) * (2 * w5);
        sv4[58] = 0.5 * (0.5 * sp[235]) * (2 * w5);
        sv4[59] = sv4[56] * sp[403];
        sv4[60] = sv4[57] * sp[403];
        sv4[61] = sv4[58] * sp[403];
        sv4[62] = sv4[0] * sp[403];
        sv4[63] = sv4[1] * sp[403];
        sv4[64] = sv4[2] * sp[403];
        sv4[65] = 0.5 * sp[404] * (2 * w5);
        sv4[66] = sv4[65] * sp[429];
        sv4[67] = sv4[65] * sp[430];
        sv4[68] = sv4[65] * sp[431];
        sv4[69] = sv4[65] * sp[432];
        sv4[70] = sv4[65] * sp[433];
        sv4[71] = sv4[65] * sp[434];
        sv4[72] = sv4[65] * sp[435];
        sv4[73] = sv4[65] * sp[436];
        sv4[74] = sv4[65] * sp[437];
        sv4[75] = sv4[59] + sv4[69];
        sv4[76] = sv4[60] + sv4[70];
        sv4[77] = sv4[61] + sv4[71];
        sv4[78] = sv4[62] + sv4[72];
        sv4[79] = sv4[63] + sv4[73];
        sv4[80] = sv4[64] + sv4[74];
        sv4[81] = sv4[47] + sv4[66];
        sv4[82] = sv4[48] + sv4[67];
        sv4[83] = sv4[49] + sv4[68];
        sv4[84] = sv4[50] + sv4[75];
        sv4[85] = sv4[51] + sv4[76];
        sv4[86] = sv4[52] + sv4[77];
        sv4[87] = sv4[53] + sv4[78];
        sv4[88] = sv4[54] + sv4[79];
        sv4[89] = sv4[55] + sv4[80];
        sv4[90] = 2 * w5 * w[6][0];
        sv4[91] = sv4[90] / (1 + -1 * (2 * w[6][0]));
        sv4[92] = sp[338] * sv4[91];
        sv4[93] = sp[339] * sv4[91];
        sv4[94] = sp[340] * sv4[91];
        sv4[95] = sp[341] * sv4[91];
        sv4[96] = sp[342] * sv4[91];
        sv4[97] = sp[343] * sv4[91];
        sv4[98] = sp[344] * sv4[91];
        sv4[99] = sp[345] * sv4[91];
        sv4[100] = sp[346] * sv4[91];
        sv4[101] = sp[439] * sv4[92];
        sv4[102] = sp[439] * sv4[93];
        sv4[103] = sp[439] * sv4[94];
        sv4[104] = sp[439] * sv4[95];
        sv4[105] = sp[439] * sv4[96];
        sv4[106] = sp[439] * sv4[97];
        sv4[107] = sp[439] * sv4[98];
        sv4[108] = sp[439] * sv4[99];
        sv4[109] = sp[439] * sv4[100];
        sv4[110] = sp[227] * sv4[91];
        sv4[111] = 0.5 * sp[34] * sv4[110];
        sv4[112] = 0.5 * sp[35] * sv4[110];
        sv4[113] = 0.5 * sp[36] * sv4[110];
        sv4[114] = 0.5 * sp[19] * sv4[110];
        sv4[115] = 0.5 * sp[20] * sv4[110];
        sv4[116] = 0.5 * sp[21] * sv4[110];
        sv4[117] = 0.5 * sp[233] * sv4[110];
        sv4[118] = 0.5 * sp[234] * sv4[110];
        sv4[119] = 0.5 * sp[235] * sv4[110];
        sv4[120] = sv4[111] + sv4[101];
        sv4[121] = sv4[112] + sv4[102];
        sv4[122] = sv4[113] + sv4[103];
        sv4[123] = sv4[114] + sv4[104];
        sv4[124] = sv4[115] + sv4[105];
        sv4[125] = sv4[116] + sv4[106];
        sv4[126] = sv4[117] + sv4[107];
        sv4[127] = sv4[118] + sv4[108];
        sv4[128] = sv4[119] + sv4[109];
        sv4[129] = sv4[120] + sv4[81];
        sv4[130] = sv4[121] + sv4[82];
        sv4[131] = sv4[122] + sv4[83];
        sv4[132] = sv4[84] + sv4[123];
        sv4[133] = sv4[85] + sv4[124];
        sv4[134] = sv4[86] + sv4[125];
        sv4[135] = sv4[87] + sv4[126];
        sv4[136] = sv4[88] + sv4[127];
        sv4[137] = sv4[89] + sv4[128];
        sv4[138] = sv4[129] * sp[14];
        sv4[139] = sv4[129] * sp[17];
        sv4[140] = sv4[129] * sp[18];
        sv4[141] = sv4[130] * sp[14];
        sv4[142] = sv4[130] * sp[17];
        sv4[143] = sv4[130] * sp[18];
        sv4[144] = sv4[131] * sp[14];
        sv4[145] = sv4[131] * sp[17];
        sv4[146] = sv4[131] * sp[18];
        sv4[147] = sv4[132] * sp[14];
        sv4[148] = sv4[132] * sp[17];
        sv4[149] = sv4[132] * sp[18];
        sv4[150] = sv4[133] * sp[14];
        sv4[151] = sv4[133] * sp[17];
        sv4[152] = sv4[133] * sp[18];
        sv4[153] = sv4[134] * sp[14];
        sv4[154] = sv4[134] * sp[17];
        sv4[155] = sv4[134] * sp[18];
        sv4[156] = sv4[135] * sp[14];
        sv4[157] = sv4[135] * sp[17];
        sv4[158] = sv4[135] * sp[18];
        sv4[159] = sv4[136] * sp[14];
        sv4[160] = sv4[136] * sp[17];
        sv4[161] = sv4[136] * sp[18];
        sv4[162] = sv4[137] * sp[14];
        sv4[163] = sv4[137] * sp[17];
        sv4[164] = sv4[137] * sp[18];
        sv4[165] = 0.5 * sp[440] * (2 * w5);
        sv4[166] = 0.5 * sp[441] * (2 * w5);
        sv4[167] = 0.5 * sp[442] * (2 * w5);
        sv4[168] = sv4[165] * sp[228];
        sv4[169] = sv4[166] * sp[228];
        sv4[170] = sv4[167] * sp[228];
        sv4[171] = 0.5 * sp[443] * (2 * w5);
        sv4[172] = sv4[171] * sp[362];
        sv4[173] = sv4[171] * sp[363];
        sv4[174] = sv4[171] * sp[364];
        sv4[175] = sv4[171] * sp[365];
        sv4[176] = sv4[171] * sp[366];
        sv4[177] = sv4[171] * sp[367];
        sv4[178] = sv4[171] * sp[368];
        sv4[179] = sv4[171] * sp[369];
        sv4[180] = sv4[171] * sp[370];
        sv4[181] = sv4[168] + sv4[172];
        sv4[182] = sv4[169] + sv4[173];
        sv4[183] = sv4[170] + sv4[174];
        sv4[184] = sv4[0] * sp[374];
        sv4[185] = sv4[1] * sp[374];
        sv4[186] = sv4[2] * sp[374];
        sv4[187] = sv4[3] * sp[374];
        sv4[188] = sv4[4] * sp[374];
        sv4[189] = sv4[5] * sp[374];
        sv4[190] = sv4[12] * sp[391];
        sv4[191] = sv4[12] * sp[392];
        sv4[192] = sv4[12] * sp[393];
        sv4[193] = sv4[12] * sp[394];
        sv4[194] = sv4[12] * sp[395];
        sv4[195] = sv4[12] * sp[396];
        sv4[196] = sv4[12] * sp[397];
        sv4[197] = sv4[12] * sp[398];
        sv4[198] = sv4[12] * sp[399];
        sv4[199] = sv4[184] + sv4[190];
        sv4[200] = sv4[185] + sv4[191];
        sv4[201] = sv4[186] + sv4[192];
        sv4[202] = sv4[187] + sv4[193];
        sv4[203] = sv4[188] + sv4[194];
        sv4[204] = sv4[189] + sv4[195];
        sv4[205] = sv4[199] + sv4[181];
        sv4[206] = sv4[200] + sv4[182];
        sv4[207] = sv4[201] + sv4[183];
        sv4[208] = sv4[202] + sv4[175];
        sv4[209] = sv4[203] + sv4[176];
        sv4[210] = sv4[204] + sv4[177];
        sv4[211] = sv4[178] + sv4[196];
        sv4[212] = sv4[179] + sv4[197];
        sv4[213] = sv4[180] + sv4[198];
        sv4[214] = sv4[3] * sp[403];
        sv4[215] = sv4[4] * sp[403];
        sv4[216] = sv4[5] * sp[403];
        sv4[217] = 0.5 * sp[444] * (2 * w5);
        sv4[218] = sv4[217] * sp[429];
        sv4[219] = sv4[217] * sp[430];
        sv4[220] = sv4[217] * sp[431];
        sv4[221] = sv4[217] * sp[432];
        sv4[222] = sv4[217] * sp[433];
        sv4[223] = sv4[217] * sp[434];
        sv4[224] = sv4[217] * sp[435];
        sv4[225] = sv4[217] * sp[436];
        sv4[226] = sv4[217] * sp[437];
        sv4[227] = sv4[59] + sv4[218];
        sv4[228] = sv4[60] + sv4[219];
        sv4[229] = sv4[61] + sv4[220];
        sv4[230] = sv4[214] + sv4[224];
        sv4[231] = sv4[215] + sv4[225];
        sv4[232] = sv4[216] + sv4[226];
        sv4[233] = sv4[205] + sv4[227];
        sv4[234] = sv4[206] + sv4[228];
        sv4[235] = sv4[207] + sv4[229];
        sv4[236] = sv4[208] + sv4[221];
        sv4[237] = sv4[209] + sv4[222];
        sv4[238] = sv4[210] + sv4[223];
        sv4[239] = sv4[211] + sv4[230];
        sv4[240] = sv4[212] + sv4[231];
        sv4[241] = sv4[213] + sv4[232];
        sv4[242] = sv4[233] * sp[14];
        sv4[243] = sv4[233] * sp[17];
        sv4[244] = sv4[233] * sp[18];
        sv4[245] = sv4[234] * sp[14];
        sv4[246] = sv4[234] * sp[17];
        sv4[247] = sv4[234] * sp[18];
        sv4[248] = sv4[235] * sp[14];
        sv4[249] = sv4[235] * sp[17];
        sv4[250] = sv4[235] * sp[18];
        sv4[251] = sv4[236] * sp[14];
        sv4[252] = sv4[236] * sp[17];
        sv4[253] = sv4[236] * sp[18];
        sv4[254] = sv4[237] * sp[14];
        sv4[255] = sv4[237] * sp[17];
        sv4[256] = sv4[237] * sp[18];
        sv4[257] = sv4[238] * sp[14];
        sv4[258] = sv4[238] * sp[17];
        sv4[259] = sv4[238] * sp[18];
        sv4[260] = sv4[239] * sp[14];
        sv4[261] = sv4[239] * sp[17];
        sv4[262] = sv4[239] * sp[18];
        sv4[263] = sv4[240] * sp[14];
        sv4[264] = sv4[240] * sp[17];
        sv4[265] = sv4[240] * sp[18];
        sv4[266] = sv4[241] * sp[14];
        sv4[267] = sv4[241] * sp[17];
        sv4[268] = sv4[241] * sp[18];
        sv4[269] = sv4[56] * sp[228];
        sv4[270] = sv4[57] * sp[228];
        sv4[271] = sv4[58] * sp[228];
        sv4[272] = sv4[217] * sp[362];
        sv4[273] = sv4[217] * sp[363];
        sv4[274] = sv4[217] * sp[364];
        sv4[275] = sv4[217] * sp[365];
        sv4[276] = sv4[217] * sp[366];
        sv4[277] = sv4[217] * sp[367];
        sv4[278] = sv4[217] * sp[368];
        sv4[279] = sv4[217] * sp[369];
        sv4[280] = sv4[217] * sp[370];
        sv4[281] = sv4[269] + sv4[272];
        sv4[282] = sv4[270] + sv4[273];
        sv4[283] = sv4[271] + sv4[274];
        sv4[284] = sv4[9] + sv4[278];
        sv4[285] = sv4[10] + sv4[279];
        sv4[286] = sv4[11] + sv4[280];
        sv4[287] = sv4[56] * sp[374];
        sv4[288] = sv4[57] * sp[374];
        sv4[289] = sv4[58] * sp[374];
        sv4[290] = sv4[65] * sp[391];
        sv4[291] = sv4[65] * sp[392];
        sv4[292] = sv4[65] * sp[393];
        sv4[293] = sv4[65] * sp[394];
        sv4[294] = sv4[65] * sp[395];
        sv4[295] = sv4[65] * sp[396];
        sv4[296] = sv4[65] * sp[397];
        sv4[297] = sv4[65] * sp[398];
        sv4[298] = sv4[65] * sp[399];
        sv4[299] = sv4[287] + sv4[293];
        sv4[300] = sv4[288] + sv4[294];
        sv4[301] = sv4[289] + sv4[295];
        sv4[302] = sv4[184] + sv4[296];
        sv4[303] = sv4[185] + sv4[297];
        sv4[304] = sv4[186] + sv4[298];
        sv4[305] = sv4[281] + sv4[290];
        sv4[306] = sv4[282] + sv4[291];
        sv4[307] = sv4[283] + sv4[292];
        sv4[308] = sv4[299] + sv4[275];
        sv4[309] = sv4[300] + sv4[276];
        sv4[310] = sv4[301] + sv4[277];
        sv4[311] = sv4[284] + sv4[302];
        sv4[312] = sv4[285] + sv4[303];
        sv4[313] = sv4[286] + sv4[304];
        sv4[314] = 0.5 * sp[445] * (2 * w5);
        sv4[315] = 0.5 * sp[446] * (2 * w5);
        sv4[316] = 0.5 * sp[447] * (2 * w5);
        sv4[317] = sv4[314] * sp[403];
        sv4[318] = sv4[315] * sp[403];
        sv4[319] = sv4[316] * sp[403];
        sv4[320] = 0.5 * sp[448] * (2 * w5);
        sv4[321] = sv4[320] * sp[429];
        sv4[322] = sv4[320] * sp[430];
        sv4[323] = sv4[320] * sp[431];
        sv4[324] = sv4[320] * sp[432];
        sv4[325] = sv4[320] * sp[433];
        sv4[326] = sv4[320] * sp[434];
        sv4[327] = sv4[320] * sp[435];
        sv4[328] = sv4[320] * sp[436];
        sv4[329] = sv4[320] * sp[437];
        sv4[330] = sv4[317] + sv4[327];
        sv4[331] = sv4[318] + sv4[328];
        sv4[332] = sv4[319] + sv4[329];
        sv4[333] = sv4[305] + sv4[321];
        sv4[334] = sv4[306] + sv4[322];
        sv4[335] = sv4[307] + sv4[323];
        sv4[336] = sv4[308] + sv4[324];
        sv4[337] = sv4[309] + sv4[325];
        sv4[338] = sv4[310] + sv4[326];
        sv4[339] = sv4[311] + sv4[330];
        sv4[340] = sv4[312] + sv4[331];
        sv4[341] = sv4[313] + sv4[332];
        sv4[342] = sv4[333] * sp[14];
        sv4[343] = sv4[333] * sp[17];
        sv4[344] = sv4[333] * sp[18];
        sv4[345] = sv4[334] * sp[14];
        sv4[346] = sv4[334] * sp[17];
        sv4[347] = sv4[334] * sp[18];
        sv4[348] = sv4[335] * sp[14];
        sv4[349] = sv4[335] * sp[17];
        sv4[350] = sv4[335] * sp[18];
        sv4[351] = sv4[336] * sp[14];
        sv4[352] = sv4[336] * sp[17];
        sv4[353] = sv4[336] * sp[18];
        sv4[354] = sv4[337] * sp[14];
        sv4[355] = sv4[337] * sp[17];
        sv4[356] = sv4[337] * sp[18];
        sv4[357] = sv4[338] * sp[14];
        sv4[358] = sv4[338] * sp[17];
        sv4[359] = sv4[338] * sp[18];
        sv4[360] = sv4[339] * sp[14];
        sv4[361] = sv4[339] * sp[17];
        sv4[362] = sv4[339] * sp[18];
        sv4[363] = sv4[340] * sp[14];
        sv4[364] = sv4[340] * sp[17];
        sv4[365] = sv4[340] * sp[18];
        sv4[366] = sv4[341] * sp[14];
        sv4[367] = sv4[341] * sp[17];
        sv4[368] = sv4[341] * sp[18];
        sv4[369] = sv4[28] * sp[451];
        sv4[370] = sv4[29] * sp[451];
        sv4[371] = sv4[30] * sp[451];
        sv4[372] = sv4[34] * sp[479];
        sv4[373] = sv4[34] * sp[480];
        sv4[374] = sv4[34] * sp[481];
        sv4[375] = sv4[34] * sp[482];
        sv4[376] = sv4[34] * sp[483];
        sv4[377] = sv4[34] * sp[484];
        sv4[378] = sv4[34] * sp[485];
        sv4[379] = sv4[34] * sp[486];
        sv4[380] = sv4[34] * sp[487];
        sv4[381] = sv4[369] + sv4[375];
        sv4[382] = sv4[370] + sv4[376];
        sv4[383] = sv4[371] + sv4[377];
        sv4[384] = sv4[0] * sp[491];
        sv4[385] = sv4[1] * sp[491];
        sv4[386] = sv4[2] * sp[491];
        sv4[387] = sv4[3] * sp[491];
        sv4[388] = sv4[4] * sp[491];
        sv4[389] = sv4[5] * sp[491];
        sv4[390] = sv4[12] * sp[522];
        sv4[391] = sv4[12] * sp[523];
        sv4[392] = sv4[12] * sp[524];
        sv4[393] = sv4[12] * sp[525];
        sv4[394] = sv4[12] * sp[526];
        sv4[395] = sv4[12] * sp[527];
        sv4[396] = sv4[12] * sp[528];
        sv4[397] = sv4[12] * sp[529];
        sv4[398] = sv4[12] * sp[530];
        sv4[399] = sv4[384] + sv4[390];
        sv4[400] = sv4[385] + sv4[391];
        sv4[401] = sv4[386] + sv4[392];
        sv4[402] = sv4[387] + sv4[393];
        sv4[403] = sv4[388] + sv4[394];
        sv4[404] = sv4[389] + sv4[395];
        sv4[405] = sv4[399] + sv4[372];
        sv4[406] = sv4[400] + sv4[373];
        sv4[407] = sv4[401] + sv4[374];
        sv4[408] = sv4[402] + sv4[381];
        sv4[409] = sv4[403] + sv4[382];
        sv4[410] = sv4[404] + sv4[383];
        sv4[411] = sv4[378] + sv4[396];
        sv4[412] = sv4[379] + sv4[397];
        sv4[413] = sv4[380] + sv4[398];
        sv4[414] = sv4[56] * sp[534];
        sv4[415] = sv4[57] * sp[534];
        sv4[416] = sv4[58] * sp[534];
        sv4[417] = sv4[0] * sp[534];
        sv4[418] = sv4[1] * sp[534];
        sv4[419] = sv4[2] * sp[534];
        sv4[420] = sv4[65] * sp[559];
        sv4[421] = sv4[65] * sp[560];
        sv4[422] = sv4[65] * sp[561];
        sv4[423] = sv4[65] * sp[562];
        sv4[424] = sv4[65] * sp[563];
        sv4[425] = sv4[65] * sp[564];
        sv4[426] = sv4[65] * sp[565];
        sv4[427] = sv4[65] * sp[566];
        sv4[428] = sv4[65] * sp[567];
        sv4[429] = sv4[414] + sv4[423];
        sv4[430] = sv4[415] + sv4[424];
        sv4[431] = sv4[416] + sv4[425];
        sv4[432] = sv4[417] + sv4[426];
        sv4[433] = sv4[418] + sv4[427];
        sv4[434] = sv4[419] + sv4[428];
        sv4[435] = sv4[405] + sv4[420];
        sv4[436] = sv4[406] + sv4[421];
        sv4[437] = sv4[407] + sv4[422];
        sv4[438] = sv4[408] + sv4[429];
        sv4[439] = sv4[409] + sv4[430];
        sv4[440] = sv4[410] + sv4[431];
        sv4[441] = sv4[411] + sv4[432];
        sv4[442] = sv4[412] + sv4[433];
        sv4[443] = sv4[413] + sv4[434];
        sv4[444] = sv4[435] * sp[25];
        sv4[445] = sv4[435] * sp[29];
        sv4[446] = sv4[435] * sp[33];
        sv4[447] = sv4[436] * sp[25];
        sv4[448] = sv4[436] * sp[29];
        sv4[449] = sv4[436] * sp[33];
        sv4[450] = sv4[437] * sp[25];
        sv4[451] = sv4[437] * sp[29];
        sv4[452] = sv4[437] * sp[33];
        sv4[453] = sv4[438] * sp[25];
        sv4[454] = sv4[438] * sp[29];
        sv4[455] = sv4[438] * sp[33];
        sv4[456] = sv4[439] * sp[25];
        sv4[457] = sv4[439] * sp[29];
        sv4[458] = sv4[439] * sp[33];
        sv4[459] = sv4[440] * sp[25];
        sv4[460] = sv4[440] * sp[29];
        sv4[461] = sv4[440] * sp[33];
        sv4[462] = sv4[441] * sp[25];
        sv4[463] = sv4[441] * sp[29];
        sv4[464] = sv4[441] * sp[33];
        sv4[465] = sv4[442] * sp[25];
        sv4[466] = sv4[442] * sp[29];
        sv4[467] = sv4[442] * sp[33];
        sv4[468] = sv4[443] * sp[25];
        sv4[469] = sv4[443] * sp[29];
        sv4[470] = sv4[443] * sp[33];
        sv4[471] = sv4[0] * sp[451];
        sv4[472] = sv4[1] * sp[451];
        sv4[473] = sv4[2] * sp[451];
        sv4[474] = sv4[3] * sp[451];
        sv4[475] = sv4[4] * sp[451];
        sv4[476] = sv4[5] * sp[451];
        sv4[477] = sv4[12] * sp[479];
        sv4[478] = sv4[12] * sp[480];
        sv4[479] = sv4[12] * sp[481];
        sv4[480] = sv4[12] * sp[482];
        sv4[481] = sv4[12] * sp[483];
        sv4[482] = sv4[12] * sp[484];
        sv4[483] = sv4[12] * sp[485];
        sv4[484] = sv4[12] * sp[486];
        sv4[485] = sv4[12] * sp[487];
        sv4[486] = sv4[471] + sv4[477];
        sv4[487] = sv4[472] + sv4[478];
        sv4[488] = sv4[473] + sv4[479];
        sv4[489] = sv4[474] + sv4[480];
        sv4[490] = sv4[475] + sv4[481];
        sv4[491] = sv4[476] + sv4[482];
        sv4[492] = sv4[165] * sp[491];
        sv4[493] = sv4[166] * sp[491];
        sv4[494] = sv4[167] * sp[491];
        sv4[495] = sv4[171] * sp[522];
        sv4[496] = sv4[171] * sp[523];
        sv4[497] = sv4[171] * sp[524];
        sv4[498] = sv4[171] * sp[525];
        sv4[499] = sv4[171] * sp[526];
        sv4[500] = sv4[171] * sp[527];
        sv4[501] = sv4[171] * sp[528];
        sv4[502] = sv4[171] * sp[529];
        sv4[503] = sv4[171] * sp[530];
        sv4[504] = sv4[492] + sv4[495];
        sv4[505] = sv4[493] + sv4[496];
        sv4[506] = sv4[494] + sv4[497];
        sv4[507] = sv4[486] + sv4[504];
        sv4[508] = sv4[487] + sv4[505];
        sv4[509] = sv4[488] + sv4[506];
        sv4[510] = sv4[489] + sv4[498];
        sv4[511] = sv4[490] + sv4[499];
        sv4[512] = sv4[491] + sv4[500];
        sv4[513] = sv4[483] + sv4[501];
        sv4[514] = sv4[484] + sv4[502];
        sv4[515] = sv4[485] + sv4[503];
        sv4[516] = sv4[3] * sp[534];
        sv4[517] = sv4[4] * sp[534];
        sv4[518] = sv4[5] * sp[534];
        sv4[519] = sv4[217] * sp[559];
        sv4[520] = sv4[217] * sp[560];
        sv4[521] = sv4[217] * sp[561];
        sv4[522] = sv4[217] * sp[562];
        sv4[523] = sv4[217] * sp[563];
        sv4[524] = sv4[217] * sp[564];
        sv4[525] = sv4[217] * sp[565];
        sv4[526] = sv4[217] * sp[566];
        sv4[527] = sv4[217] * sp[567];
        sv4[528] = sv4[414] + sv4[519];
        sv4[529] = sv4[415] + sv4[520];
        sv4[530] = sv4[416] + sv4[521];
        sv4[531] = sv4[516] + sv4[525];
        sv4[532] = sv4[517] + sv4[526];
        sv4[533] = sv4[518] + sv4[527];
        sv4[534] = sv4[507] + sv4[528];
        sv4[535] = sv4[508] + sv4[529];
        sv4[536] = sv4[509] + sv4[530];
        sv4[537] = sv4[510] + sv4[522];
        sv4[538] = sv4[511] + sv4[523];
        sv4[539] = sv4[512] + sv4[524];
        sv4[540] = sv4[513] + sv4[531];
        sv4[541] = sv4[514] + sv4[532];
        sv4[542] = sv4[515] + sv4[533];
        sv4[543] = sv4[534] + sv4[120];
        sv4[544] = sv4[535] + sv4[121];
        sv4[545] = sv4[536] + sv4[122];
        sv4[546] = sv4[123] + sv4[537];
        sv4[547] = sv4[124] + sv4[538];
        sv4[548] = sv4[125] + sv4[539];
        sv4[549] = sv4[540] + sv4[126];
        sv4[550] = sv4[541] + sv4[127];
        sv4[551] = sv4[542] + sv4[128];
        sv4[552] = sv4[543] * sp[25];
        sv4[553] = sv4[543] * sp[29];
        sv4[554] = sv4[543] * sp[33];
        sv4[555] = sv4[544] * sp[25];
        sv4[556] = sv4[544] * sp[29];
        sv4[557] = sv4[544] * sp[33];
        sv4[558] = sv4[545] * sp[25];
        sv4[559] = sv4[545] * sp[29];
        sv4[560] = sv4[545] * sp[33];
        sv4[561] = sv4[546] * sp[25];
        sv4[562] = sv4[546] * sp[29];
        sv4[563] = sv4[546] * sp[33];
        sv4[564] = sv4[547] * sp[25];
        sv4[565] = sv4[547] * sp[29];
        sv4[566] = sv4[547] * sp[33];
        sv4[567] = sv4[548] * sp[25];
        sv4[568] = sv4[548] * sp[29];
        sv4[569] = sv4[548] * sp[33];
        sv4[570] = sv4[549] * sp[25];
        sv4[571] = sv4[549] * sp[29];
        sv4[572] = sv4[549] * sp[33];
        sv4[573] = sv4[550] * sp[25];
        sv4[574] = sv4[550] * sp[29];
        sv4[575] = sv4[550] * sp[33];
        sv4[576] = sv4[551] * sp[25];
        sv4[577] = sv4[551] * sp[29];
        sv4[578] = sv4[551] * sp[33];
        sv4[579] = sv4[56] * sp[451];
        sv4[580] = sv4[57] * sp[451];
        sv4[581] = sv4[58] * sp[451];
        sv4[582] = sv4[65] * sp[479];
        sv4[583] = sv4[65] * sp[480];
        sv4[584] = sv4[65] * sp[481];
        sv4[585] = sv4[65] * sp[482];
        sv4[586] = sv4[65] * sp[483];
        sv4[587] = sv4[65] * sp[484];
        sv4[588] = sv4[65] * sp[485];
        sv4[589] = sv4[65] * sp[486];
        sv4[590] = sv4[65] * sp[487];
        sv4[591] = sv4[579] + sv4[585];
        sv4[592] = sv4[580] + sv4[586];
        sv4[593] = sv4[581] + sv4[587];
        sv4[594] = sv4[471] + sv4[588];
        sv4[595] = sv4[472] + sv4[589];
        sv4[596] = sv4[473] + sv4[590];
        sv4[597] = sv4[56] * sp[491];
        sv4[598] = sv4[57] * sp[491];
        sv4[599] = sv4[58] * sp[491];
        sv4[600] = sv4[217] * sp[522];
        sv4[601] = sv4[217] * sp[523];
        sv4[602] = sv4[217] * sp[524];
        sv4[603] = sv4[217] * sp[525];
        sv4[604] = sv4[217] * sp[526];
        sv4[605] = sv4[217] * sp[527];
        sv4[606] = sv4[217] * sp[528];
        sv4[607] = sv4[217] * sp[529];
        sv4[608] = sv4[217] * sp[530];
        sv4[609] = sv4[597] + sv4[600];
        sv4[610] = sv4[598] + sv4[601];
        sv4[611] = sv4[599] + sv4[602];
        sv4[612] = sv4[387] + sv4[606];
        sv4[613] = sv4[388] + sv4[607];
        sv4[614] = sv4[389] + sv4[608];
        sv4[615] = sv4[609] + sv4[582];
        sv4[616] = sv4[610] + sv4[583];
        sv4[617] = sv4[611] + sv4[584];
        sv4[618] = sv4[591] + sv4[603];
        sv4[619] = sv4[592] + sv4[604];
        sv4[620] = sv4[593] + sv4[605];
        sv4[621] = sv4[594] + sv4[612];
        sv4[622] = sv4[595] + sv4[613];
        sv4[623] = sv4[596] + sv4[614];
        sv4[624] = sv4[314] * sp[534];
        sv4[625] = sv4[315] * sp[534];
        sv4[626] = sv4[316] * sp[534];
        sv4[627] = sv4[320] * sp[559];
        sv4[628] = sv4[320] * sp[560];
        sv4[629] = sv4[320] * sp[561];
        sv4[630] = sv4[320] * sp[562];
        sv4[631] = sv4[320] * sp[563];
        sv4[632] = sv4[320] * sp[564];
        sv4[633] = sv4[320] * sp[565];
        sv4[634] = sv4[320] * sp[566];
        sv4[635] = sv4[320] * sp[567];
        sv4[636] = sv4[624] + sv4[633];
        sv4[637] = sv4[625] + sv4[634];
        sv4[638] = sv4[626] + sv4[635];
        sv4[639] = sv4[615] + sv4[627];
        sv4[640] = sv4[616] + sv4[628];
        sv4[641] = sv4[617] + sv4[629];
        sv4[642] = sv4[618] + sv4[630];
        sv4[643] = sv4[619] + sv4[631];
        sv4[644] = sv4[620] + sv4[632];
        sv4[645] = sv4[621] + sv4[636];
        sv4[646] = sv4[622] + sv4[637];
        sv4[647] = sv4[623] + sv4[638];
        sv4[648] = sv4[639] * sp[25];
        sv4[649] = sv4[639] * sp[29];
        sv4[650] = sv4[639] * sp[33];
        sv4[651] = sv4[640] * sp[25];
        sv4[652] = sv4[640] * sp[29];
        sv4[653] = sv4[640] * sp[33];
        sv4[654] = sv4[641] * sp[25];
        sv4[655] = sv4[641] * sp[29];
        sv4[656] = sv4[641] * sp[33];
        sv4[657] = sv4[642] * sp[25];
        sv4[658] = sv4[642] * sp[29];
        sv4[659] = sv4[642] * sp[33];
        sv4[660] = sv4[643] * sp[25];
        sv4[661] = sv4[643] * sp[29];
        sv4[662] = sv4[643] * sp[33];
        sv4[663] = sv4[644] * sp[25];
        sv4[664] = sv4[644] * sp[29];
        sv4[665] = sv4[644] * sp[33];
        sv4[666] = sv4[645] * sp[25];
        sv4[667] = sv4[645] * sp[29];
        sv4[668] = sv4[645] * sp[33];
        sv4[669] = sv4[646] * sp[25];
        sv4[670] = sv4[646] * sp[29];
        sv4[671] = sv4[646] * sp[33];
        sv4[672] = sv4[647] * sp[25];
        sv4[673] = sv4[647] * sp[29];
        sv4[674] = sv4[647] * sp[33];
        sv4[675] = sv4[444] + sv4[138];
        sv4[676] = sv4[445] + sv4[139];
        sv4[677] = sv4[140] + sv4[446];
        sv4[678] = sv4[552] + sv4[242];
        sv4[679] = sv4[553] + sv4[243];
        sv4[680] = sv4[244] + sv4[554];
        sv4[681] = sv4[648] + sv4[342];
        sv4[682] = sv4[649] + sv4[343];
        sv4[683] = sv4[344] + sv4[650];
        sv4[684] = sv4[447] + sv4[141];
        sv4[685] = sv4[448] + sv4[142];
        sv4[686] = sv4[143] + sv4[449];
        sv4[687] = sv4[555] + sv4[245];
        sv4[688] = sv4[556] + sv4[246];
        sv4[689] = sv4[247] + sv4[557];
        sv4[690] = sv4[651] + sv4[345];
        sv4[691] = sv4[652] + sv4[346];
        sv4[692] = sv4[347] + sv4[653];
        sv4[693] = sv4[450] + sv4[144];
        sv4[694] = sv4[451] + sv4[145];
        sv4[695] = sv4[146] + sv4[452];
        sv4[696] = sv4[558] + sv4[248];
        sv4[697] = sv4[559] + sv4[249];
        sv4[698] = sv4[250] + sv4[560];
        sv4[699] = sv4[654] + sv4[348];
        sv4[700] = sv4[655] + sv4[349];
        sv4[701] = sv4[350] + sv4[656];
        sv4[702] = sv4[453] + sv4[147];
        sv4[703] = sv4[454] + sv4[148];
        sv4[704] = sv4[149] + sv4[455];
        sv4[705] = sv4[561] + sv4[251];
        sv4[706] = sv4[562] + sv4[252];
        sv4[707] = sv4[253] + sv4[563];
        sv4[708] = sv4[657] + sv4[351];
        sv4[709] = sv4[658] + sv4[352];
        sv4[710] = sv4[353] + sv4[659];
        sv4[711] = sv4[456] + sv4[150];
        sv4[712] = sv4[457] + sv4[151];
        sv4[713] = sv4[152] + sv4[458];
        sv4[714] = sv4[564] + sv4[254];
        sv4[715] = sv4[565] + sv4[255];
        sv4[716] = sv4[256] + sv4[566];
        sv4[717] = sv4[660] + sv4[354];
        sv4[718] = sv4[661] + sv4[355];
        sv4[719] = sv4[356] + sv4[662];
        sv4[720] = sv4[459] + sv4[153];
        sv4[721] = sv4[460] + sv4[154];
        sv4[722] = sv4[155] + sv4[461];
        sv4[723] = sv4[567] + sv4[257];
        sv4[724] = sv4[568] + sv4[258];
        sv4[725] = sv4[259] + sv4[569];
        sv4[726] = sv4[663] + sv4[357];
        sv4[727] = sv4[664] + sv4[358];
        sv4[728] = sv4[359] + sv4[665];
        sv4[729] = sv4[462] + sv4[156];
        sv4[730] = sv4[463] + sv4[157];
        sv4[731] = sv4[158] + sv4[464];
        sv4[732] = sv4[570] + sv4[260];
        sv4[733] = sv4[571] + sv4[261];
        sv4[734] = sv4[262] + sv4[572];
        sv4[735] = sv4[666] + sv4[360];
        sv4[736] = sv4[667] + sv4[361];
        sv4[737] = sv4[362] + sv4[668];
        sv4[738] = sv4[465] + sv4[159];
        sv4[739] = sv4[466] + sv4[160];
        sv4[740] = sv4[161] + sv4[467];
        sv4[741] = sv4[573] + sv4[263];
        sv4[742] = sv4[574] + sv4[264];
        sv4[743] = sv4[265] + sv4[575];
        sv4[744] = sv4[669] + sv4[363];
        sv4[745] = sv4[670] + sv4[364];
        sv4[746] = sv4[365] + sv4[671];
        sv4[747] = sv4[468] + sv4[162];
        sv4[748] = sv4[469] + sv4[163];
        sv4[749] = sv4[164] + sv4[470];
        sv4[750] = sv4[576] + sv4[266];
        sv4[751] = sv4[577] + sv4[267];
        sv4[752] = sv4[268] + sv4[578];
        sv4[753] = sv4[672] + sv4[366];
        sv4[754] = sv4[673] + sv4[367];
        sv4[755] = sv4[368] + sv4[674];
        sv4[756] = sv4[28] * sp[568];
        sv4[757] = sv4[29] * sp[568];
        sv4[758] = sv4[30] * sp[568];
        sv4[759] = sv4[34] * sp[584];
        sv4[760] = sv4[34] * sp[585];
        sv4[761] = sv4[34] * sp[586];
        sv4[762] = sv4[34] * sp[587];
        sv4[763] = sv4[34] * sp[588];
        sv4[764] = sv4[34] * sp[589];
        sv4[765] = sv4[34] * sp[590];
        sv4[766] = sv4[34] * sp[591];
        sv4[767] = sv4[34] * sp[592];
        sv4[768] = sv4[756] + sv4[762];
        sv4[769] = sv4[757] + sv4[763];
        sv4[770] = sv4[758] + sv4[764];
        sv4[771] = sv4[0] * sp[596];
        sv4[772] = sv4[1] * sp[596];
        sv4[773] = sv4[2] * sp[596];
        sv4[774] = sv4[3] * sp[596];
        sv4[775] = sv4[4] * sp[596];
        sv4[776] = sv4[5] * sp[596];
        sv4[777] = sv4[12] * sp[624];
        sv4[778] = sv4[12] * sp[625];
        sv4[779] = sv4[12] * sp[626];
        sv4[780] = sv4[12] * sp[627];
        sv4[781] = sv4[12] * sp[628];
        sv4[782] = sv4[12] * sp[629];
        sv4[783] = sv4[12] * sp[630];
        sv4[784] = sv4[12] * sp[631];
        sv4[785] = sv4[12] * sp[632];
        sv4[786] = sv4[771] + sv4[777];
        sv4[787] = sv4[772] + sv4[778];
        sv4[788] = sv4[773] + sv4[779];
        sv4[789] = sv4[774] + sv4[780];
        sv4[790] = sv4[775] + sv4[781];
        sv4[791] = sv4[776] + sv4[782];
        sv4[792] = sv4[786] + sv4[759];
        sv4[793] = sv4[787] + sv4[760];
        sv4[794] = sv4[788] + sv4[761];
        sv4[795] = sv4[789] + sv4[768];
        sv4[796] = sv4[790] + sv4[769];
        sv4[797] = sv4[791] + sv4[770];
        sv4[798] = sv4[765] + sv4[783];
        sv4[799] = sv4[766] + sv4[784];
        sv4[800] = sv4[767] + sv4[785];
        sv4[801] = sv4[56] * sp[636];
        sv4[802] = sv4[57] * sp[636];
        sv4[803] = sv4[58] * sp[636];
        sv4[804] = sv4[0] * sp[636];
        sv4[805] = sv4[1] * sp[636];
        sv4[806] = sv4[2] * sp[636];
        sv4[807] = sv4[65] * sp[658];
        sv4[808] = sv4[65] * sp[659];
        sv4[809] = sv4[65] * sp[660];
        sv4[810] = sv4[65] * sp[661];
        sv4[811] = sv4[65] * sp[662];
        sv4[812] = sv4[65] * sp[663];
        sv4[813] = sv4[65] * sp[664];
        sv4[814] = sv4[65] * sp[665];
        sv4[815] = sv4[65] * sp[666];
        sv4[816] = sv4[801] + sv4[810];
        sv4[817] = sv4[802] + sv4[811];
        sv4[818] = sv4[803] + sv4[812];
        sv4[819] = sv4[804] + sv4[813];
        sv4[820] = sv4[805] + sv4[814];
        sv4[821] = sv4[806] + sv4[815];
        sv4[822] = sv4[792] + sv4[807];
        sv4[823] = sv4[793] + sv4[808];
        sv4[824] = sv4[794] + sv4[809];
        sv4[825] = sv4[795] + sv4[816];
        sv4[826] = sv4[796] + sv4[817];
        sv4[827] = sv4[797] + sv4[818];
        sv4[828] = sv4[798] + sv4[819];
        sv4[829] = sv4[799] + sv4[820];
        sv4[830] = sv4[800] + sv4[821];
        sv4[831] = sv4[822] * sp[40];
        sv4[832] = sv4[822] * sp[45];
        sv4[833] = sv4[822] * sp[51];
        sv4[834] = sv4[823] * sp[40];
        sv4[835] = sv4[823] * sp[45];
        sv4[836] = sv4[823] * sp[51];
        sv4[837] = sv4[824] * sp[40];
        sv4[838] = sv4[824] * sp[45];
        sv4[839] = sv4[824] * sp[51];
        sv4[840] = sv4[825] * sp[40];
        sv4[841] = sv4[825] * sp[45];
        sv4[842] = sv4[825] * sp[51];
        sv4[843] = sv4[826] * sp[40];
        sv4[844] = sv4[826] * sp[45];
        sv4[845] = sv4[826] * sp[51];
        sv4[846] = sv4[827] * sp[40];
        sv4[847] = sv4[827] * sp[45];
        sv4[848] = sv4[827] * sp[51];
        sv4[849] = sv4[828] * sp[40];
        sv4[850] = sv4[828] * sp[45];
        sv4[851] = sv4[828] * sp[51];
        sv4[852] = sv4[829] * sp[40];
        sv4[853] = sv4[829] * sp[45];
        sv4[854] = sv4[829] * sp[51];
        sv4[855] = sv4[830] * sp[40];
        sv4[856] = sv4[830] * sp[45];
        sv4[857] = sv4[830] * sp[51];
        sv4[858] = sv4[0] * sp[568];
        sv4[859] = sv4[1] * sp[568];
        sv4[860] = sv4[2] * sp[568];
        sv4[861] = sv4[3] * sp[568];
        sv4[862] = sv4[4] * sp[568];
        sv4[863] = sv4[5] * sp[568];
        sv4[864] = sv4[12] * sp[584];
        sv4[865] = sv4[12] * sp[585];
        sv4[866] = sv4[12] * sp[586];
        sv4[867] = sv4[12] * sp[587];
        sv4[868] = sv4[12] * sp[588];
        sv4[869] = sv4[12] * sp[589];
        sv4[870] = sv4[12] * sp[590];
        sv4[871] = sv4[12] * sp[591];
        sv4[872] = sv4[12] * sp[592];
        sv4[873] = sv4[858] + sv4[864];
        sv4[874] = sv4[859] + sv4[865];
        sv4[875] = sv4[860] + sv4[866];
        sv4[876] = sv4[861] + sv4[867];
        sv4[877] = sv4[862] + sv4[868];
        sv4[878] = sv4[863] + sv4[869];
        sv4[879] = sv4[165] * sp[596];
        sv4[880] = sv4[166] * sp[596];
        sv4[881] = sv4[167] * sp[596];
        sv4[882] = sv4[171] * sp[624];
        sv4[883] = sv4[171] * sp[625];
        sv4[884] = sv4[171] * sp[626];
        sv4[885] = sv4[171] * sp[627];
        sv4[886] = sv4[171] * sp[628];
        sv4[887] = sv4[171] * sp[629];
        sv4[888] = sv4[171] * sp[630];
        sv4[889] = sv4[171] * sp[631];
        sv4[890] = sv4[171] * sp[632];
        sv4[891] = sv4[879] + sv4[882];
        sv4[892] = sv4[880] + sv4[883];
        sv4[893] = sv4[881] + sv4[884];
        sv4[894] = sv4[873] + sv4[891];
        sv4[895] = sv4[874] + sv4[892];
        sv4[896] = sv4[875] + sv4[893];
        sv4[897] = sv4[876] + sv4[885];
        sv4[898] = sv4[877] + sv4[886];
        sv4[899] = sv4[878] + sv4[887];
        sv4[900] = sv4[870] + sv4[888];
        sv4[901] = sv4[871] + sv4[889];
        sv4[902] = sv4[872] + sv4[890];
        sv4[903] = sv4[3] * sp[636];
        sv4[904] = sv4[4] * sp[636];
        sv4[905] = sv4[5] * sp[636];
        sv4[906] = sv4[217] * sp[658];
        sv4[907] = sv4[217] * sp[659];
        sv4[908] = sv4[217] * sp[660];
        sv4[909] = sv4[217] * sp[661];
        sv4[910] = sv4[217] * sp[662];
        sv4[911] = sv4[217] * sp[663];
        sv4[912] = sv4[217] * sp[664];
        sv4[913] = sv4[217] * sp[665];
        sv4[914] = sv4[217] * sp[666];
        sv4[915] = sv4[801] + sv4[906];
        sv4[916] = sv4[802] + sv4[907];
        sv4[917] = sv4[803] + sv4[908];
        sv4[918] = sv4[903] + sv4[912];
        sv4[919] = sv4[904] + sv4[913];
        sv4[920] = sv4[905] + sv4[914];
        sv4[921] = sv4[894] + sv4[915];
        sv4[922] = sv4[895] + sv4[916];
        sv4[923] = sv4[896] + sv4[917];
        sv4[924] = sv4[897] + sv4[909];
        sv4[925] = sv4[898] + sv4[910];
        sv4[926] = sv4[899] + sv4[911];
        sv4[927] = sv4[900] + sv4[918];
        sv4[928] = sv4[901] + sv4[919];
        sv4[929] = sv4[902] + sv4[920];
        sv4[930] = sv4[921] * sp[40];
        sv4[931] = sv4[921] * sp[45];
        sv4[932] = sv4[921] * sp[51];
        sv4[933] = sv4[922] * sp[40];
        sv4[934] = sv4[922] * sp[45];
        sv4[935] = sv4[922] * sp[51];
        sv4[936] = sv4[923] * sp[40];
        sv4[937] = sv4[923] * sp[45];
        sv4[938] = sv4[923] * sp[51];
        sv4[939] = sv4[924] * sp[40];
        sv4[940] = sv4[924] * sp[45];
        sv4[941] = sv4[924] * sp[51];
        sv4[942] = sv4[925] * sp[40];
        sv4[943] = sv4[925] * sp[45];
        sv4[944] = sv4[925] * sp[51];
        sv4[945] = sv4[926] * sp[40];
        sv4[946] = sv4[926] * sp[45];
        sv4[947] = sv4[926] * sp[51];
        sv4[948] = sv4[927] * sp[40];
        sv4[949] = sv4[927] * sp[45];
        sv4[950] = sv4[927] * sp[51];
        sv4[951] = sv4[928] * sp[40];
        sv4[952] = sv4[928] * sp[45];
        sv4[953] = sv4[928] * sp[51];
        sv4[954] = sv4[929] * sp[40];
        sv4[955] = sv4[929] * sp[45];
        sv4[956] = sv4[929] * sp[51];
        sv4[957] = sv4[56] * sp[568];
        sv4[958] = sv4[57] * sp[568];
        sv4[959] = sv4[58] * sp[568];
        sv4[960] = sv4[65] * sp[584];
        sv4[961] = sv4[65] * sp[585];
        sv4[962] = sv4[65] * sp[586];
        sv4[963] = sv4[65] * sp[587];
        sv4[964] = sv4[65] * sp[588];
        sv4[965] = sv4[65] * sp[589];
        sv4[966] = sv4[65] * sp[590];
        sv4[967] = sv4[65] * sp[591];
        sv4[968] = sv4[65] * sp[592];
        sv4[969] = sv4[957] + sv4[963];
        sv4[970] = sv4[958] + sv4[964];
        sv4[971] = sv4[959] + sv4[965];
        sv4[972] = sv4[858] + sv4[966];
        sv4[973] = sv4[859] + sv4[967];
        sv4[974] = sv4[860] + sv4[968];
        sv4[975] = sv4[56] * sp[596];
        sv4[976] = sv4[57] * sp[596];
        sv4[977] = sv4[58] * sp[596];
        sv4[978] = sv4[217] * sp[624];
        sv4[979] = sv4[217] * sp[625];
        sv4[980] = sv4[217] * sp[626];
        sv4[981] = sv4[217] * sp[627];
        sv4[982] = sv4[217] * sp[628];
        sv4[983] = sv4[217] * sp[629];
        sv4[984] = sv4[217] * sp[630];
        sv4[985] = sv4[217] * sp[631];
        sv4[986] = sv4[217] * sp[632];
        sv4[987] = sv4[975] + sv4[978];
        sv4[988] = sv4[976] + sv4[979];
        sv4[989] = sv4[977] + sv4[980];
        sv4[990] = sv4[774] + sv4[984];
        sv4[991] = sv4[775] + sv4[985];
        sv4[992] = sv4[776] + sv4[986];
        sv4[993] = sv4[987] + sv4[960];
        sv4[994] = sv4[988] + sv4[961];
        sv4[995] = sv4[989] + sv4[962];
        sv4[996] = sv4[969] + sv4[981];
        sv4[997] = sv4[970] + sv4[982];
        sv4[998] = sv4[971] + sv4[983];
        sv4[999] = sv4[972] + sv4[990];
        sv4[1000] = sv4[973] + sv4[991];
        sv4[1001] = sv4[974] + sv4[992];
        sv4[1002] = sv4[314] * sp[636];
        sv4[1003] = sv4[315] * sp[636];
        sv4[1004] = sv4[316] * sp[636];
        sv4[1005] = sv4[320] * sp[658];
        sv4[1006] = sv4[320] * sp[659];
        sv4[1007] = sv4[320] * sp[660];
        sv4[1008] = sv4[320] * sp[661];
        sv4[1009] = sv4[320] * sp[662];
        sv4[1010] = sv4[320] * sp[663];
        sv4[1011] = sv4[320] * sp[664];
        sv4[1012] = sv4[320] * sp[665];
        sv4[1013] = sv4[320] * sp[666];
        sv4[1014] = sv4[1002] + sv4[1011];
        sv4[1015] = sv4[1003] + sv4[1012];
        sv4[1016] = sv4[1004] + sv4[1013];
        sv4[1017] = sv4[993] + sv4[1005];
        sv4[1018] = sv4[994] + sv4[1006];
        sv4[1019] = sv4[995] + sv4[1007];
        sv4[1020] = sv4[996] + sv4[1008];
        sv4[1021] = sv4[997] + sv4[1009];
        sv4[1022] = sv4[998] + sv4[1010];
        sv4[1023] = sv4[999] + sv4[1014];
        sv4[1024] = sv4[1000] + sv4[1015];
        sv4[1025] = sv4[1001] + sv4[1016];
        sv4[1026] = sv4[120] + sv4[1017];
        sv4[1027] = sv4[121] + sv4[1018];
        sv4[1028] = sv4[122] + sv4[1019];
        sv4[1029] = sv4[123] + sv4[1020];
        sv4[1030] = sv4[124] + sv4[1021];
        sv4[1031] = sv4[125] + sv4[1022];
        sv4[1032] = sv4[1023] + sv4[126];
        sv4[1033] = sv4[1024] + sv4[127];
        sv4[1034] = sv4[1025] + sv4[128];
        sv4[1035] = sv4[1026] * sp[40];
        sv4[1036] = sv4[1026] * sp[45];
        sv4[1037] = sv4[1026] * sp[51];
        sv4[1038] = sv4[1027] * sp[40];
        sv4[1039] = sv4[1027] * sp[45];
        sv4[1040] = sv4[1027] * sp[51];
        sv4[1041] = sv4[1028] * sp[40];
        sv4[1042] = sv4[1028] * sp[45];
        sv4[1043] = sv4[1028] * sp[51];
        sv4[1044] = sv4[1029] * sp[40];
        sv4[1045] = sv4[1029] * sp[45];
        sv4[1046] = sv4[1029] * sp[51];
        sv4[1047] = sv4[1030] * sp[40];
        sv4[1048] = sv4[1030] * sp[45];
        sv4[1049] = sv4[1030] * sp[51];
        sv4[1050] = sv4[1031] * sp[40];
        sv4[1051] = sv4[1031] * sp[45];
        sv4[1052] = sv4[1031] * sp[51];
        sv4[1053] = sv4[1032] * sp[40];
        sv4[1054] = sv4[1032] * sp[45];
        sv4[1055] = sv4[1032] * sp[51];
        sv4[1056] = sv4[1033] * sp[40];
        sv4[1057] = sv4[1033] * sp[45];
        sv4[1058] = sv4[1033] * sp[51];
        sv4[1059] = sv4[1034] * sp[40];
        sv4[1060] = sv4[1034] * sp[45];
        sv4[1061] = sv4[1034] * sp[51];
        sv4[1062] = sv4[675] + sv4[831];
        sv4[1063] = sv4[676] + sv4[832];
        sv4[1064] = sv4[677] + sv4[833];
        sv4[1065] = sv4[678] + sv4[930];
        sv4[1066] = sv4[679] + sv4[931];
        sv4[1067] = sv4[680] + sv4[932];
        sv4[1068] = sv4[681] + sv4[1035];
        sv4[1069] = sv4[682] + sv4[1036];
        sv4[1070] = sv4[683] + sv4[1037];
        sv4[1071] = sv4[684] + sv4[834];
        sv4[1072] = sv4[685] + sv4[835];
        sv4[1073] = sv4[686] + sv4[836];
        sv4[1074] = sv4[687] + sv4[933];
        sv4[1075] = sv4[688] + sv4[934];
        sv4[1076] = sv4[689] + sv4[935];
        sv4[1077] = sv4[690] + sv4[1038];
        sv4[1078] = sv4[691] + sv4[1039];
        sv4[1079] = sv4[692] + sv4[1040];
        sv4[1080] = sv4[693] + sv4[837];
        sv4[1081] = sv4[694] + sv4[838];
        sv4[1082] = sv4[695] + sv4[839];
        sv4[1083] = sv4[696] + sv4[936];
        sv4[1084] = sv4[697] + sv4[937];
        sv4[1085] = sv4[698] + sv4[938];
        sv4[1086] = sv4[699] + sv4[1041];
        sv4[1087] = sv4[700] + sv4[1042];
        sv4[1088] = sv4[701] + sv4[1043];
        sv4[1089] = sv4[702] + sv4[840];
        sv4[1090] = sv4[703] + sv4[841];
        sv4[1091] = sv4[704] + sv4[842];
        sv4[1092] = sv4[705] + sv4[939];
        sv4[1093] = sv4[706] + sv4[940];
        sv4[1094] = sv4[707] + sv4[941];
        sv4[1095] = sv4[708] + sv4[1044];
        sv4[1096] = sv4[709] + sv4[1045];
        sv4[1097] = sv4[710] + sv4[1046];
        sv4[1098] = sv4[711] + sv4[843];
        sv4[1099] = sv4[712] + sv4[844];
        sv4[1100] = sv4[713] + sv4[845];
        sv4[1101] = sv4[714] + sv4[942];
        sv4[1102] = sv4[715] + sv4[943];
        sv4[1103] = sv4[716] + sv4[944];
        sv4[1104] = sv4[717] + sv4[1047];
        sv4[1105] = sv4[718] + sv4[1048];
        sv4[1106] = sv4[719] + sv4[1049];
        sv4[1107] = sv4[720] + sv4[846];
        sv4[1108] = sv4[721] + sv4[847];
        sv4[1109] = sv4[722] + sv4[848];
        sv4[1110] = sv4[723] + sv4[945];
        sv4[1111] = sv4[724] + sv4[946];
        sv4[1112] = sv4[725] + sv4[947];
        sv4[1113] = sv4[726] + sv4[1050];
        sv4[1114] = sv4[727] + sv4[1051];
        sv4[1115] = sv4[728] + sv4[1052];
        sv4[1116] = sv4[729] + sv4[849];
        sv4[1117] = sv4[730] + sv4[850];
        sv4[1118] = sv4[731] + sv4[851];
        sv4[1119] = sv4[732] + sv4[948];
        sv4[1120] = sv4[733] + sv4[949];
        sv4[1121] = sv4[734] + sv4[950];
        sv4[1122] = sv4[735] + sv4[1053];
        sv4[1123] = sv4[736] + sv4[1054];
        sv4[1124] = sv4[737] + sv4[1055];
        sv4[1125] = sv4[738] + sv4[852];
        sv4[1126] = sv4[739] + sv4[853];
        sv4[1127] = sv4[740] + sv4[854];
        sv4[1128] = sv4[741] + sv4[951];
        sv4[1129] = sv4[742] + sv4[952];
        sv4[1130] = sv4[743] + sv4[953];
        sv4[1131] = sv4[744] + sv4[1056];
        sv4[1132] = sv4[745] + sv4[1057];
        sv4[1133] = sv4[746] + sv4[1058];
        sv4[1134] = sv4[747] + sv4[855];
        sv4[1135] = sv4[748] + sv4[856];
        sv4[1136] = sv4[749] + sv4[857];
        sv4[1137] = sv4[750] + sv4[954];
        sv4[1138] = sv4[751] + sv4[955];
        sv4[1139] = sv4[752] + sv4[956];
        sv4[1140] = sv4[753] + sv4[1059];
        sv4[1141] = sv4[754] + sv4[1060];
        sv4[1142] = sv4[755] + sv4[1061];
        sv4[1143] = sv4[1062] * sp[668];
        sv4[1144] = sv4[1063] * sp[668];
        sv4[1145] = sv4[1064] * sp[668];
        sv4[1146] = sv4[1065] * sp[668];
        sv4[1147] = sv4[1066] * sp[668];
        sv4[1148] = sv4[1067] * sp[668];
        sv4[1149] = sv4[1068] * sp[668];
        sv4[1150] = sv4[1069] * sp[668];
        sv4[1151] = sv4[1070] * sp[668];
        sv4[1152] = sv4[1071] * sp[668];
        sv4[1153] = sv4[1072] * sp[668];
        sv4[1154] = sv4[1073] * sp[668];
        sv4[1155] = sv4[1074] * sp[668];
        sv4[1156] = sv4[1075] * sp[668];
        sv4[1157] = sv4[1076] * sp[668];
        sv4[1158] = sv4[1077] * sp[668];
        sv4[1159] = sv4[1078] * sp[668];
        sv4[1160] = sv4[1079] * sp[668];
        sv4[1161] = sv4[1080] * sp[668];
        sv4[1162] = sv4[1081] * sp[668];
        sv4[1163] = sv4[1082] * sp[668];
        sv4[1164] = sv4[1083] * sp[668];
        sv4[1165] = sv4[1084] * sp[668];
        sv4[1166] = sv4[1085] * sp[668];
        sv4[1167] = sv4[1086] * sp[668];
        sv4[1168] = sv4[1087] * sp[668];
        sv4[1169] = sv4[1088] * sp[668];
        sv4[1170] = sv4[1089] * sp[668];
        sv4[1171] = sv4[1090] * sp[668];
        sv4[1172] = sv4[1091] * sp[668];
        sv4[1173] = sv4[1092] * sp[668];
        sv4[1174] = sv4[1093] * sp[668];
        sv4[1175] = sv4[1094] * sp[668];
        sv4[1176] = sv4[1095] * sp[668];
        sv4[1177] = sv4[1096] * sp[668];
        sv4[1178] = sv4[1097] * sp[668];
        sv4[1179] = sv4[1098] * sp[668];
        sv4[1180] = sv4[1099] * sp[668];
        sv4[1181] = sv4[1100] * sp[668];
        sv4[1182] = sv4[1101] * sp[668];
        sv4[1183] = sv4[1102] * sp[668];
        sv4[1184] = sv4[1103] * sp[668];
        sv4[1185] = sv4[1104] * sp[668];
        sv4[1186] = sv4[1105] * sp[668];
        sv4[1187] = sv4[1106] * sp[668];
        sv4[1188] = sv4[1107] * sp[668];
        sv4[1189] = sv4[1108] * sp[668];
        sv4[1190] = sv4[1109] * sp[668];
        sv4[1191] = sv4[1110] * sp[668];
        sv4[1192] = sv4[1111] * sp[668];
        sv4[1193] = sv4[1112] * sp[668];
        sv4[1194] = sv4[1113] * sp[668];
        sv4[1195] = sv4[1114] * sp[668];
        sv4[1196] = sv4[1115] * sp[668];
        sv4[1197] = sv4[1116] * sp[668];
        sv4[1198] = sv4[1117] * sp[668];
        sv4[1199] = sv4[1118] * sp[668];
        sv4[1200] = sv4[1119] * sp[668];
        sv4[1201] = sv4[1120] * sp[668];
        sv4[1202] = sv4[1121] * sp[668];
        sv4[1203] = sv4[1122] * sp[668];
        sv4[1204] = sv4[1123] * sp[668];
        sv4[1205] = sv4[1124] * sp[668];
        sv4[1206] = sv4[1125] * sp[668];
        sv4[1207] = sv4[1126] * sp[668];
        sv4[1208] = sv4[1127] * sp[668];
        sv4[1209] = sv4[1128] * sp[668];
        sv4[1210] = sv4[1129] * sp[668];
        sv4[1211] = sv4[1130] * sp[668];
        sv4[1212] = sv4[1131] * sp[668];
        sv4[1213] = sv4[1132] * sp[668];
        sv4[1214] = sv4[1133] * sp[668];
        sv4[1215] = sv4[1134] * sp[668];
        sv4[1216] = sv4[1135] * sp[668];
        sv4[1217] = sv4[1136] * sp[668];
        sv4[1218] = sv4[1137] * sp[668];
        sv4[1219] = sv4[1138] * sp[668];
        sv4[1220] = sv4[1139] * sp[668];
        sv4[1221] = sv4[1140] * sp[668];
        sv4[1222] = sv4[1141] * sp[668];
        sv4[1223] = sv4[1142] * sp[668];
        const double fw0 = sv4[1170] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP0[j] += fw0 * FE32_C0_D001_Q4[0][0][j];
        const double fw1 = sv4[1179] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP1[j] += fw1 * FE32_C0_D001_Q4[0][0][j];
        const double fw2 = sv4[1188] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP2[j] += fw2 * FE32_C0_D001_Q4[0][0][j];
        const double fw3 = sv4[1143] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP3[j] += fw3 * FE32_C0_D001_Q4[0][0][j];
        const double fw4 = sv4[1152] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP4[j] += fw4 * FE32_C0_D001_Q4[0][0][j];
        const double fw5 = sv4[1161] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP5[j] += fw5 * FE32_C0_D001_Q4[0][0][j];
        const double fw6 = sv4[1197] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP6[j] += fw6 * FE32_C0_D001_Q4[0][0][j];
        const double fw7 = sv4[1206] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP7[j] += fw7 * FE32_C0_D001_Q4[0][0][j];
        const double fw8 = sv4[1215] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP8[j] += fw8 * FE32_C0_D001_Q4[0][0][j];
        const double fw9 = sv4[1171] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP9[j] += fw9 * FE32_C0_D001_Q4[0][0][j];
        const double fw10 = sv4[1180] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP10[j] += fw10 * FE32_C0_D001_Q4[0][0][j];
        const double fw11 = sv4[1189] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP11[j] += fw11 * FE32_C0_D001_Q4[0][0][j];
        const double fw12 = sv4[1144] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP12[j] += fw12 * FE32_C0_D001_Q4[0][0][j];
        const double fw13 = sv4[1153] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP13[j] += fw13 * FE32_C0_D001_Q4[0][0][j];
        const double fw14 = sv4[1162] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP14[j] += fw14 * FE32_C0_D001_Q4[0][0][j];
        const double fw15 = sv4[1198] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP15[j] += fw15 * FE32_C0_D001_Q4[0][0][j];
        const double fw16 = sv4[1207] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP16[j] += fw16 * FE32_C0_D001_Q4[0][0][j];
        const double fw17 = sv4[1216] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP17[j] += fw17 * FE32_C0_D001_Q4[0][0][j];
        const double fw18 = sv4[1172] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP18[j] += fw18 * FE32_C0_D001_Q4[0][0][j];
        const double fw19 = sv4[1181] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP19[j] += fw19 * FE32_C0_D001_Q4[0][0][j];
        const double fw20 = sv4[1190] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP20[j] += fw20 * FE32_C0_D001_Q4[0][0][j];
        const double fw21 = sv4[1145] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP21[j] += fw21 * FE32_C0_D001_Q4[0][0][j];
        const double fw22 = sv4[1154] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP22[j] += fw22 * FE32_C0_D001_Q4[0][0][j];
        const double fw23 = sv4[1163] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP23[j] += fw23 * FE32_C0_D001_Q4[0][0][j];
        const double fw24 = sv4[1199] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP24[j] += fw24 * FE32_C0_D001_Q4[0][0][j];
        const double fw25 = sv4[1208] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP25[j] += fw25 * FE32_C0_D001_Q4[0][0][j];
        const double fw26 = sv4[1217] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP26[j] += fw26 * FE32_C0_D001_Q4[0][0][j];
        const double fw27 = sv4[1173] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP27[j] += fw27 * FE32_C0_D001_Q4[0][0][j];
        const double fw28 = sv4[1182] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP28[j] += fw28 * FE32_C0_D001_Q4[0][0][j];
        const double fw29 = sv4[1191] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP29[j] += fw29 * FE32_C0_D001_Q4[0][0][j];
        const double fw30 = sv4[1146] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP30[j] += fw30 * FE32_C0_D001_Q4[0][0][j];
        const double fw31 = sv4[1155] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP31[j] += fw31 * FE32_C0_D001_Q4[0][0][j];
        const double fw32 = sv4[1164] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP32[j] += fw32 * FE32_C0_D001_Q4[0][0][j];
        const double fw33 = sv4[1200] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP33[j] += fw33 * FE32_C0_D001_Q4[0][0][j];
        const double fw34 = sv4[1209] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP34[j] += fw34 * FE32_C0_D001_Q4[0][0][j];
        const double fw35 = sv4[1218] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP35[j] += fw35 * FE32_C0_D001_Q4[0][0][j];
        const double fw36 = sv4[1174] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP36[j] += fw36 * FE32_C0_D001_Q4[0][0][j];
        const double fw37 = sv4[1183] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP37[j] += fw37 * FE32_C0_D001_Q4[0][0][j];
        const double fw38 = sv4[1192] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP38[j] += fw38 * FE32_C0_D001_Q4[0][0][j];
        const double fw39 = sv4[1147] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP39[j] += fw39 * FE32_C0_D001_Q4[0][0][j];
        const double fw40 = sv4[1156] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP40[j] += fw40 * FE32_C0_D001_Q4[0][0][j];
        const double fw41 = sv4[1165] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP41[j] += fw41 * FE32_C0_D001_Q4[0][0][j];
        const double fw42 = sv4[1201] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP42[j] += fw42 * FE32_C0_D001_Q4[0][0][j];
        const double fw43 = sv4[1210] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP43[j] += fw43 * FE32_C0_D001_Q4[0][0][j];
        const double fw44 = sv4[1219] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP44[j] += fw44 * FE32_C0_D001_Q4[0][0][j];
        const double fw45 = sv4[1175] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP45[j] += fw45 * FE32_C0_D001_Q4[0][0][j];
        const double fw46 = sv4[1184] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP46[j] += fw46 * FE32_C0_D001_Q4[0][0][j];
        const double fw47 = sv4[1193] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP47[j] += fw47 * FE32_C0_D001_Q4[0][0][j];
        const double fw48 = sv4[1148] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP48[j] += fw48 * FE32_C0_D001_Q4[0][0][j];
        const double fw49 = sv4[1157] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP49[j] += fw49 * FE32_C0_D001_Q4[0][0][j];
        const double fw50 = sv4[1166] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP50[j] += fw50 * FE32_C0_D001_Q4[0][0][j];
        const double fw51 = sv4[1202] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP51[j] += fw51 * FE32_C0_D001_Q4[0][0][j];
        const double fw52 = sv4[1211] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP52[j] += fw52 * FE32_C0_D001_Q4[0][0][j];
        const double fw53 = sv4[1220] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP53[j] += fw53 * FE32_C0_D001_Q4[0][0][j];
        const double fw54 = sv4[1176] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP54[j] += fw54 * FE32_C0_D001_Q4[0][0][j];
        const double fw55 = sv4[1185] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP55[j] += fw55 * FE32_C0_D001_Q4[0][0][j];
        const double fw56 = sv4[1194] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP56[j] += fw56 * FE32_C0_D001_Q4[0][0][j];
        const double fw57 = sv4[1149] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP57[j] += fw57 * FE32_C0_D001_Q4[0][0][j];
        const double fw58 = sv4[1158] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP58[j] += fw58 * FE32_C0_D001_Q4[0][0][j];
        const double fw59 = sv4[1167] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP59[j] += fw59 * FE32_C0_D001_Q4[0][0][j];
        const double fw60 = sv4[1203] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP60[j] += fw60 * FE32_C0_D001_Q4[0][0][j];
        const double fw61 = sv4[1212] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP61[j] += fw61 * FE32_C0_D001_Q4[0][0][j];
        const double fw62 = sv4[1221] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP62[j] += fw62 * FE32_C0_D001_Q4[0][0][j];
        const double fw63 = sv4[1177] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP63[j] += fw63 * FE32_C0_D001_Q4[0][0][j];
        const double fw64 = sv4[1186] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP64[j] += fw64 * FE32_C0_D001_Q4[0][0][j];
        const double fw65 = sv4[1195] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP65[j] += fw65 * FE32_C0_D001_Q4[0][0][j];
        const double fw66 = sv4[1150] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP66[j] += fw66 * FE32_C0_D001_Q4[0][0][j];
        const double fw67 = sv4[1159] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP67[j] += fw67 * FE32_C0_D001_Q4[0][0][j];
        const double fw68 = sv4[1168] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP68[j] += fw68 * FE32_C0_D001_Q4[0][0][j];
        const double fw69 = sv4[1204] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP69[j] += fw69 * FE32_C0_D001_Q4[0][0][j];
        const double fw70 = sv4[1213] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP70[j] += fw70 * FE32_C0_D001_Q4[0][0][j];
        const double fw71 = sv4[1222] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP71[j] += fw71 * FE32_C0_D001_Q4[0][0][j];
        const double fw72 = sv4[1178] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP72[j] += fw72 * FE32_C0_D001_Q4[0][0][j];
        const double fw73 = sv4[1187] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP73[j] += fw73 * FE32_C0_D001_Q4[0][0][j];
        const double fw74 = sv4[1196] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP74[j] += fw74 * FE32_C0_D001_Q4[0][0][j];
        const double fw75 = sv4[1151] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP75[j] += fw75 * FE32_C0_D001_Q4[0][0][j];
        const double fw76 = sv4[1160] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP76[j] += fw76 * FE32_C0_D001_Q4[0][0][j];
        const double fw77 = sv4[1169] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP77[j] += fw77 * FE32_C0_D001_Q4[0][0][j];
        const double fw78 = sv4[1205] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP78[j] += fw78 * FE32_C0_D001_Q4[0][0][j];
        const double fw79 = sv4[1214] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP79[j] += fw79 * FE32_C0_D001_Q4[0][0][j];
        const double fw80 = sv4[1223] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP80[j] += fw80 * FE32_C0_D001_Q4[0][0][j];
    }
    A[0] = 0.01666666666666656 * sp[669];
    A[1] = 0.008333333333333293 * sp[669];
    A[2] = 0.008333333333333299 * sp[669];
    A[3] = 0.008333333333333297 * sp[669];
    std::fill(&A[4], &A[20], 0.0);
    A[20] = 0.008333333333333293 * sp[669];
    A[21] = 0.0166666666666667 * sp[669];
    A[22] = 0.008333333333333373 * sp[669];
    A[23] = 0.008333333333333371 * sp[669];
    std::fill(&A[24], &A[40], 0.0);
    A[40] = 0.008333333333333299 * sp[669];
    A[41] = 0.008333333333333373 * sp[669];
    A[42] = 0.01666666666666671 * sp[669];
    A[43] = 0.008333333333333373 * sp[669];
    std::fill(&A[44], &A[60], 0.0);
    A[60] = 0.008333333333333297 * sp[669];
    A[61] = 0.008333333333333371 * sp[669];
    A[62] = 0.008333333333333373 * sp[669];
    A[63] = 0.01666666666666671 * sp[669];
    std::fill(&A[64], &A[84], 0.0);
    A[84] = 0.01666666666666656 * sp[669];
    A[85] = 0.008333333333333293 * sp[669];
    A[86] = 0.008333333333333299 * sp[669];
    A[87] = 0.008333333333333297 * sp[669];
    std::fill(&A[88], &A[104], 0.0);
    A[104] = 0.008333333333333293 * sp[669];
    A[105] = 0.0166666666666667 * sp[669];
    A[106] = 0.008333333333333373 * sp[669];
    A[107] = 0.008333333333333371 * sp[669];
    std::fill(&A[108], &A[124], 0.0);
    A[124] = 0.008333333333333299 * sp[669];
    A[125] = 0.008333333333333373 * sp[669];
    A[126] = 0.01666666666666671 * sp[669];
    A[127] = 0.008333333333333373 * sp[669];
    std::fill(&A[128], &A[144], 0.0);
    A[144] = 0.008333333333333297 * sp[669];
    A[145] = 0.008333333333333371 * sp[669];
    A[146] = 0.008333333333333373 * sp[669];
    A[147] = 0.01666666666666671 * sp[669];
    std::fill(&A[148], &A[168], 0.0);
    A[168] = 0.01666666666666656 * sp[669];
    A[169] = 0.008333333333333293 * sp[669];
    A[170] = 0.008333333333333299 * sp[669];
    A[171] = 0.008333333333333297 * sp[669];
    std::fill(&A[172], &A[188], 0.0);
    A[188] = 0.008333333333333293 * sp[669];
    A[189] = 0.0166666666666667 * sp[669];
    A[190] = 0.008333333333333373 * sp[669];
    A[191] = 0.008333333333333371 * sp[669];
    std::fill(&A[192], &A[208], 0.0);
    A[208] = 0.008333333333333299 * sp[669];
    A[209] = 0.008333333333333373 * sp[669];
    A[210] = 0.01666666666666671 * sp[669];
    A[211] = 0.008333333333333373 * sp[669];
    std::fill(&A[212], &A[228], 0.0);
    A[228] = 0.008333333333333297 * sp[669];
    A[229] = 0.008333333333333371 * sp[669];
    A[230] = 0.008333333333333373 * sp[669];
    A[231] = 0.01666666666666671 * sp[669];
    std::fill(&A[232], &A[400], 0.0);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + j] += FE32_C0_D001_Q4[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM0[j]] += FE32_C0_D001_Q4[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM1[j]] += FE32_C0_D001_Q4[0][0][i] * TP2[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + (j + 4)] += FE32_C0_D001_Q4[0][0][i] * TP3[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM2[j]] += FE32_C0_D001_Q4[0][0][i] * TP4[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM3[j]] += FE32_C0_D001_Q4[0][0][i] * TP5[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + (j + 8)] += FE32_C0_D001_Q4[0][0][i] * TP6[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM4[j]] += FE32_C0_D001_Q4[0][0][i] * TP7[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * i + DM5[j]] += FE32_C0_D001_Q4[0][0][i] * TP8[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + j] += FE32_C0_D001_Q4[0][0][i] * TP9[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + DM0[j]] += FE32_C0_D001_Q4[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + DM1[j]] += FE32_C0_D001_Q4[0][0][i] * TP11[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + (j + 4)] += FE32_C0_D001_Q4[0][0][i] * TP12[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + DM2[j]] += FE32_C0_D001_Q4[0][0][i] * TP13[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + DM3[j]] += FE32_C0_D001_Q4[0][0][i] * TP14[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + (j + 8)] += FE32_C0_D001_Q4[0][0][i] * TP15[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + DM4[j]] += FE32_C0_D001_Q4[0][0][i] * TP16[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM0[i] + DM5[j]] += FE32_C0_D001_Q4[0][0][i] * TP17[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + j] += FE32_C0_D001_Q4[0][0][i] * TP18[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + DM0[j]] += FE32_C0_D001_Q4[0][0][i] * TP19[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + DM1[j]] += FE32_C0_D001_Q4[0][0][i] * TP20[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + (j + 4)] += FE32_C0_D001_Q4[0][0][i] * TP21[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + DM2[j]] += FE32_C0_D001_Q4[0][0][i] * TP22[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + DM3[j]] += FE32_C0_D001_Q4[0][0][i] * TP23[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + (j + 8)] += FE32_C0_D001_Q4[0][0][i] * TP24[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + DM4[j]] += FE32_C0_D001_Q4[0][0][i] * TP25[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM1[i] + DM5[j]] += FE32_C0_D001_Q4[0][0][i] * TP26[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + j] += FE32_C0_D001_Q4[0][0][i] * TP27[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM0[j]] += FE32_C0_D001_Q4[0][0][i] * TP28[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM1[j]] += FE32_C0_D001_Q4[0][0][i] * TP29[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + (j + 4)] += FE32_C0_D001_Q4[0][0][i] * TP30[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM2[j]] += FE32_C0_D001_Q4[0][0][i] * TP31[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM3[j]] += FE32_C0_D001_Q4[0][0][i] * TP32[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + (j + 8)] += FE32_C0_D001_Q4[0][0][i] * TP33[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM4[j]] += FE32_C0_D001_Q4[0][0][i] * TP34[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 4) + DM5[j]] += FE32_C0_D001_Q4[0][0][i] * TP35[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + j] += FE32_C0_D001_Q4[0][0][i] * TP36[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + DM0[j]] += FE32_C0_D001_Q4[0][0][i] * TP37[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + DM1[j]] += FE32_C0_D001_Q4[0][0][i] * TP38[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + (j + 4)] += FE32_C0_D001_Q4[0][0][i] * TP39[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + DM2[j]] += FE32_C0_D001_Q4[0][0][i] * TP40[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + DM3[j]] += FE32_C0_D001_Q4[0][0][i] * TP41[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + (j + 8)] += FE32_C0_D001_Q4[0][0][i] * TP42[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + DM4[j]] += FE32_C0_D001_Q4[0][0][i] * TP43[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM2[i] + DM5[j]] += FE32_C0_D001_Q4[0][0][i] * TP44[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + j] += FE32_C0_D001_Q4[0][0][i] * TP45[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + DM0[j]] += FE32_C0_D001_Q4[0][0][i] * TP46[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + DM1[j]] += FE32_C0_D001_Q4[0][0][i] * TP47[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + (j + 4)] += FE32_C0_D001_Q4[0][0][i] * TP48[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + DM2[j]] += FE32_C0_D001_Q4[0][0][i] * TP49[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + DM3[j]] += FE32_C0_D001_Q4[0][0][i] * TP50[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + (j + 8)] += FE32_C0_D001_Q4[0][0][i] * TP51[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + DM4[j]] += FE32_C0_D001_Q4[0][0][i] * TP52[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM3[i] + DM5[j]] += FE32_C0_D001_Q4[0][0][i] * TP53[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + j] += FE32_C0_D001_Q4[0][0][i] * TP54[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM0[j]] += FE32_C0_D001_Q4[0][0][i] * TP55[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM1[j]] += FE32_C0_D001_Q4[0][0][i] * TP56[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + (j + 4)] += FE32_C0_D001_Q4[0][0][i] * TP57[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM2[j]] += FE32_C0_D001_Q4[0][0][i] * TP58[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM3[j]] += FE32_C0_D001_Q4[0][0][i] * TP59[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + (j + 8)] += FE32_C0_D001_Q4[0][0][i] * TP60[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM4[j]] += FE32_C0_D001_Q4[0][0][i] * TP61[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * (i + 8) + DM5[j]] += FE32_C0_D001_Q4[0][0][i] * TP62[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + j] += FE32_C0_D001_Q4[0][0][i] * TP63[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + DM0[j]] += FE32_C0_D001_Q4[0][0][i] * TP64[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + DM1[j]] += FE32_C0_D001_Q4[0][0][i] * TP65[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + (j + 4)] += FE32_C0_D001_Q4[0][0][i] * TP66[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + DM2[j]] += FE32_C0_D001_Q4[0][0][i] * TP67[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + DM3[j]] += FE32_C0_D001_Q4[0][0][i] * TP68[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + (j + 8)] += FE32_C0_D001_Q4[0][0][i] * TP69[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + DM4[j]] += FE32_C0_D001_Q4[0][0][i] * TP70[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM4[i] + DM5[j]] += FE32_C0_D001_Q4[0][0][i] * TP71[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + j] += FE32_C0_D001_Q4[0][0][i] * TP72[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + DM0[j]] += FE32_C0_D001_Q4[0][0][i] * TP73[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + DM1[j]] += FE32_C0_D001_Q4[0][0][i] * TP74[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + (j + 4)] += FE32_C0_D001_Q4[0][0][i] * TP75[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + DM2[j]] += FE32_C0_D001_Q4[0][0][i] * TP76[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + DM3[j]] += FE32_C0_D001_Q4[0][0][i] * TP77[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + (j + 8)] += FE32_C0_D001_Q4[0][0][i] * TP78[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + DM4[j]] += FE32_C0_D001_Q4[0][0][i] * TP79[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[20 * DM5[i] + DM5[j]] += FE32_C0_D001_Q4[0][0][i] * TP80[j];
  }

};


class linearelastic3dp1p1_form_0: public ufc::form
{
public:

  linearelastic3dp1p1_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "feb83bebf66dcd211f7d6b56caf90c8fa98cde244b4c3d48380b3eaadcbba35ead1a4684725b61454ab988215146f21c0395dbb99f50295e8c5b8f68ade7784c";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 7;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6});
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new linearelastic3dp1p1_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new linearelastic3dp1p1_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return nullptr;
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_finite_element_2();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_finite_element_2();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_finite_element_1();
        break;
      }
    case 3:
      {
        return new linearelastic3dp1p1_finite_element_1();
        break;
      }
    case 4:
      {
        return new linearelastic3dp1p1_finite_element_3();
        break;
      }
    case 5:
      {
        return new linearelastic3dp1p1_finite_element_3();
        break;
      }
    case 6:
      {
        return new linearelastic3dp1p1_finite_element_4();
        break;
      }
    case 7:
      {
        return new linearelastic3dp1p1_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_dofmap_2();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_dofmap_2();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_dofmap_1();
        break;
      }
    case 3:
      {
        return new linearelastic3dp1p1_dofmap_1();
        break;
      }
    case 4:
      {
        return new linearelastic3dp1p1_dofmap_3();
        break;
      }
    case 5:
      {
        return new linearelastic3dp1p1_dofmap_3();
        break;
      }
    case 6:
      {
        return new linearelastic3dp1p1_dofmap_4();
        break;
      }
    case 7:
      {
        return new linearelastic3dp1p1_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 211;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 210:
      {
        return new linearelastic3dp1p1_cell_integral_0_210();
        break;
      }
    }
    
    return 0;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return 0;
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return 0;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return 0;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return 0;
  }

};


class linearelastic3dp1p1_form_1: public ufc::form
{
public:

  linearelastic3dp1p1_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "c8cf9d7a03e263412a23caa98a48f8a96526dc9e1c25c9e759a97a3c3625eca9a413d81dbd3473f2a71637577bbaa81a003a8e376bc2b2bf7436f4061ecc00df";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 7;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6});
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new linearelastic3dp1p1_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new linearelastic3dp1p1_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return nullptr;
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_finite_element_2();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_finite_element_2();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_finite_element_2();
        break;
      }
    case 3:
      {
        return new linearelastic3dp1p1_finite_element_1();
        break;
      }
    case 4:
      {
        return new linearelastic3dp1p1_finite_element_1();
        break;
      }
    case 5:
      {
        return new linearelastic3dp1p1_finite_element_3();
        break;
      }
    case 6:
      {
        return new linearelastic3dp1p1_finite_element_3();
        break;
      }
    case 7:
      {
        return new linearelastic3dp1p1_finite_element_4();
        break;
      }
    case 8:
      {
        return new linearelastic3dp1p1_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_dofmap_2();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_dofmap_2();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_dofmap_2();
        break;
      }
    case 3:
      {
        return new linearelastic3dp1p1_dofmap_1();
        break;
      }
    case 4:
      {
        return new linearelastic3dp1p1_dofmap_1();
        break;
      }
    case 5:
      {
        return new linearelastic3dp1p1_dofmap_3();
        break;
      }
    case 6:
      {
        return new linearelastic3dp1p1_dofmap_3();
        break;
      }
    case 7:
      {
        return new linearelastic3dp1p1_dofmap_4();
        break;
      }
    case 8:
      {
        return new linearelastic3dp1p1_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 211;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 210:
      {
        return new linearelastic3dp1p1_cell_integral_1_210();
        break;
      }
    }
    
    return 0;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return 0;
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return 0;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return 0;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace LinearElastic3DP1P1
{

class CoefficientSpace_dt: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_dt(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_dt(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_mu_s: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_mu_s(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_mu_s(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_nu_s: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_nu_s(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_nu_s(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_rho_S: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_rho_S(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_rho_S(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_v0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_v0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_v0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_v_p_p: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_v_p_p(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_v_p_p(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_F_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_F_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_v_p_p Form_F_FunctionSpace_1;

typedef CoefficientSpace_v0 Form_F_FunctionSpace_2;

typedef CoefficientSpace_u0 Form_F_FunctionSpace_3;

typedef CoefficientSpace_dt Form_F_FunctionSpace_4;

typedef CoefficientSpace_rho_S Form_F_FunctionSpace_5;

typedef CoefficientSpace_mu_s Form_F_FunctionSpace_6;

typedef CoefficientSpace_nu_s Form_F_FunctionSpace_7;

class Form_F: public dolfin::Form
{
public:

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 7), v_p_p(*this, 0), v0(*this, 1), u0(*this, 2), dt(*this, 3), rho_S(*this, 4), mu_s(*this, 5), nu_s(*this, 6)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const linearelastic3dp1p1_form_0>();
  }

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> rho_S, std::shared_ptr<const dolfin::GenericFunction> mu_s, std::shared_ptr<const dolfin::GenericFunction> nu_s):
    dolfin::Form(1, 7), v_p_p(*this, 0), v0(*this, 1), u0(*this, 2), dt(*this, 3), rho_S(*this, 4), mu_s(*this, 5), nu_s(*this, 6)
  {
    _function_spaces[0] = V0;

    this->v_p_p = v_p_p;
    this->v0 = v0;
    this->u0 = u0;
    this->dt = dt;
    this->rho_S = rho_S;
    this->mu_s = mu_s;
    this->nu_s = nu_s;

    _ufc_form = std::make_shared<const linearelastic3dp1p1_form_0>();
  }

  // Destructor
  ~Form_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "u0")
      return 2;
    else if (name == "dt")
      return 3;
    else if (name == "rho_S")
      return 4;
    else if (name == "mu_s")
      return 5;
    else if (name == "nu_s")
      return 6;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p_p";
    case 1:
      return "v0";
    case 2:
      return "u0";
    case 3:
      return "dt";
    case 4:
      return "rho_S";
    case 5:
      return "mu_s";
    case 6:
      return "nu_s";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_v_p_p;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_v0;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_u0;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_dt;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_rho_S;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_mu_s;
  typedef Form_F_FunctionSpace_7 CoefficientSpace_nu_s;

  // Coefficients
  dolfin::CoefficientAssigner v_p_p;
  dolfin::CoefficientAssigner v0;
  dolfin::CoefficientAssigner u0;
  dolfin::CoefficientAssigner dt;
  dolfin::CoefficientAssigner rho_S;
  dolfin::CoefficientAssigner mu_s;
  dolfin::CoefficientAssigner nu_s;
};

class MultiMeshForm_F: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), v_p_p(*this, 0), v0(*this, 1), u0(*this, 2), dt(*this, 3), rho_S(*this, 4), mu_s(*this, 5), nu_s(*this, 6)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> rho_S, std::shared_ptr<const dolfin::GenericFunction> mu_s, std::shared_ptr<const dolfin::GenericFunction> nu_s):
    dolfin::MultiMeshForm(V0), v_p_p(*this, 0), v0(*this, 1), u0(*this, 2), dt(*this, 3), rho_S(*this, 4), mu_s(*this, 5), nu_s(*this, 6)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->v_p_p = v_p_p;
    this->v0 = v0;
    this->u0 = u0;
    this->dt = dt;
    this->rho_S = rho_S;
    this->mu_s = mu_s;
    this->nu_s = nu_s;

  }

  // Destructor
  ~MultiMeshForm_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "u0")
      return 2;
    else if (name == "dt")
      return 3;
    else if (name == "rho_S")
      return 4;
    else if (name == "mu_s")
      return 5;
    else if (name == "nu_s")
      return 6;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p_p";
    case 1:
      return "v0";
    case 2:
      return "u0";
    case 3:
      return "dt";
    case 4:
      return "rho_S";
    case 5:
      return "mu_s";
    case 6:
      return "nu_s";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_v_p_p;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_v0;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_u0;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_dt;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_rho_S;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_mu_s;
  typedef Form_F_FunctionSpace_7 CoefficientSpace_nu_s;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner v_p_p;
  dolfin::MultiMeshCoefficientAssigner v0;
  dolfin::MultiMeshCoefficientAssigner u0;
  dolfin::MultiMeshCoefficientAssigner dt;
  dolfin::MultiMeshCoefficientAssigner rho_S;
  dolfin::MultiMeshCoefficientAssigner mu_s;
  dolfin::MultiMeshCoefficientAssigner nu_s;
};

class Form_J_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_J_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_v_p_p Form_J_FunctionSpace_2;

typedef CoefficientSpace_v0 Form_J_FunctionSpace_3;

typedef CoefficientSpace_u0 Form_J_FunctionSpace_4;

typedef CoefficientSpace_dt Form_J_FunctionSpace_5;

typedef CoefficientSpace_rho_S Form_J_FunctionSpace_6;

typedef CoefficientSpace_mu_s Form_J_FunctionSpace_7;

typedef CoefficientSpace_nu_s Form_J_FunctionSpace_8;

class Form_J: public dolfin::Form
{
public:

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 7), v_p_p(*this, 0), v0(*this, 1), u0(*this, 2), dt(*this, 3), rho_S(*this, 4), mu_s(*this, 5), nu_s(*this, 6)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const linearelastic3dp1p1_form_1>();
  }

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> rho_S, std::shared_ptr<const dolfin::GenericFunction> mu_s, std::shared_ptr<const dolfin::GenericFunction> nu_s):
    dolfin::Form(2, 7), v_p_p(*this, 0), v0(*this, 1), u0(*this, 2), dt(*this, 3), rho_S(*this, 4), mu_s(*this, 5), nu_s(*this, 6)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->v_p_p = v_p_p;
    this->v0 = v0;
    this->u0 = u0;
    this->dt = dt;
    this->rho_S = rho_S;
    this->mu_s = mu_s;
    this->nu_s = nu_s;

    _ufc_form = std::make_shared<const linearelastic3dp1p1_form_1>();
  }

  // Destructor
  ~Form_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "u0")
      return 2;
    else if (name == "dt")
      return 3;
    else if (name == "rho_S")
      return 4;
    else if (name == "mu_s")
      return 5;
    else if (name == "nu_s")
      return 6;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p_p";
    case 1:
      return "v0";
    case 2:
      return "u0";
    case 3:
      return "dt";
    case 4:
      return "rho_S";
    case 5:
      return "mu_s";
    case 6:
      return "nu_s";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_v_p_p;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_v0;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_u0;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_dt;
  typedef Form_J_FunctionSpace_6 CoefficientSpace_rho_S;
  typedef Form_J_FunctionSpace_7 CoefficientSpace_mu_s;
  typedef Form_J_FunctionSpace_8 CoefficientSpace_nu_s;

  // Coefficients
  dolfin::CoefficientAssigner v_p_p;
  dolfin::CoefficientAssigner v0;
  dolfin::CoefficientAssigner u0;
  dolfin::CoefficientAssigner dt;
  dolfin::CoefficientAssigner rho_S;
  dolfin::CoefficientAssigner mu_s;
  dolfin::CoefficientAssigner nu_s;
};

class MultiMeshForm_J: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), v_p_p(*this, 0), v0(*this, 1), u0(*this, 2), dt(*this, 3), rho_S(*this, 4), mu_s(*this, 5), nu_s(*this, 6)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> rho_S, std::shared_ptr<const dolfin::GenericFunction> mu_s, std::shared_ptr<const dolfin::GenericFunction> nu_s):
    dolfin::MultiMeshForm(V1, V0), v_p_p(*this, 0), v0(*this, 1), u0(*this, 2), dt(*this, 3), rho_S(*this, 4), mu_s(*this, 5), nu_s(*this, 6)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->v_p_p = v_p_p;
    this->v0 = v0;
    this->u0 = u0;
    this->dt = dt;
    this->rho_S = rho_S;
    this->mu_s = mu_s;
    this->nu_s = nu_s;

  }

  // Destructor
  ~MultiMeshForm_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "u0")
      return 2;
    else if (name == "dt")
      return 3;
    else if (name == "rho_S")
      return 4;
    else if (name == "mu_s")
      return 5;
    else if (name == "nu_s")
      return 6;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p_p";
    case 1:
      return "v0";
    case 2:
      return "u0";
    case 3:
      return "dt";
    case 4:
      return "rho_S";
    case 5:
      return "mu_s";
    case 6:
      return "nu_s";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_v_p_p;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_v0;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_u0;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_dt;
  typedef Form_J_FunctionSpace_6 CoefficientSpace_rho_S;
  typedef Form_J_FunctionSpace_7 CoefficientSpace_mu_s;
  typedef Form_J_FunctionSpace_8 CoefficientSpace_nu_s;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner v_p_p;
  dolfin::MultiMeshCoefficientAssigner v0;
  dolfin::MultiMeshCoefficientAssigner u0;
  dolfin::MultiMeshCoefficientAssigner dt;
  dolfin::MultiMeshCoefficientAssigner rho_S;
  dolfin::MultiMeshCoefficientAssigner mu_s;
  dolfin::MultiMeshCoefficientAssigner nu_s;
};

// Class typedefs
typedef Form_J BilinearForm;
typedef MultiMeshForm_J MultiMeshBilinearForm;
typedef Form_J JacobianForm;
typedef MultiMeshForm_J MultiMeshJacobianForm;
typedef Form_F LinearForm;
typedef MultiMeshForm_F MultiMeshLinearForm;
typedef Form_F ResidualForm;
typedef MultiMeshForm_F MultiMeshResidualForm;
typedef Form_F::TestSpace FunctionSpace;
typedef Form_F::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
