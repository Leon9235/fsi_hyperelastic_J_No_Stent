# This file is automatically generated by running
#
#     cmake/scripts/generate-cmakefiles
#
# Require CMake 3.5
cmake_minimum_required(VERSION 3.5)
set(PROJECT_NAME FSI)
project(${PROJECT_NAME})

# Set verbose output while testing CMake
#set(CMAKE_VERBOSE_MAKEFILE 1)

# Set CMake behavior
cmake_policy(SET CMP0004 NEW)

# Set useful directory

set(FSI_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)
set(FSI_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
#set(FSI_LIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/lib)
#set(NE_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
#set(NE_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
#set(NE_LIB_DIR ${CMAKE_CURRENT_BINARY_DIR}/lib)
#set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR})
#set(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/lib)

include_directories(${FSI_INCLUDE_DIR})
#include_directories(${DOLFIN_INCLUDE_DIRS})
include_directories(SYSTEM /opt/boost/1.63.0/include)


# Get DOLFIN configuration data (DOLFINConfig.cmake must be in
# DOLFIN_CMAKE_CONFIG_PATH)
find_package(DOLFIN REQUIRED)

include(${DOLFIN_USE_FILE})

find_package(PETSc REQUIRED QUIET)
include_directories(${PETSC_INCLUDE_DIRS})
find_package(SLEPc REQUIRED QUIET)
include_directories(${SLEPC_INCLUDE_DIRS})

# Default build type (can be overridden by user)
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING
      "Choose the type of build, options are: Debug MinSizeRel Release RelWithDebInfo." FORCE)
endif()

# Do not throw error for 'multi-line comments' (these are typical in
# rst which includes LaTeX)
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-Wno-comment" HAVE_NO_MULTLINE)
if (HAVE_NO_MULTLINE)
  set(CMAKE_CXX_FLAGS "-Wno-comment ${CMAKE_CXX_FLAGS}")
endif()

file(GLOB FSI_LIB_SRC ${FSI_SRC_DIR}/*.cpp)
add_library(fsi SHARED ${FSI_LIB_SRC})

# Executable
file( GLOB EXESRC RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" Main3D.cpp)

foreach( srcfile ${EXESRC} )
    string( REGEX REPLACE "\\.[^\\.]*$" ".ex" exectmp ${srcfile} )
    string( REGEX REPLACE "Main" "" execfile ${exectmp} )
    #    message( "${execfile} ${srcfile}" )
    add_executable( ${execfile} ./${srcfile}  )

    # Target libraries
    target_link_libraries(${execfile}  fsi ${DOLFIN_LIBRARIES})
endforeach(srcfile)


# Executable
#add_executable(${PROJECT_NAME} main.cpp)

# Target libraries
#target_link_libraries(${PROJECT_NAME} dolfin)
